Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> executionLine
Rule 1     executionLine -> declarationList
Rule 2     declarationList -> declaration declarationList
Rule 3     declarationList -> declaration
Rule 4     declaration -> varDeclaration SEMI
Rule 5     declaration -> statement
Rule 6     varDeclaration -> ID EQUALS declarationElement
Rule 7     declarationElement -> list
Rule 8     declarationElement -> expressionStmt
Rule 9     declarationElement -> STRING
Rule 10    declarationElement -> BOOLEAN
Rule 11    declarationElement -> inputStmt
Rule 12    declarationElement -> functionalStmt
Rule 13    list -> LSQUARE listElements RSQUARE
Rule 14    listElements -> NUMBER
Rule 15    listElements -> NUMBER OP_NUMBER
Rule 16    listElements -> STRING
Rule 17    listElements -> STRING OP_STRING
Rule 18    listElements -> BOOLEAN
Rule 19    listElements -> BOOLEAN OP_BOOLEAN
Rule 20    statement -> expressionStmt SEMI
Rule 21    statement -> conditionalStmt
Rule 22    statement -> iterationStmt
Rule 23    statement -> functionalStmt SEMI
Rule 24    statement -> inputStmt SEMI
Rule 25    statement -> outputStmt SEMI
Rule 26    statement -> commentStmt
Rule 27    iterationStmt -> FOR ID IN iterationElement COL declarationList
Rule 28    iterationElement -> list
Rule 29    iterationElement -> ID
Rule 30    conditionalStmt -> IF expressionStmt COL declarationList
Rule 31    conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList
Rule 32    expressionStmt -> expressionStmt OR andExpression
Rule 33    expressionStmt -> andExpression
Rule 34    andExpression -> andExpression AND unaryRelExpression
Rule 35    andExpression -> unaryRelExpression
Rule 36    unaryRelExpression -> NOT unaryRelExpression
Rule 37    unaryRelExpression -> relExpression
Rule 38    relExpression -> sumExpression relop sumExpression
Rule 39    relExpression -> sumExpression
Rule 40    relop -> LE
Rule 41    relop -> LT
Rule 42    relop -> GT
Rule 43    relop -> GE
Rule 44    relop -> EQ
Rule 45    relop -> NEQ
Rule 46    sumExpression -> sumExpression sumop term
Rule 47    sumExpression -> term
Rule 48    sumop -> PLUS
Rule 49    sumop -> MINUS
Rule 50    term -> term mulop sumElement
Rule 51    term -> sumElement
Rule 52    sumElement -> ID
Rule 53    sumElement -> NUMBER
Rule 54    mulop -> PROD
Rule 55    mulop -> DIV
Rule 56    functionalStmt -> FILTER LPAREN lambdaFilter RPAREN
Rule 57    functionalStmt -> MAP LPAREN lambdaMap RPAREN
Rule 58    functionalStmt -> REDUCE LPAREN lambdaReduce RPAREN
Rule 59    lambdaMap -> LAMBDA COL sumExpression
Rule 60    lambdaReduce -> LAMBDA COL mulop COMA ID
Rule 61    lambdaReduce -> LAMBDA COL sumop COMA ID
Rule 62    lambdaFilter -> LAMBDA COL relExpression
Rule 63    inputStmt -> INPUT LPAREN RPAREN
Rule 64    outputStmt -> OUTPUT LPAREN declarationElement RPAREN
Rule 65    commentStmt -> COMMENT

Terminals, with rules where they appear

AND                  : 34
BOOLEAN              : 10 18 19
COL                  : 27 30 31 31 59 60 61 62
COMA                 : 60 61
COMMENT              : 65
DIV                  : 55
ELSE                 : 31
EQ                   : 44
EQUALS               : 6
FILTER               : 56
FOR                  : 27
GE                   : 43
GT                   : 42
ID                   : 6 27 29 52 60 61
IF                   : 30 31
IN                   : 27
INPUT                : 63
LAMBDA               : 59 60 61 62
LE                   : 40
LPAREN               : 56 57 58 63 64
LSQUARE              : 13
LT                   : 41
MAP                  : 57
MINUS                : 49
NEQ                  : 45
NOT                  : 36
NUMBER               : 14 15 53
OP_BOOLEAN           : 19
OP_NUMBER            : 15
OP_STRING            : 17
OR                   : 32
OUTPUT               : 64
PLUS                 : 48
PROD                 : 54
REDUCE               : 58
RPAREN               : 56 57 58 63 64
RSQUARE              : 13
SEMI                 : 4 20 23 24 25
STRING               : 9 16 17
error                : 

Nonterminals, with rules where they appear

andExpression        : 32 33 34
commentStmt          : 26
conditionalStmt      : 21
declaration          : 2 3
declarationElement   : 6 64
declarationList      : 1 2 27 30 31 31
executionLine        : 0
expressionStmt       : 8 20 30 31 32
functionalStmt       : 12 23
inputStmt            : 11 24
iterationElement     : 27
iterationStmt        : 22
lambdaFilter         : 56
lambdaMap            : 57
lambdaReduce         : 58
list                 : 7 28
listElements         : 13
mulop                : 50 60
outputStmt           : 25
relExpression        : 37 62
relop                : 38
statement            : 5
sumElement           : 50 51
sumExpression        : 38 38 39 46 59
sumop                : 46 61
term                 : 46 47 50
unaryRelExpression   : 34 35 36
varDeclaration       : 4

Parsing method: LALR

state 0

    (0) S' -> . executionLine
    (1) executionLine -> . declarationList
    (2) declarationList -> . declaration declarationList
    (3) declarationList -> . declaration
    (4) declaration -> . varDeclaration SEMI
    (5) declaration -> . statement
    (6) varDeclaration -> . ID EQUALS declarationElement
    (20) statement -> . expressionStmt SEMI
    (21) statement -> . conditionalStmt
    (22) statement -> . iterationStmt
    (23) statement -> . functionalStmt SEMI
    (24) statement -> . inputStmt SEMI
    (25) statement -> . outputStmt SEMI
    (26) statement -> . commentStmt
    (32) expressionStmt -> . expressionStmt OR andExpression
    (33) expressionStmt -> . andExpression
    (30) conditionalStmt -> . IF expressionStmt COL declarationList
    (31) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (27) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (56) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (57) functionalStmt -> . MAP LPAREN lambdaMap RPAREN
    (58) functionalStmt -> . REDUCE LPAREN lambdaReduce RPAREN
    (63) inputStmt -> . INPUT LPAREN RPAREN
    (64) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (65) commentStmt -> . COMMENT
    (34) andExpression -> . andExpression AND unaryRelExpression
    (35) andExpression -> . unaryRelExpression
    (36) unaryRelExpression -> . NOT unaryRelExpression
    (37) unaryRelExpression -> . relExpression
    (38) relExpression -> . sumExpression relop sumExpression
    (39) relExpression -> . sumExpression
    (46) sumExpression -> . sumExpression sumop term
    (47) sumExpression -> . term
    (50) term -> . term mulop sumElement
    (51) term -> . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

    ID              shift and go to state 6
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FILTER          shift and go to state 17
    MAP             shift and go to state 18
    REDUCE          shift and go to state 19
    INPUT           shift and go to state 20
    OUTPUT          shift and go to state 21
    COMMENT         shift and go to state 22
    NOT             shift and go to state 24
    NUMBER          shift and go to state 29

    executionLine                  shift and go to state 1
    declarationList                shift and go to state 2
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    expressionStmt                 shift and go to state 7
    conditionalStmt                shift and go to state 8
    iterationStmt                  shift and go to state 9
    functionalStmt                 shift and go to state 10
    inputStmt                      shift and go to state 11
    outputStmt                     shift and go to state 12
    commentStmt                    shift and go to state 13
    andExpression                  shift and go to state 14
    unaryRelExpression             shift and go to state 23
    relExpression                  shift and go to state 25
    sumExpression                  shift and go to state 26
    term                           shift and go to state 27
    sumElement                     shift and go to state 28

state 1

    (0) S' -> executionLine .



state 2

    (1) executionLine -> declarationList .

    $end            reduce using rule 1 (executionLine -> declarationList .)


state 3

    (2) declarationList -> declaration . declarationList
    (3) declarationList -> declaration .
    (2) declarationList -> . declaration declarationList
    (3) declarationList -> . declaration
    (4) declaration -> . varDeclaration SEMI
    (5) declaration -> . statement
    (6) varDeclaration -> . ID EQUALS declarationElement
    (20) statement -> . expressionStmt SEMI
    (21) statement -> . conditionalStmt
    (22) statement -> . iterationStmt
    (23) statement -> . functionalStmt SEMI
    (24) statement -> . inputStmt SEMI
    (25) statement -> . outputStmt SEMI
    (26) statement -> . commentStmt
    (32) expressionStmt -> . expressionStmt OR andExpression
    (33) expressionStmt -> . andExpression
    (30) conditionalStmt -> . IF expressionStmt COL declarationList
    (31) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (27) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (56) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (57) functionalStmt -> . MAP LPAREN lambdaMap RPAREN
    (58) functionalStmt -> . REDUCE LPAREN lambdaReduce RPAREN
    (63) inputStmt -> . INPUT LPAREN RPAREN
    (64) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (65) commentStmt -> . COMMENT
    (34) andExpression -> . andExpression AND unaryRelExpression
    (35) andExpression -> . unaryRelExpression
    (36) unaryRelExpression -> . NOT unaryRelExpression
    (37) unaryRelExpression -> . relExpression
    (38) relExpression -> . sumExpression relop sumExpression
    (39) relExpression -> . sumExpression
    (46) sumExpression -> . sumExpression sumop term
    (47) sumExpression -> . term
    (50) term -> . term mulop sumElement
    (51) term -> . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FILTER resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for REDUCE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    $end            reduce using rule 3 (declarationList -> declaration .)
    ELSE            reduce using rule 3 (declarationList -> declaration .)
    ID              shift and go to state 6
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FILTER          shift and go to state 17
    MAP             shift and go to state 18
    REDUCE          shift and go to state 19
    INPUT           shift and go to state 20
    OUTPUT          shift and go to state 21
    COMMENT         shift and go to state 22
    NOT             shift and go to state 24
    NUMBER          shift and go to state 29

  ! ID              [ reduce using rule 3 (declarationList -> declaration .) ]
  ! IF              [ reduce using rule 3 (declarationList -> declaration .) ]
  ! FOR             [ reduce using rule 3 (declarationList -> declaration .) ]
  ! FILTER          [ reduce using rule 3 (declarationList -> declaration .) ]
  ! MAP             [ reduce using rule 3 (declarationList -> declaration .) ]
  ! REDUCE          [ reduce using rule 3 (declarationList -> declaration .) ]
  ! INPUT           [ reduce using rule 3 (declarationList -> declaration .) ]
  ! OUTPUT          [ reduce using rule 3 (declarationList -> declaration .) ]
  ! COMMENT         [ reduce using rule 3 (declarationList -> declaration .) ]
  ! NOT             [ reduce using rule 3 (declarationList -> declaration .) ]
  ! NUMBER          [ reduce using rule 3 (declarationList -> declaration .) ]

    declaration                    shift and go to state 3
    declarationList                shift and go to state 30
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    expressionStmt                 shift and go to state 7
    conditionalStmt                shift and go to state 8
    iterationStmt                  shift and go to state 9
    functionalStmt                 shift and go to state 10
    inputStmt                      shift and go to state 11
    outputStmt                     shift and go to state 12
    commentStmt                    shift and go to state 13
    andExpression                  shift and go to state 14
    unaryRelExpression             shift and go to state 23
    relExpression                  shift and go to state 25
    sumExpression                  shift and go to state 26
    term                           shift and go to state 27
    sumElement                     shift and go to state 28

state 4

    (4) declaration -> varDeclaration . SEMI

    SEMI            shift and go to state 31


state 5

    (5) declaration -> statement .

    ID              reduce using rule 5 (declaration -> statement .)
    IF              reduce using rule 5 (declaration -> statement .)
    FOR             reduce using rule 5 (declaration -> statement .)
    FILTER          reduce using rule 5 (declaration -> statement .)
    MAP             reduce using rule 5 (declaration -> statement .)
    REDUCE          reduce using rule 5 (declaration -> statement .)
    INPUT           reduce using rule 5 (declaration -> statement .)
    OUTPUT          reduce using rule 5 (declaration -> statement .)
    COMMENT         reduce using rule 5 (declaration -> statement .)
    NOT             reduce using rule 5 (declaration -> statement .)
    NUMBER          reduce using rule 5 (declaration -> statement .)
    $end            reduce using rule 5 (declaration -> statement .)
    ELSE            reduce using rule 5 (declaration -> statement .)


state 6

    (6) varDeclaration -> ID . EQUALS declarationElement
    (52) sumElement -> ID .

    EQUALS          shift and go to state 32
    PROD            reduce using rule 52 (sumElement -> ID .)
    DIV             reduce using rule 52 (sumElement -> ID .)
    LE              reduce using rule 52 (sumElement -> ID .)
    LT              reduce using rule 52 (sumElement -> ID .)
    GT              reduce using rule 52 (sumElement -> ID .)
    GE              reduce using rule 52 (sumElement -> ID .)
    EQ              reduce using rule 52 (sumElement -> ID .)
    NEQ             reduce using rule 52 (sumElement -> ID .)
    PLUS            reduce using rule 52 (sumElement -> ID .)
    MINUS           reduce using rule 52 (sumElement -> ID .)
    AND             reduce using rule 52 (sumElement -> ID .)
    SEMI            reduce using rule 52 (sumElement -> ID .)
    OR              reduce using rule 52 (sumElement -> ID .)


state 7

    (20) statement -> expressionStmt . SEMI
    (32) expressionStmt -> expressionStmt . OR andExpression

    SEMI            shift and go to state 33
    OR              shift and go to state 34


state 8

    (21) statement -> conditionalStmt .

    ID              reduce using rule 21 (statement -> conditionalStmt .)
    IF              reduce using rule 21 (statement -> conditionalStmt .)
    FOR             reduce using rule 21 (statement -> conditionalStmt .)
    FILTER          reduce using rule 21 (statement -> conditionalStmt .)
    MAP             reduce using rule 21 (statement -> conditionalStmt .)
    REDUCE          reduce using rule 21 (statement -> conditionalStmt .)
    INPUT           reduce using rule 21 (statement -> conditionalStmt .)
    OUTPUT          reduce using rule 21 (statement -> conditionalStmt .)
    COMMENT         reduce using rule 21 (statement -> conditionalStmt .)
    NOT             reduce using rule 21 (statement -> conditionalStmt .)
    NUMBER          reduce using rule 21 (statement -> conditionalStmt .)
    $end            reduce using rule 21 (statement -> conditionalStmt .)
    ELSE            reduce using rule 21 (statement -> conditionalStmt .)


state 9

    (22) statement -> iterationStmt .

    ID              reduce using rule 22 (statement -> iterationStmt .)
    IF              reduce using rule 22 (statement -> iterationStmt .)
    FOR             reduce using rule 22 (statement -> iterationStmt .)
    FILTER          reduce using rule 22 (statement -> iterationStmt .)
    MAP             reduce using rule 22 (statement -> iterationStmt .)
    REDUCE          reduce using rule 22 (statement -> iterationStmt .)
    INPUT           reduce using rule 22 (statement -> iterationStmt .)
    OUTPUT          reduce using rule 22 (statement -> iterationStmt .)
    COMMENT         reduce using rule 22 (statement -> iterationStmt .)
    NOT             reduce using rule 22 (statement -> iterationStmt .)
    NUMBER          reduce using rule 22 (statement -> iterationStmt .)
    $end            reduce using rule 22 (statement -> iterationStmt .)
    ELSE            reduce using rule 22 (statement -> iterationStmt .)


state 10

    (23) statement -> functionalStmt . SEMI

    SEMI            shift and go to state 35


state 11

    (24) statement -> inputStmt . SEMI

    SEMI            shift and go to state 36


state 12

    (25) statement -> outputStmt . SEMI

    SEMI            shift and go to state 37


state 13

    (26) statement -> commentStmt .

    ID              reduce using rule 26 (statement -> commentStmt .)
    IF              reduce using rule 26 (statement -> commentStmt .)
    FOR             reduce using rule 26 (statement -> commentStmt .)
    FILTER          reduce using rule 26 (statement -> commentStmt .)
    MAP             reduce using rule 26 (statement -> commentStmt .)
    REDUCE          reduce using rule 26 (statement -> commentStmt .)
    INPUT           reduce using rule 26 (statement -> commentStmt .)
    OUTPUT          reduce using rule 26 (statement -> commentStmt .)
    COMMENT         reduce using rule 26 (statement -> commentStmt .)
    NOT             reduce using rule 26 (statement -> commentStmt .)
    NUMBER          reduce using rule 26 (statement -> commentStmt .)
    $end            reduce using rule 26 (statement -> commentStmt .)
    ELSE            reduce using rule 26 (statement -> commentStmt .)


state 14

    (33) expressionStmt -> andExpression .
    (34) andExpression -> andExpression . AND unaryRelExpression

    SEMI            reduce using rule 33 (expressionStmt -> andExpression .)
    OR              reduce using rule 33 (expressionStmt -> andExpression .)
    COL             reduce using rule 33 (expressionStmt -> andExpression .)
    RPAREN          reduce using rule 33 (expressionStmt -> andExpression .)
    AND             shift and go to state 38


state 15

    (30) conditionalStmt -> IF . expressionStmt COL declarationList
    (31) conditionalStmt -> IF . expressionStmt COL declarationList ELSE COL declarationList
    (32) expressionStmt -> . expressionStmt OR andExpression
    (33) expressionStmt -> . andExpression
    (34) andExpression -> . andExpression AND unaryRelExpression
    (35) andExpression -> . unaryRelExpression
    (36) unaryRelExpression -> . NOT unaryRelExpression
    (37) unaryRelExpression -> . relExpression
    (38) relExpression -> . sumExpression relop sumExpression
    (39) relExpression -> . sumExpression
    (46) sumExpression -> . sumExpression sumop term
    (47) sumExpression -> . term
    (50) term -> . term mulop sumElement
    (51) term -> . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

    NOT             shift and go to state 24
    ID              shift and go to state 40
    NUMBER          shift and go to state 29

    expressionStmt                 shift and go to state 39
    andExpression                  shift and go to state 14
    unaryRelExpression             shift and go to state 23
    relExpression                  shift and go to state 25
    sumExpression                  shift and go to state 26
    term                           shift and go to state 27
    sumElement                     shift and go to state 28

state 16

    (27) iterationStmt -> FOR . ID IN iterationElement COL declarationList

    ID              shift and go to state 41


state 17

    (56) functionalStmt -> FILTER . LPAREN lambdaFilter RPAREN

    LPAREN          shift and go to state 42


state 18

    (57) functionalStmt -> MAP . LPAREN lambdaMap RPAREN

    LPAREN          shift and go to state 43


state 19

    (58) functionalStmt -> REDUCE . LPAREN lambdaReduce RPAREN

    LPAREN          shift and go to state 44


state 20

    (63) inputStmt -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 45


state 21

    (64) outputStmt -> OUTPUT . LPAREN declarationElement RPAREN

    LPAREN          shift and go to state 46


state 22

    (65) commentStmt -> COMMENT .

    ID              reduce using rule 65 (commentStmt -> COMMENT .)
    IF              reduce using rule 65 (commentStmt -> COMMENT .)
    FOR             reduce using rule 65 (commentStmt -> COMMENT .)
    FILTER          reduce using rule 65 (commentStmt -> COMMENT .)
    MAP             reduce using rule 65 (commentStmt -> COMMENT .)
    REDUCE          reduce using rule 65 (commentStmt -> COMMENT .)
    INPUT           reduce using rule 65 (commentStmt -> COMMENT .)
    OUTPUT          reduce using rule 65 (commentStmt -> COMMENT .)
    COMMENT         reduce using rule 65 (commentStmt -> COMMENT .)
    NOT             reduce using rule 65 (commentStmt -> COMMENT .)
    NUMBER          reduce using rule 65 (commentStmt -> COMMENT .)
    $end            reduce using rule 65 (commentStmt -> COMMENT .)
    ELSE            reduce using rule 65 (commentStmt -> COMMENT .)


state 23

    (35) andExpression -> unaryRelExpression .

    AND             reduce using rule 35 (andExpression -> unaryRelExpression .)
    SEMI            reduce using rule 35 (andExpression -> unaryRelExpression .)
    OR              reduce using rule 35 (andExpression -> unaryRelExpression .)
    COL             reduce using rule 35 (andExpression -> unaryRelExpression .)
    RPAREN          reduce using rule 35 (andExpression -> unaryRelExpression .)


state 24

    (36) unaryRelExpression -> NOT . unaryRelExpression
    (36) unaryRelExpression -> . NOT unaryRelExpression
    (37) unaryRelExpression -> . relExpression
    (38) relExpression -> . sumExpression relop sumExpression
    (39) relExpression -> . sumExpression
    (46) sumExpression -> . sumExpression sumop term
    (47) sumExpression -> . term
    (50) term -> . term mulop sumElement
    (51) term -> . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

    NOT             shift and go to state 24
    ID              shift and go to state 40
    NUMBER          shift and go to state 29

    unaryRelExpression             shift and go to state 47
    relExpression                  shift and go to state 25
    sumExpression                  shift and go to state 26
    term                           shift and go to state 27
    sumElement                     shift and go to state 28

state 25

    (37) unaryRelExpression -> relExpression .

    AND             reduce using rule 37 (unaryRelExpression -> relExpression .)
    SEMI            reduce using rule 37 (unaryRelExpression -> relExpression .)
    OR              reduce using rule 37 (unaryRelExpression -> relExpression .)
    COL             reduce using rule 37 (unaryRelExpression -> relExpression .)
    RPAREN          reduce using rule 37 (unaryRelExpression -> relExpression .)


state 26

    (38) relExpression -> sumExpression . relop sumExpression
    (39) relExpression -> sumExpression .
    (46) sumExpression -> sumExpression . sumop term
    (40) relop -> . LE
    (41) relop -> . LT
    (42) relop -> . GT
    (43) relop -> . GE
    (44) relop -> . EQ
    (45) relop -> . NEQ
    (48) sumop -> . PLUS
    (49) sumop -> . MINUS

    AND             reduce using rule 39 (relExpression -> sumExpression .)
    SEMI            reduce using rule 39 (relExpression -> sumExpression .)
    OR              reduce using rule 39 (relExpression -> sumExpression .)
    COL             reduce using rule 39 (relExpression -> sumExpression .)
    RPAREN          reduce using rule 39 (relExpression -> sumExpression .)
    LE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    GE              shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    relop                          shift and go to state 48
    sumop                          shift and go to state 49

state 27

    (47) sumExpression -> term .
    (50) term -> term . mulop sumElement
    (54) mulop -> . PROD
    (55) mulop -> . DIV

    LE              reduce using rule 47 (sumExpression -> term .)
    LT              reduce using rule 47 (sumExpression -> term .)
    GT              reduce using rule 47 (sumExpression -> term .)
    GE              reduce using rule 47 (sumExpression -> term .)
    EQ              reduce using rule 47 (sumExpression -> term .)
    NEQ             reduce using rule 47 (sumExpression -> term .)
    PLUS            reduce using rule 47 (sumExpression -> term .)
    MINUS           reduce using rule 47 (sumExpression -> term .)
    AND             reduce using rule 47 (sumExpression -> term .)
    SEMI            reduce using rule 47 (sumExpression -> term .)
    OR              reduce using rule 47 (sumExpression -> term .)
    COL             reduce using rule 47 (sumExpression -> term .)
    RPAREN          reduce using rule 47 (sumExpression -> term .)
    PROD            shift and go to state 59
    DIV             shift and go to state 60

    mulop                          shift and go to state 58

state 28

    (51) term -> sumElement .

    PROD            reduce using rule 51 (term -> sumElement .)
    DIV             reduce using rule 51 (term -> sumElement .)
    LE              reduce using rule 51 (term -> sumElement .)
    LT              reduce using rule 51 (term -> sumElement .)
    GT              reduce using rule 51 (term -> sumElement .)
    GE              reduce using rule 51 (term -> sumElement .)
    EQ              reduce using rule 51 (term -> sumElement .)
    NEQ             reduce using rule 51 (term -> sumElement .)
    PLUS            reduce using rule 51 (term -> sumElement .)
    MINUS           reduce using rule 51 (term -> sumElement .)
    AND             reduce using rule 51 (term -> sumElement .)
    SEMI            reduce using rule 51 (term -> sumElement .)
    OR              reduce using rule 51 (term -> sumElement .)
    COL             reduce using rule 51 (term -> sumElement .)
    RPAREN          reduce using rule 51 (term -> sumElement .)


state 29

    (53) sumElement -> NUMBER .

    PROD            reduce using rule 53 (sumElement -> NUMBER .)
    DIV             reduce using rule 53 (sumElement -> NUMBER .)
    LE              reduce using rule 53 (sumElement -> NUMBER .)
    LT              reduce using rule 53 (sumElement -> NUMBER .)
    GT              reduce using rule 53 (sumElement -> NUMBER .)
    GE              reduce using rule 53 (sumElement -> NUMBER .)
    EQ              reduce using rule 53 (sumElement -> NUMBER .)
    NEQ             reduce using rule 53 (sumElement -> NUMBER .)
    PLUS            reduce using rule 53 (sumElement -> NUMBER .)
    MINUS           reduce using rule 53 (sumElement -> NUMBER .)
    AND             reduce using rule 53 (sumElement -> NUMBER .)
    SEMI            reduce using rule 53 (sumElement -> NUMBER .)
    OR              reduce using rule 53 (sumElement -> NUMBER .)
    COL             reduce using rule 53 (sumElement -> NUMBER .)
    RPAREN          reduce using rule 53 (sumElement -> NUMBER .)


state 30

    (2) declarationList -> declaration declarationList .

    $end            reduce using rule 2 (declarationList -> declaration declarationList .)
    ELSE            reduce using rule 2 (declarationList -> declaration declarationList .)
    ID              reduce using rule 2 (declarationList -> declaration declarationList .)
    IF              reduce using rule 2 (declarationList -> declaration declarationList .)
    FOR             reduce using rule 2 (declarationList -> declaration declarationList .)
    FILTER          reduce using rule 2 (declarationList -> declaration declarationList .)
    MAP             reduce using rule 2 (declarationList -> declaration declarationList .)
    REDUCE          reduce using rule 2 (declarationList -> declaration declarationList .)
    INPUT           reduce using rule 2 (declarationList -> declaration declarationList .)
    OUTPUT          reduce using rule 2 (declarationList -> declaration declarationList .)
    COMMENT         reduce using rule 2 (declarationList -> declaration declarationList .)
    NOT             reduce using rule 2 (declarationList -> declaration declarationList .)
    NUMBER          reduce using rule 2 (declarationList -> declaration declarationList .)


state 31

    (4) declaration -> varDeclaration SEMI .

    ID              reduce using rule 4 (declaration -> varDeclaration SEMI .)
    IF              reduce using rule 4 (declaration -> varDeclaration SEMI .)
    FOR             reduce using rule 4 (declaration -> varDeclaration SEMI .)
    FILTER          reduce using rule 4 (declaration -> varDeclaration SEMI .)
    MAP             reduce using rule 4 (declaration -> varDeclaration SEMI .)
    REDUCE          reduce using rule 4 (declaration -> varDeclaration SEMI .)
    INPUT           reduce using rule 4 (declaration -> varDeclaration SEMI .)
    OUTPUT          reduce using rule 4 (declaration -> varDeclaration SEMI .)
    COMMENT         reduce using rule 4 (declaration -> varDeclaration SEMI .)
    NOT             reduce using rule 4 (declaration -> varDeclaration SEMI .)
    NUMBER          reduce using rule 4 (declaration -> varDeclaration SEMI .)
    $end            reduce using rule 4 (declaration -> varDeclaration SEMI .)
    ELSE            reduce using rule 4 (declaration -> varDeclaration SEMI .)


state 32

    (6) varDeclaration -> ID EQUALS . declarationElement
    (7) declarationElement -> . list
    (8) declarationElement -> . expressionStmt
    (9) declarationElement -> . STRING
    (10) declarationElement -> . BOOLEAN
    (11) declarationElement -> . inputStmt
    (12) declarationElement -> . functionalStmt
    (13) list -> . LSQUARE listElements RSQUARE
    (32) expressionStmt -> . expressionStmt OR andExpression
    (33) expressionStmt -> . andExpression
    (63) inputStmt -> . INPUT LPAREN RPAREN
    (56) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (57) functionalStmt -> . MAP LPAREN lambdaMap RPAREN
    (58) functionalStmt -> . REDUCE LPAREN lambdaReduce RPAREN
    (34) andExpression -> . andExpression AND unaryRelExpression
    (35) andExpression -> . unaryRelExpression
    (36) unaryRelExpression -> . NOT unaryRelExpression
    (37) unaryRelExpression -> . relExpression
    (38) relExpression -> . sumExpression relop sumExpression
    (39) relExpression -> . sumExpression
    (46) sumExpression -> . sumExpression sumop term
    (47) sumExpression -> . term
    (50) term -> . term mulop sumElement
    (51) term -> . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

    STRING          shift and go to state 64
    BOOLEAN         shift and go to state 65
    LSQUARE         shift and go to state 68
    INPUT           shift and go to state 20
    FILTER          shift and go to state 17
    MAP             shift and go to state 18
    REDUCE          shift and go to state 19
    NOT             shift and go to state 24
    ID              shift and go to state 40
    NUMBER          shift and go to state 29

    declarationElement             shift and go to state 61
    list                           shift and go to state 62
    expressionStmt                 shift and go to state 63
    inputStmt                      shift and go to state 66
    functionalStmt                 shift and go to state 67
    andExpression                  shift and go to state 14
    unaryRelExpression             shift and go to state 23
    relExpression                  shift and go to state 25
    sumExpression                  shift and go to state 26
    term                           shift and go to state 27
    sumElement                     shift and go to state 28

state 33

    (20) statement -> expressionStmt SEMI .

    ID              reduce using rule 20 (statement -> expressionStmt SEMI .)
    IF              reduce using rule 20 (statement -> expressionStmt SEMI .)
    FOR             reduce using rule 20 (statement -> expressionStmt SEMI .)
    FILTER          reduce using rule 20 (statement -> expressionStmt SEMI .)
    MAP             reduce using rule 20 (statement -> expressionStmt SEMI .)
    REDUCE          reduce using rule 20 (statement -> expressionStmt SEMI .)
    INPUT           reduce using rule 20 (statement -> expressionStmt SEMI .)
    OUTPUT          reduce using rule 20 (statement -> expressionStmt SEMI .)
    COMMENT         reduce using rule 20 (statement -> expressionStmt SEMI .)
    NOT             reduce using rule 20 (statement -> expressionStmt SEMI .)
    NUMBER          reduce using rule 20 (statement -> expressionStmt SEMI .)
    $end            reduce using rule 20 (statement -> expressionStmt SEMI .)
    ELSE            reduce using rule 20 (statement -> expressionStmt SEMI .)


state 34

    (32) expressionStmt -> expressionStmt OR . andExpression
    (34) andExpression -> . andExpression AND unaryRelExpression
    (35) andExpression -> . unaryRelExpression
    (36) unaryRelExpression -> . NOT unaryRelExpression
    (37) unaryRelExpression -> . relExpression
    (38) relExpression -> . sumExpression relop sumExpression
    (39) relExpression -> . sumExpression
    (46) sumExpression -> . sumExpression sumop term
    (47) sumExpression -> . term
    (50) term -> . term mulop sumElement
    (51) term -> . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

    NOT             shift and go to state 24
    ID              shift and go to state 40
    NUMBER          shift and go to state 29

    andExpression                  shift and go to state 69
    unaryRelExpression             shift and go to state 23
    relExpression                  shift and go to state 25
    sumExpression                  shift and go to state 26
    term                           shift and go to state 27
    sumElement                     shift and go to state 28

state 35

    (23) statement -> functionalStmt SEMI .

    ID              reduce using rule 23 (statement -> functionalStmt SEMI .)
    IF              reduce using rule 23 (statement -> functionalStmt SEMI .)
    FOR             reduce using rule 23 (statement -> functionalStmt SEMI .)
    FILTER          reduce using rule 23 (statement -> functionalStmt SEMI .)
    MAP             reduce using rule 23 (statement -> functionalStmt SEMI .)
    REDUCE          reduce using rule 23 (statement -> functionalStmt SEMI .)
    INPUT           reduce using rule 23 (statement -> functionalStmt SEMI .)
    OUTPUT          reduce using rule 23 (statement -> functionalStmt SEMI .)
    COMMENT         reduce using rule 23 (statement -> functionalStmt SEMI .)
    NOT             reduce using rule 23 (statement -> functionalStmt SEMI .)
    NUMBER          reduce using rule 23 (statement -> functionalStmt SEMI .)
    $end            reduce using rule 23 (statement -> functionalStmt SEMI .)
    ELSE            reduce using rule 23 (statement -> functionalStmt SEMI .)


state 36

    (24) statement -> inputStmt SEMI .

    ID              reduce using rule 24 (statement -> inputStmt SEMI .)
    IF              reduce using rule 24 (statement -> inputStmt SEMI .)
    FOR             reduce using rule 24 (statement -> inputStmt SEMI .)
    FILTER          reduce using rule 24 (statement -> inputStmt SEMI .)
    MAP             reduce using rule 24 (statement -> inputStmt SEMI .)
    REDUCE          reduce using rule 24 (statement -> inputStmt SEMI .)
    INPUT           reduce using rule 24 (statement -> inputStmt SEMI .)
    OUTPUT          reduce using rule 24 (statement -> inputStmt SEMI .)
    COMMENT         reduce using rule 24 (statement -> inputStmt SEMI .)
    NOT             reduce using rule 24 (statement -> inputStmt SEMI .)
    NUMBER          reduce using rule 24 (statement -> inputStmt SEMI .)
    $end            reduce using rule 24 (statement -> inputStmt SEMI .)
    ELSE            reduce using rule 24 (statement -> inputStmt SEMI .)


state 37

    (25) statement -> outputStmt SEMI .

    ID              reduce using rule 25 (statement -> outputStmt SEMI .)
    IF              reduce using rule 25 (statement -> outputStmt SEMI .)
    FOR             reduce using rule 25 (statement -> outputStmt SEMI .)
    FILTER          reduce using rule 25 (statement -> outputStmt SEMI .)
    MAP             reduce using rule 25 (statement -> outputStmt SEMI .)
    REDUCE          reduce using rule 25 (statement -> outputStmt SEMI .)
    INPUT           reduce using rule 25 (statement -> outputStmt SEMI .)
    OUTPUT          reduce using rule 25 (statement -> outputStmt SEMI .)
    COMMENT         reduce using rule 25 (statement -> outputStmt SEMI .)
    NOT             reduce using rule 25 (statement -> outputStmt SEMI .)
    NUMBER          reduce using rule 25 (statement -> outputStmt SEMI .)
    $end            reduce using rule 25 (statement -> outputStmt SEMI .)
    ELSE            reduce using rule 25 (statement -> outputStmt SEMI .)


state 38

    (34) andExpression -> andExpression AND . unaryRelExpression
    (36) unaryRelExpression -> . NOT unaryRelExpression
    (37) unaryRelExpression -> . relExpression
    (38) relExpression -> . sumExpression relop sumExpression
    (39) relExpression -> . sumExpression
    (46) sumExpression -> . sumExpression sumop term
    (47) sumExpression -> . term
    (50) term -> . term mulop sumElement
    (51) term -> . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

    NOT             shift and go to state 24
    ID              shift and go to state 40
    NUMBER          shift and go to state 29

    unaryRelExpression             shift and go to state 70
    relExpression                  shift and go to state 25
    sumExpression                  shift and go to state 26
    term                           shift and go to state 27
    sumElement                     shift and go to state 28

state 39

    (30) conditionalStmt -> IF expressionStmt . COL declarationList
    (31) conditionalStmt -> IF expressionStmt . COL declarationList ELSE COL declarationList
    (32) expressionStmt -> expressionStmt . OR andExpression

    COL             shift and go to state 71
    OR              shift and go to state 34


state 40

    (52) sumElement -> ID .

    PROD            reduce using rule 52 (sumElement -> ID .)
    DIV             reduce using rule 52 (sumElement -> ID .)
    LE              reduce using rule 52 (sumElement -> ID .)
    LT              reduce using rule 52 (sumElement -> ID .)
    GT              reduce using rule 52 (sumElement -> ID .)
    GE              reduce using rule 52 (sumElement -> ID .)
    EQ              reduce using rule 52 (sumElement -> ID .)
    NEQ             reduce using rule 52 (sumElement -> ID .)
    PLUS            reduce using rule 52 (sumElement -> ID .)
    MINUS           reduce using rule 52 (sumElement -> ID .)
    AND             reduce using rule 52 (sumElement -> ID .)
    COL             reduce using rule 52 (sumElement -> ID .)
    OR              reduce using rule 52 (sumElement -> ID .)
    SEMI            reduce using rule 52 (sumElement -> ID .)
    RPAREN          reduce using rule 52 (sumElement -> ID .)


state 41

    (27) iterationStmt -> FOR ID . IN iterationElement COL declarationList

    IN              shift and go to state 72


state 42

    (56) functionalStmt -> FILTER LPAREN . lambdaFilter RPAREN
    (62) lambdaFilter -> . LAMBDA COL relExpression

    LAMBDA          shift and go to state 74

    lambdaFilter                   shift and go to state 73

state 43

    (57) functionalStmt -> MAP LPAREN . lambdaMap RPAREN
    (59) lambdaMap -> . LAMBDA COL sumExpression

    LAMBDA          shift and go to state 76

    lambdaMap                      shift and go to state 75

state 44

    (58) functionalStmt -> REDUCE LPAREN . lambdaReduce RPAREN
    (60) lambdaReduce -> . LAMBDA COL mulop COMA ID
    (61) lambdaReduce -> . LAMBDA COL sumop COMA ID

    LAMBDA          shift and go to state 78

    lambdaReduce                   shift and go to state 77

state 45

    (63) inputStmt -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 79


state 46

    (64) outputStmt -> OUTPUT LPAREN . declarationElement RPAREN
    (7) declarationElement -> . list
    (8) declarationElement -> . expressionStmt
    (9) declarationElement -> . STRING
    (10) declarationElement -> . BOOLEAN
    (11) declarationElement -> . inputStmt
    (12) declarationElement -> . functionalStmt
    (13) list -> . LSQUARE listElements RSQUARE
    (32) expressionStmt -> . expressionStmt OR andExpression
    (33) expressionStmt -> . andExpression
    (63) inputStmt -> . INPUT LPAREN RPAREN
    (56) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (57) functionalStmt -> . MAP LPAREN lambdaMap RPAREN
    (58) functionalStmt -> . REDUCE LPAREN lambdaReduce RPAREN
    (34) andExpression -> . andExpression AND unaryRelExpression
    (35) andExpression -> . unaryRelExpression
    (36) unaryRelExpression -> . NOT unaryRelExpression
    (37) unaryRelExpression -> . relExpression
    (38) relExpression -> . sumExpression relop sumExpression
    (39) relExpression -> . sumExpression
    (46) sumExpression -> . sumExpression sumop term
    (47) sumExpression -> . term
    (50) term -> . term mulop sumElement
    (51) term -> . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

    STRING          shift and go to state 64
    BOOLEAN         shift and go to state 65
    LSQUARE         shift and go to state 68
    INPUT           shift and go to state 20
    FILTER          shift and go to state 17
    MAP             shift and go to state 18
    REDUCE          shift and go to state 19
    NOT             shift and go to state 24
    ID              shift and go to state 40
    NUMBER          shift and go to state 29

    declarationElement             shift and go to state 80
    list                           shift and go to state 62
    expressionStmt                 shift and go to state 63
    inputStmt                      shift and go to state 66
    functionalStmt                 shift and go to state 67
    andExpression                  shift and go to state 14
    unaryRelExpression             shift and go to state 23
    relExpression                  shift and go to state 25
    sumExpression                  shift and go to state 26
    term                           shift and go to state 27
    sumElement                     shift and go to state 28

state 47

    (36) unaryRelExpression -> NOT unaryRelExpression .

    AND             reduce using rule 36 (unaryRelExpression -> NOT unaryRelExpression .)
    SEMI            reduce using rule 36 (unaryRelExpression -> NOT unaryRelExpression .)
    OR              reduce using rule 36 (unaryRelExpression -> NOT unaryRelExpression .)
    COL             reduce using rule 36 (unaryRelExpression -> NOT unaryRelExpression .)
    RPAREN          reduce using rule 36 (unaryRelExpression -> NOT unaryRelExpression .)


state 48

    (38) relExpression -> sumExpression relop . sumExpression
    (46) sumExpression -> . sumExpression sumop term
    (47) sumExpression -> . term
    (50) term -> . term mulop sumElement
    (51) term -> . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

    ID              shift and go to state 40
    NUMBER          shift and go to state 29

    sumExpression                  shift and go to state 81
    term                           shift and go to state 27
    sumElement                     shift and go to state 28

state 49

    (46) sumExpression -> sumExpression sumop . term
    (50) term -> . term mulop sumElement
    (51) term -> . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

    ID              shift and go to state 40
    NUMBER          shift and go to state 29

    term                           shift and go to state 82
    sumElement                     shift and go to state 28

state 50

    (40) relop -> LE .

    ID              reduce using rule 40 (relop -> LE .)
    NUMBER          reduce using rule 40 (relop -> LE .)


state 51

    (41) relop -> LT .

    ID              reduce using rule 41 (relop -> LT .)
    NUMBER          reduce using rule 41 (relop -> LT .)


state 52

    (42) relop -> GT .

    ID              reduce using rule 42 (relop -> GT .)
    NUMBER          reduce using rule 42 (relop -> GT .)


state 53

    (43) relop -> GE .

    ID              reduce using rule 43 (relop -> GE .)
    NUMBER          reduce using rule 43 (relop -> GE .)


state 54

    (44) relop -> EQ .

    ID              reduce using rule 44 (relop -> EQ .)
    NUMBER          reduce using rule 44 (relop -> EQ .)


state 55

    (45) relop -> NEQ .

    ID              reduce using rule 45 (relop -> NEQ .)
    NUMBER          reduce using rule 45 (relop -> NEQ .)


state 56

    (48) sumop -> PLUS .

    ID              reduce using rule 48 (sumop -> PLUS .)
    NUMBER          reduce using rule 48 (sumop -> PLUS .)
    COMA            reduce using rule 48 (sumop -> PLUS .)


state 57

    (49) sumop -> MINUS .

    ID              reduce using rule 49 (sumop -> MINUS .)
    NUMBER          reduce using rule 49 (sumop -> MINUS .)
    COMA            reduce using rule 49 (sumop -> MINUS .)


state 58

    (50) term -> term mulop . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

    ID              shift and go to state 40
    NUMBER          shift and go to state 29

    sumElement                     shift and go to state 83

state 59

    (54) mulop -> PROD .

    ID              reduce using rule 54 (mulop -> PROD .)
    NUMBER          reduce using rule 54 (mulop -> PROD .)
    COMA            reduce using rule 54 (mulop -> PROD .)


state 60

    (55) mulop -> DIV .

    ID              reduce using rule 55 (mulop -> DIV .)
    NUMBER          reduce using rule 55 (mulop -> DIV .)
    COMA            reduce using rule 55 (mulop -> DIV .)


state 61

    (6) varDeclaration -> ID EQUALS declarationElement .

    SEMI            reduce using rule 6 (varDeclaration -> ID EQUALS declarationElement .)


state 62

    (7) declarationElement -> list .

    SEMI            reduce using rule 7 (declarationElement -> list .)
    RPAREN          reduce using rule 7 (declarationElement -> list .)


state 63

    (8) declarationElement -> expressionStmt .
    (32) expressionStmt -> expressionStmt . OR andExpression

    SEMI            reduce using rule 8 (declarationElement -> expressionStmt .)
    RPAREN          reduce using rule 8 (declarationElement -> expressionStmt .)
    OR              shift and go to state 34


state 64

    (9) declarationElement -> STRING .

    SEMI            reduce using rule 9 (declarationElement -> STRING .)
    RPAREN          reduce using rule 9 (declarationElement -> STRING .)


state 65

    (10) declarationElement -> BOOLEAN .

    SEMI            reduce using rule 10 (declarationElement -> BOOLEAN .)
    RPAREN          reduce using rule 10 (declarationElement -> BOOLEAN .)


state 66

    (11) declarationElement -> inputStmt .

    SEMI            reduce using rule 11 (declarationElement -> inputStmt .)
    RPAREN          reduce using rule 11 (declarationElement -> inputStmt .)


state 67

    (12) declarationElement -> functionalStmt .

    SEMI            reduce using rule 12 (declarationElement -> functionalStmt .)
    RPAREN          reduce using rule 12 (declarationElement -> functionalStmt .)


state 68

    (13) list -> LSQUARE . listElements RSQUARE
    (14) listElements -> . NUMBER
    (15) listElements -> . NUMBER OP_NUMBER
    (16) listElements -> . STRING
    (17) listElements -> . STRING OP_STRING
    (18) listElements -> . BOOLEAN
    (19) listElements -> . BOOLEAN OP_BOOLEAN

    NUMBER          shift and go to state 85
    STRING          shift and go to state 86
    BOOLEAN         shift and go to state 87

    listElements                   shift and go to state 84

state 69

    (32) expressionStmt -> expressionStmt OR andExpression .
    (34) andExpression -> andExpression . AND unaryRelExpression

    SEMI            reduce using rule 32 (expressionStmt -> expressionStmt OR andExpression .)
    OR              reduce using rule 32 (expressionStmt -> expressionStmt OR andExpression .)
    COL             reduce using rule 32 (expressionStmt -> expressionStmt OR andExpression .)
    RPAREN          reduce using rule 32 (expressionStmt -> expressionStmt OR andExpression .)
    AND             shift and go to state 38


state 70

    (34) andExpression -> andExpression AND unaryRelExpression .

    AND             reduce using rule 34 (andExpression -> andExpression AND unaryRelExpression .)
    SEMI            reduce using rule 34 (andExpression -> andExpression AND unaryRelExpression .)
    OR              reduce using rule 34 (andExpression -> andExpression AND unaryRelExpression .)
    COL             reduce using rule 34 (andExpression -> andExpression AND unaryRelExpression .)
    RPAREN          reduce using rule 34 (andExpression -> andExpression AND unaryRelExpression .)


state 71

    (30) conditionalStmt -> IF expressionStmt COL . declarationList
    (31) conditionalStmt -> IF expressionStmt COL . declarationList ELSE COL declarationList
    (2) declarationList -> . declaration declarationList
    (3) declarationList -> . declaration
    (4) declaration -> . varDeclaration SEMI
    (5) declaration -> . statement
    (6) varDeclaration -> . ID EQUALS declarationElement
    (20) statement -> . expressionStmt SEMI
    (21) statement -> . conditionalStmt
    (22) statement -> . iterationStmt
    (23) statement -> . functionalStmt SEMI
    (24) statement -> . inputStmt SEMI
    (25) statement -> . outputStmt SEMI
    (26) statement -> . commentStmt
    (32) expressionStmt -> . expressionStmt OR andExpression
    (33) expressionStmt -> . andExpression
    (30) conditionalStmt -> . IF expressionStmt COL declarationList
    (31) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (27) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (56) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (57) functionalStmt -> . MAP LPAREN lambdaMap RPAREN
    (58) functionalStmt -> . REDUCE LPAREN lambdaReduce RPAREN
    (63) inputStmt -> . INPUT LPAREN RPAREN
    (64) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (65) commentStmt -> . COMMENT
    (34) andExpression -> . andExpression AND unaryRelExpression
    (35) andExpression -> . unaryRelExpression
    (36) unaryRelExpression -> . NOT unaryRelExpression
    (37) unaryRelExpression -> . relExpression
    (38) relExpression -> . sumExpression relop sumExpression
    (39) relExpression -> . sumExpression
    (46) sumExpression -> . sumExpression sumop term
    (47) sumExpression -> . term
    (50) term -> . term mulop sumElement
    (51) term -> . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

    ID              shift and go to state 6
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FILTER          shift and go to state 17
    MAP             shift and go to state 18
    REDUCE          shift and go to state 19
    INPUT           shift and go to state 20
    OUTPUT          shift and go to state 21
    COMMENT         shift and go to state 22
    NOT             shift and go to state 24
    NUMBER          shift and go to state 29

    expressionStmt                 shift and go to state 7
    declarationList                shift and go to state 88
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    conditionalStmt                shift and go to state 8
    iterationStmt                  shift and go to state 9
    functionalStmt                 shift and go to state 10
    inputStmt                      shift and go to state 11
    outputStmt                     shift and go to state 12
    commentStmt                    shift and go to state 13
    andExpression                  shift and go to state 14
    unaryRelExpression             shift and go to state 23
    relExpression                  shift and go to state 25
    sumExpression                  shift and go to state 26
    term                           shift and go to state 27
    sumElement                     shift and go to state 28

state 72

    (27) iterationStmt -> FOR ID IN . iterationElement COL declarationList
    (28) iterationElement -> . list
    (29) iterationElement -> . ID
    (13) list -> . LSQUARE listElements RSQUARE

    ID              shift and go to state 89
    LSQUARE         shift and go to state 68

    iterationElement               shift and go to state 90
    list                           shift and go to state 91

state 73

    (56) functionalStmt -> FILTER LPAREN lambdaFilter . RPAREN

    RPAREN          shift and go to state 92


state 74

    (62) lambdaFilter -> LAMBDA . COL relExpression

    COL             shift and go to state 93


state 75

    (57) functionalStmt -> MAP LPAREN lambdaMap . RPAREN

    RPAREN          shift and go to state 94


state 76

    (59) lambdaMap -> LAMBDA . COL sumExpression

    COL             shift and go to state 95


state 77

    (58) functionalStmt -> REDUCE LPAREN lambdaReduce . RPAREN

    RPAREN          shift and go to state 96


state 78

    (60) lambdaReduce -> LAMBDA . COL mulop COMA ID
    (61) lambdaReduce -> LAMBDA . COL sumop COMA ID

    COL             shift and go to state 97


state 79

    (63) inputStmt -> INPUT LPAREN RPAREN .

    SEMI            reduce using rule 63 (inputStmt -> INPUT LPAREN RPAREN .)
    RPAREN          reduce using rule 63 (inputStmt -> INPUT LPAREN RPAREN .)


state 80

    (64) outputStmt -> OUTPUT LPAREN declarationElement . RPAREN

    RPAREN          shift and go to state 98


state 81

    (38) relExpression -> sumExpression relop sumExpression .
    (46) sumExpression -> sumExpression . sumop term
    (48) sumop -> . PLUS
    (49) sumop -> . MINUS

    AND             reduce using rule 38 (relExpression -> sumExpression relop sumExpression .)
    SEMI            reduce using rule 38 (relExpression -> sumExpression relop sumExpression .)
    OR              reduce using rule 38 (relExpression -> sumExpression relop sumExpression .)
    COL             reduce using rule 38 (relExpression -> sumExpression relop sumExpression .)
    RPAREN          reduce using rule 38 (relExpression -> sumExpression relop sumExpression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    sumop                          shift and go to state 49

state 82

    (46) sumExpression -> sumExpression sumop term .
    (50) term -> term . mulop sumElement
    (54) mulop -> . PROD
    (55) mulop -> . DIV

    LE              reduce using rule 46 (sumExpression -> sumExpression sumop term .)
    LT              reduce using rule 46 (sumExpression -> sumExpression sumop term .)
    GT              reduce using rule 46 (sumExpression -> sumExpression sumop term .)
    GE              reduce using rule 46 (sumExpression -> sumExpression sumop term .)
    EQ              reduce using rule 46 (sumExpression -> sumExpression sumop term .)
    NEQ             reduce using rule 46 (sumExpression -> sumExpression sumop term .)
    PLUS            reduce using rule 46 (sumExpression -> sumExpression sumop term .)
    MINUS           reduce using rule 46 (sumExpression -> sumExpression sumop term .)
    AND             reduce using rule 46 (sumExpression -> sumExpression sumop term .)
    SEMI            reduce using rule 46 (sumExpression -> sumExpression sumop term .)
    OR              reduce using rule 46 (sumExpression -> sumExpression sumop term .)
    COL             reduce using rule 46 (sumExpression -> sumExpression sumop term .)
    RPAREN          reduce using rule 46 (sumExpression -> sumExpression sumop term .)
    PROD            shift and go to state 59
    DIV             shift and go to state 60

    mulop                          shift and go to state 58

state 83

    (50) term -> term mulop sumElement .

    PROD            reduce using rule 50 (term -> term mulop sumElement .)
    DIV             reduce using rule 50 (term -> term mulop sumElement .)
    LE              reduce using rule 50 (term -> term mulop sumElement .)
    LT              reduce using rule 50 (term -> term mulop sumElement .)
    GT              reduce using rule 50 (term -> term mulop sumElement .)
    GE              reduce using rule 50 (term -> term mulop sumElement .)
    EQ              reduce using rule 50 (term -> term mulop sumElement .)
    NEQ             reduce using rule 50 (term -> term mulop sumElement .)
    PLUS            reduce using rule 50 (term -> term mulop sumElement .)
    MINUS           reduce using rule 50 (term -> term mulop sumElement .)
    AND             reduce using rule 50 (term -> term mulop sumElement .)
    SEMI            reduce using rule 50 (term -> term mulop sumElement .)
    OR              reduce using rule 50 (term -> term mulop sumElement .)
    COL             reduce using rule 50 (term -> term mulop sumElement .)
    RPAREN          reduce using rule 50 (term -> term mulop sumElement .)


state 84

    (13) list -> LSQUARE listElements . RSQUARE

    RSQUARE         shift and go to state 99


state 85

    (14) listElements -> NUMBER .
    (15) listElements -> NUMBER . OP_NUMBER

    RSQUARE         reduce using rule 14 (listElements -> NUMBER .)
    OP_NUMBER       shift and go to state 100


state 86

    (16) listElements -> STRING .
    (17) listElements -> STRING . OP_STRING

    RSQUARE         reduce using rule 16 (listElements -> STRING .)
    OP_STRING       shift and go to state 101


state 87

    (18) listElements -> BOOLEAN .
    (19) listElements -> BOOLEAN . OP_BOOLEAN

    RSQUARE         reduce using rule 18 (listElements -> BOOLEAN .)
    OP_BOOLEAN      shift and go to state 102


state 88

    (30) conditionalStmt -> IF expressionStmt COL declarationList .
    (31) conditionalStmt -> IF expressionStmt COL declarationList . ELSE COL declarationList

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList .)
    IF              reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList .)
    FOR             reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList .)
    FILTER          reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList .)
    MAP             reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList .)
    REDUCE          reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList .)
    INPUT           reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList .)
    OUTPUT          reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList .)
    COMMENT         reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList .)
    NOT             reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList .)
    NUMBER          reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList .)
    $end            reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList .)
    ELSE            shift and go to state 103

  ! ELSE            [ reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList .) ]


state 89

    (29) iterationElement -> ID .

    COL             reduce using rule 29 (iterationElement -> ID .)


state 90

    (27) iterationStmt -> FOR ID IN iterationElement . COL declarationList

    COL             shift and go to state 104


state 91

    (28) iterationElement -> list .

    COL             reduce using rule 28 (iterationElement -> list .)


state 92

    (56) functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .

    SEMI            reduce using rule 56 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)
    RPAREN          reduce using rule 56 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)


state 93

    (62) lambdaFilter -> LAMBDA COL . relExpression
    (38) relExpression -> . sumExpression relop sumExpression
    (39) relExpression -> . sumExpression
    (46) sumExpression -> . sumExpression sumop term
    (47) sumExpression -> . term
    (50) term -> . term mulop sumElement
    (51) term -> . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

    ID              shift and go to state 40
    NUMBER          shift and go to state 29

    relExpression                  shift and go to state 105
    sumExpression                  shift and go to state 26
    term                           shift and go to state 27
    sumElement                     shift and go to state 28

state 94

    (57) functionalStmt -> MAP LPAREN lambdaMap RPAREN .

    SEMI            reduce using rule 57 (functionalStmt -> MAP LPAREN lambdaMap RPAREN .)
    RPAREN          reduce using rule 57 (functionalStmt -> MAP LPAREN lambdaMap RPAREN .)


state 95

    (59) lambdaMap -> LAMBDA COL . sumExpression
    (46) sumExpression -> . sumExpression sumop term
    (47) sumExpression -> . term
    (50) term -> . term mulop sumElement
    (51) term -> . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

    ID              shift and go to state 40
    NUMBER          shift and go to state 29

    sumExpression                  shift and go to state 106
    term                           shift and go to state 27
    sumElement                     shift and go to state 28

state 96

    (58) functionalStmt -> REDUCE LPAREN lambdaReduce RPAREN .

    SEMI            reduce using rule 58 (functionalStmt -> REDUCE LPAREN lambdaReduce RPAREN .)
    RPAREN          reduce using rule 58 (functionalStmt -> REDUCE LPAREN lambdaReduce RPAREN .)


state 97

    (60) lambdaReduce -> LAMBDA COL . mulop COMA ID
    (61) lambdaReduce -> LAMBDA COL . sumop COMA ID
    (54) mulop -> . PROD
    (55) mulop -> . DIV
    (48) sumop -> . PLUS
    (49) sumop -> . MINUS

    PROD            shift and go to state 59
    DIV             shift and go to state 60
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    mulop                          shift and go to state 107
    sumop                          shift and go to state 108

state 98

    (64) outputStmt -> OUTPUT LPAREN declarationElement RPAREN .

    SEMI            reduce using rule 64 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)


state 99

    (13) list -> LSQUARE listElements RSQUARE .

    SEMI            reduce using rule 13 (list -> LSQUARE listElements RSQUARE .)
    RPAREN          reduce using rule 13 (list -> LSQUARE listElements RSQUARE .)
    COL             reduce using rule 13 (list -> LSQUARE listElements RSQUARE .)


state 100

    (15) listElements -> NUMBER OP_NUMBER .

    RSQUARE         reduce using rule 15 (listElements -> NUMBER OP_NUMBER .)


state 101

    (17) listElements -> STRING OP_STRING .

    RSQUARE         reduce using rule 17 (listElements -> STRING OP_STRING .)


state 102

    (19) listElements -> BOOLEAN OP_BOOLEAN .

    RSQUARE         reduce using rule 19 (listElements -> BOOLEAN OP_BOOLEAN .)


state 103

    (31) conditionalStmt -> IF expressionStmt COL declarationList ELSE . COL declarationList

    COL             shift and go to state 109


state 104

    (27) iterationStmt -> FOR ID IN iterationElement COL . declarationList
    (2) declarationList -> . declaration declarationList
    (3) declarationList -> . declaration
    (4) declaration -> . varDeclaration SEMI
    (5) declaration -> . statement
    (6) varDeclaration -> . ID EQUALS declarationElement
    (20) statement -> . expressionStmt SEMI
    (21) statement -> . conditionalStmt
    (22) statement -> . iterationStmt
    (23) statement -> . functionalStmt SEMI
    (24) statement -> . inputStmt SEMI
    (25) statement -> . outputStmt SEMI
    (26) statement -> . commentStmt
    (32) expressionStmt -> . expressionStmt OR andExpression
    (33) expressionStmt -> . andExpression
    (30) conditionalStmt -> . IF expressionStmt COL declarationList
    (31) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (27) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (56) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (57) functionalStmt -> . MAP LPAREN lambdaMap RPAREN
    (58) functionalStmt -> . REDUCE LPAREN lambdaReduce RPAREN
    (63) inputStmt -> . INPUT LPAREN RPAREN
    (64) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (65) commentStmt -> . COMMENT
    (34) andExpression -> . andExpression AND unaryRelExpression
    (35) andExpression -> . unaryRelExpression
    (36) unaryRelExpression -> . NOT unaryRelExpression
    (37) unaryRelExpression -> . relExpression
    (38) relExpression -> . sumExpression relop sumExpression
    (39) relExpression -> . sumExpression
    (46) sumExpression -> . sumExpression sumop term
    (47) sumExpression -> . term
    (50) term -> . term mulop sumElement
    (51) term -> . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

    ID              shift and go to state 6
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FILTER          shift and go to state 17
    MAP             shift and go to state 18
    REDUCE          shift and go to state 19
    INPUT           shift and go to state 20
    OUTPUT          shift and go to state 21
    COMMENT         shift and go to state 22
    NOT             shift and go to state 24
    NUMBER          shift and go to state 29

    declarationList                shift and go to state 110
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    expressionStmt                 shift and go to state 7
    conditionalStmt                shift and go to state 8
    iterationStmt                  shift and go to state 9
    functionalStmt                 shift and go to state 10
    inputStmt                      shift and go to state 11
    outputStmt                     shift and go to state 12
    commentStmt                    shift and go to state 13
    andExpression                  shift and go to state 14
    unaryRelExpression             shift and go to state 23
    relExpression                  shift and go to state 25
    sumExpression                  shift and go to state 26
    term                           shift and go to state 27
    sumElement                     shift and go to state 28

state 105

    (62) lambdaFilter -> LAMBDA COL relExpression .

    RPAREN          reduce using rule 62 (lambdaFilter -> LAMBDA COL relExpression .)


state 106

    (59) lambdaMap -> LAMBDA COL sumExpression .
    (46) sumExpression -> sumExpression . sumop term
    (48) sumop -> . PLUS
    (49) sumop -> . MINUS

    RPAREN          reduce using rule 59 (lambdaMap -> LAMBDA COL sumExpression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    sumop                          shift and go to state 49

state 107

    (60) lambdaReduce -> LAMBDA COL mulop . COMA ID

    COMA            shift and go to state 111


state 108

    (61) lambdaReduce -> LAMBDA COL sumop . COMA ID

    COMA            shift and go to state 112


state 109

    (31) conditionalStmt -> IF expressionStmt COL declarationList ELSE COL . declarationList
    (2) declarationList -> . declaration declarationList
    (3) declarationList -> . declaration
    (4) declaration -> . varDeclaration SEMI
    (5) declaration -> . statement
    (6) varDeclaration -> . ID EQUALS declarationElement
    (20) statement -> . expressionStmt SEMI
    (21) statement -> . conditionalStmt
    (22) statement -> . iterationStmt
    (23) statement -> . functionalStmt SEMI
    (24) statement -> . inputStmt SEMI
    (25) statement -> . outputStmt SEMI
    (26) statement -> . commentStmt
    (32) expressionStmt -> . expressionStmt OR andExpression
    (33) expressionStmt -> . andExpression
    (30) conditionalStmt -> . IF expressionStmt COL declarationList
    (31) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (27) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (56) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (57) functionalStmt -> . MAP LPAREN lambdaMap RPAREN
    (58) functionalStmt -> . REDUCE LPAREN lambdaReduce RPAREN
    (63) inputStmt -> . INPUT LPAREN RPAREN
    (64) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (65) commentStmt -> . COMMENT
    (34) andExpression -> . andExpression AND unaryRelExpression
    (35) andExpression -> . unaryRelExpression
    (36) unaryRelExpression -> . NOT unaryRelExpression
    (37) unaryRelExpression -> . relExpression
    (38) relExpression -> . sumExpression relop sumExpression
    (39) relExpression -> . sumExpression
    (46) sumExpression -> . sumExpression sumop term
    (47) sumExpression -> . term
    (50) term -> . term mulop sumElement
    (51) term -> . sumElement
    (52) sumElement -> . ID
    (53) sumElement -> . NUMBER

    ID              shift and go to state 6
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FILTER          shift and go to state 17
    MAP             shift and go to state 18
    REDUCE          shift and go to state 19
    INPUT           shift and go to state 20
    OUTPUT          shift and go to state 21
    COMMENT         shift and go to state 22
    NOT             shift and go to state 24
    NUMBER          shift and go to state 29

    expressionStmt                 shift and go to state 7
    declarationList                shift and go to state 113
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    conditionalStmt                shift and go to state 8
    iterationStmt                  shift and go to state 9
    functionalStmt                 shift and go to state 10
    inputStmt                      shift and go to state 11
    outputStmt                     shift and go to state 12
    commentStmt                    shift and go to state 13
    andExpression                  shift and go to state 14
    unaryRelExpression             shift and go to state 23
    relExpression                  shift and go to state 25
    sumExpression                  shift and go to state 26
    term                           shift and go to state 27
    sumElement                     shift and go to state 28

state 110

    (27) iterationStmt -> FOR ID IN iterationElement COL declarationList .

    ID              reduce using rule 27 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    IF              reduce using rule 27 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    FOR             reduce using rule 27 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    FILTER          reduce using rule 27 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    MAP             reduce using rule 27 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    REDUCE          reduce using rule 27 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    INPUT           reduce using rule 27 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    OUTPUT          reduce using rule 27 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    COMMENT         reduce using rule 27 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    NOT             reduce using rule 27 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    NUMBER          reduce using rule 27 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    $end            reduce using rule 27 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    ELSE            reduce using rule 27 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)


state 111

    (60) lambdaReduce -> LAMBDA COL mulop COMA . ID

    ID              shift and go to state 114


state 112

    (61) lambdaReduce -> LAMBDA COL sumop COMA . ID

    ID              shift and go to state 115


state 113

    (31) conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .

    ID              reduce using rule 31 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    IF              reduce using rule 31 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    FOR             reduce using rule 31 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    FILTER          reduce using rule 31 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    MAP             reduce using rule 31 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    REDUCE          reduce using rule 31 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    INPUT           reduce using rule 31 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    OUTPUT          reduce using rule 31 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    COMMENT         reduce using rule 31 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    NOT             reduce using rule 31 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    NUMBER          reduce using rule 31 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    $end            reduce using rule 31 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    ELSE            reduce using rule 31 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)


state 114

    (60) lambdaReduce -> LAMBDA COL mulop COMA ID .

    RPAREN          reduce using rule 60 (lambdaReduce -> LAMBDA COL mulop COMA ID .)


state 115

    (61) lambdaReduce -> LAMBDA COL sumop COMA ID .

    RPAREN          reduce using rule 61 (lambdaReduce -> LAMBDA COL sumop COMA ID .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for FILTER in state 3 resolved as shift
WARNING: shift/reduce conflict for MAP in state 3 resolved as shift
WARNING: shift/reduce conflict for REDUCE in state 3 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 3 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 3 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 3 resolved as shift
WARNING: shift/reduce conflict for NOT in state 3 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 3 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 88 resolved as shift
