Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    COMA

Grammar

Rule 0     S' -> declarationList
Rule 1     declarationList -> declaration declarationList
Rule 2     declarationList -> declaration
Rule 3     declaration -> varDeclaration SEMI
Rule 4     declaration -> statement
Rule 5     varDeclaration -> ID EQUALS declarationElement
Rule 6     declarationElement -> list
Rule 7     declarationElement -> sumExpression
Rule 8     declarationElement -> STRING
Rule 9     declarationElement -> BOOLEAN
Rule 10    declarationElement -> inputStmt
Rule 11    declarationElement -> functionalStmt
Rule 12    list -> LSQUARE listElements RSQUARE
Rule 13    listElements -> NUMBER
Rule 14    listElements -> NUMBER OP_NUMBER
Rule 15    listElements -> STRING
Rule 16    listElements -> STRING OP_STRING
Rule 17    listElements -> BOOLEAN
Rule 18    listElements -> BOOLEAN OP_BOOLEAN
Rule 19    statement -> expressionStmt SEMI
Rule 20    statement -> conditionalStmt
Rule 21    statement -> iterationStmt
Rule 22    statement -> functionalStmt SEMI
Rule 23    statement -> inputStmt SEMI
Rule 24    statement -> outputStmt SEMI
Rule 25    statement -> commentStmt
Rule 26    iterationStmt -> FOR ID IN iterationElement COL declarationList
Rule 27    iterationElement -> list
Rule 28    iterationElement -> ID
Rule 29    conditionalStmt -> IF expressionStmt COL declarationList
Rule 30    conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList
Rule 31    expressionStmt -> expressionStmt OR andExpression
Rule 32    expressionStmt -> andExpression
Rule 33    andExpression -> andExpression AND unaryRelExpression
Rule 34    andExpression -> unaryRelExpression
Rule 35    unaryRelExpression -> NOT unaryRelExpression
Rule 36    unaryRelExpression -> relExpression
Rule 37    relExpression -> sumExpression relop sumExpression
Rule 38    relExpression -> sumExpression
Rule 39    relop -> LE
Rule 40    relop -> LT
Rule 41    relop -> GT
Rule 42    relop -> GE
Rule 43    relop -> EQ
Rule 44    relop -> NEQ
Rule 45    sumExpression -> sumExpression sumop term
Rule 46    sumExpression -> term
Rule 47    sumop -> PLUS
Rule 48    sumop -> MINUS
Rule 49    term -> term mulop sumElement
Rule 50    term -> sumElement
Rule 51    sumElement -> ID
Rule 52    sumElement -> NUMBER
Rule 53    mulop -> PROD
Rule 54    mulop -> DIV
Rule 55    functionalStmt -> FILTER LPAREN lambdaFilter RPAREN
Rule 56    functionalStmt -> MAP LPAREN lambdaStmt RPAREN
Rule 57    functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN
Rule 58    lambdaStmt -> LAMBDA COL sumExpression
Rule 59    lambdaFilter -> LAMBDA COL expressionStmt
Rule 60    inputStmt -> INPUT LPAREN RPAREN
Rule 61    outputStmt -> OUTPUT LPAREN declarationElement RPAREN
Rule 62    commentStmt -> COMMENT

Terminals, with rules where they appear

AND                  : 33
BOOLEAN              : 9 17 18
COL                  : 26 29 30 30 58 59
COMA                 : 
COMMENT              : 62
DIV                  : 54
ELSE                 : 30
EQ                   : 43
EQUALS               : 5
FILTER               : 55
FOR                  : 26
GE                   : 42
GT                   : 41
ID                   : 5 26 28 51
IF                   : 29 30
IN                   : 26
INPUT                : 60
LAMBDA               : 58 59
LE                   : 39
LPAREN               : 55 56 57 60 61
LSQUARE              : 12
LT                   : 40
MAP                  : 56
MINUS                : 48
NEQ                  : 44
NOT                  : 35
NUMBER               : 13 14 52
OP_BOOLEAN           : 18
OP_NUMBER            : 14
OP_STRING            : 16
OR                   : 31
OUTPUT               : 61
PLUS                 : 47
PROD                 : 53
REDUCE               : 57
RPAREN               : 55 56 57 60 61
RSQUARE              : 12
SEMI                 : 3 19 22 23 24
STRING               : 8 15 16
error                : 

Nonterminals, with rules where they appear

andExpression        : 31 32 33
commentStmt          : 25
conditionalStmt      : 20
declaration          : 1 2
declarationElement   : 5 61
declarationList      : 1 26 29 30 30 0
expressionStmt       : 19 29 30 31 59
functionalStmt       : 11 22
inputStmt            : 10 23
iterationElement     : 26
iterationStmt        : 21
lambdaFilter         : 55
lambdaStmt           : 56 57
list                 : 6 27
listElements         : 12
mulop                : 49
outputStmt           : 24
relExpression        : 36
relop                : 37
statement            : 4
sumElement           : 49 50
sumExpression        : 7 37 37 38 45 58
sumop                : 45
term                 : 45 46 49
unaryRelExpression   : 33 34 35
varDeclaration       : 3

Parsing method: LALR

state 0

    (0) S' -> . declarationList
    (1) declarationList -> . declaration declarationList
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (19) statement -> . expressionStmt SEMI
    (20) statement -> . conditionalStmt
    (21) statement -> . iterationStmt
    (22) statement -> . functionalStmt SEMI
    (23) statement -> . inputStmt SEMI
    (24) statement -> . outputStmt SEMI
    (25) statement -> . commentStmt
    (31) expressionStmt -> . expressionStmt OR andExpression
    (32) expressionStmt -> . andExpression
    (29) conditionalStmt -> . IF expressionStmt COL declarationList
    (30) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (26) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (55) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (56) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (57) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (33) andExpression -> . andExpression AND unaryRelExpression
    (34) andExpression -> . unaryRelExpression
    (35) unaryRelExpression -> . NOT unaryRelExpression
    (36) unaryRelExpression -> . relExpression
    (37) relExpression -> . sumExpression relop sumExpression
    (38) relExpression -> . sumExpression
    (45) sumExpression -> . sumExpression sumop term
    (46) sumExpression -> . term
    (49) term -> . term mulop sumElement
    (50) term -> . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

    declarationList                shift and go to state 1
    declaration                    shift and go to state 2
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 1

    (0) S' -> declarationList .



state 2

    (1) declarationList -> declaration . declarationList
    (2) declarationList -> declaration .
    (1) declarationList -> . declaration declarationList
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (19) statement -> . expressionStmt SEMI
    (20) statement -> . conditionalStmt
    (21) statement -> . iterationStmt
    (22) statement -> . functionalStmt SEMI
    (23) statement -> . inputStmt SEMI
    (24) statement -> . outputStmt SEMI
    (25) statement -> . commentStmt
    (31) expressionStmt -> . expressionStmt OR andExpression
    (32) expressionStmt -> . andExpression
    (29) conditionalStmt -> . IF expressionStmt COL declarationList
    (30) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (26) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (55) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (56) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (57) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (33) andExpression -> . andExpression AND unaryRelExpression
    (34) andExpression -> . unaryRelExpression
    (35) unaryRelExpression -> . NOT unaryRelExpression
    (36) unaryRelExpression -> . relExpression
    (37) relExpression -> . sumExpression relop sumExpression
    (38) relExpression -> . sumExpression
    (45) sumExpression -> . sumExpression sumop term
    (46) sumExpression -> . term
    (49) term -> . term mulop sumElement
    (50) term -> . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FILTER resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for REDUCE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    $end            reduce using rule 2 (declarationList -> declaration .)
    ELSE            reduce using rule 2 (declarationList -> declaration .)
    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

  ! ID              [ reduce using rule 2 (declarationList -> declaration .) ]
  ! IF              [ reduce using rule 2 (declarationList -> declaration .) ]
  ! FOR             [ reduce using rule 2 (declarationList -> declaration .) ]
  ! FILTER          [ reduce using rule 2 (declarationList -> declaration .) ]
  ! MAP             [ reduce using rule 2 (declarationList -> declaration .) ]
  ! REDUCE          [ reduce using rule 2 (declarationList -> declaration .) ]
  ! INPUT           [ reduce using rule 2 (declarationList -> declaration .) ]
  ! OUTPUT          [ reduce using rule 2 (declarationList -> declaration .) ]
  ! COMMENT         [ reduce using rule 2 (declarationList -> declaration .) ]
  ! NOT             [ reduce using rule 2 (declarationList -> declaration .) ]
  ! NUMBER          [ reduce using rule 2 (declarationList -> declaration .) ]

    declaration                    shift and go to state 2
    declarationList                shift and go to state 29
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 3

    (3) declaration -> varDeclaration . SEMI

    SEMI            shift and go to state 30


state 4

    (4) declaration -> statement .

    ID              reduce using rule 4 (declaration -> statement .)
    IF              reduce using rule 4 (declaration -> statement .)
    FOR             reduce using rule 4 (declaration -> statement .)
    FILTER          reduce using rule 4 (declaration -> statement .)
    MAP             reduce using rule 4 (declaration -> statement .)
    REDUCE          reduce using rule 4 (declaration -> statement .)
    INPUT           reduce using rule 4 (declaration -> statement .)
    OUTPUT          reduce using rule 4 (declaration -> statement .)
    COMMENT         reduce using rule 4 (declaration -> statement .)
    NOT             reduce using rule 4 (declaration -> statement .)
    NUMBER          reduce using rule 4 (declaration -> statement .)
    $end            reduce using rule 4 (declaration -> statement .)
    ELSE            reduce using rule 4 (declaration -> statement .)


state 5

    (5) varDeclaration -> ID . EQUALS declarationElement
    (51) sumElement -> ID .

    EQUALS          shift and go to state 31
    PROD            reduce using rule 51 (sumElement -> ID .)
    DIV             reduce using rule 51 (sumElement -> ID .)
    LE              reduce using rule 51 (sumElement -> ID .)
    LT              reduce using rule 51 (sumElement -> ID .)
    GT              reduce using rule 51 (sumElement -> ID .)
    GE              reduce using rule 51 (sumElement -> ID .)
    EQ              reduce using rule 51 (sumElement -> ID .)
    NEQ             reduce using rule 51 (sumElement -> ID .)
    PLUS            reduce using rule 51 (sumElement -> ID .)
    MINUS           reduce using rule 51 (sumElement -> ID .)
    AND             reduce using rule 51 (sumElement -> ID .)
    SEMI            reduce using rule 51 (sumElement -> ID .)
    OR              reduce using rule 51 (sumElement -> ID .)


state 6

    (19) statement -> expressionStmt . SEMI
    (31) expressionStmt -> expressionStmt . OR andExpression

    SEMI            shift and go to state 32
    OR              shift and go to state 33


state 7

    (20) statement -> conditionalStmt .

    ID              reduce using rule 20 (statement -> conditionalStmt .)
    IF              reduce using rule 20 (statement -> conditionalStmt .)
    FOR             reduce using rule 20 (statement -> conditionalStmt .)
    FILTER          reduce using rule 20 (statement -> conditionalStmt .)
    MAP             reduce using rule 20 (statement -> conditionalStmt .)
    REDUCE          reduce using rule 20 (statement -> conditionalStmt .)
    INPUT           reduce using rule 20 (statement -> conditionalStmt .)
    OUTPUT          reduce using rule 20 (statement -> conditionalStmt .)
    COMMENT         reduce using rule 20 (statement -> conditionalStmt .)
    NOT             reduce using rule 20 (statement -> conditionalStmt .)
    NUMBER          reduce using rule 20 (statement -> conditionalStmt .)
    $end            reduce using rule 20 (statement -> conditionalStmt .)
    ELSE            reduce using rule 20 (statement -> conditionalStmt .)


state 8

    (21) statement -> iterationStmt .

    ID              reduce using rule 21 (statement -> iterationStmt .)
    IF              reduce using rule 21 (statement -> iterationStmt .)
    FOR             reduce using rule 21 (statement -> iterationStmt .)
    FILTER          reduce using rule 21 (statement -> iterationStmt .)
    MAP             reduce using rule 21 (statement -> iterationStmt .)
    REDUCE          reduce using rule 21 (statement -> iterationStmt .)
    INPUT           reduce using rule 21 (statement -> iterationStmt .)
    OUTPUT          reduce using rule 21 (statement -> iterationStmt .)
    COMMENT         reduce using rule 21 (statement -> iterationStmt .)
    NOT             reduce using rule 21 (statement -> iterationStmt .)
    NUMBER          reduce using rule 21 (statement -> iterationStmt .)
    $end            reduce using rule 21 (statement -> iterationStmt .)
    ELSE            reduce using rule 21 (statement -> iterationStmt .)


state 9

    (22) statement -> functionalStmt . SEMI

    SEMI            shift and go to state 34


state 10

    (23) statement -> inputStmt . SEMI

    SEMI            shift and go to state 35


state 11

    (24) statement -> outputStmt . SEMI

    SEMI            shift and go to state 36


state 12

    (25) statement -> commentStmt .

    ID              reduce using rule 25 (statement -> commentStmt .)
    IF              reduce using rule 25 (statement -> commentStmt .)
    FOR             reduce using rule 25 (statement -> commentStmt .)
    FILTER          reduce using rule 25 (statement -> commentStmt .)
    MAP             reduce using rule 25 (statement -> commentStmt .)
    REDUCE          reduce using rule 25 (statement -> commentStmt .)
    INPUT           reduce using rule 25 (statement -> commentStmt .)
    OUTPUT          reduce using rule 25 (statement -> commentStmt .)
    COMMENT         reduce using rule 25 (statement -> commentStmt .)
    NOT             reduce using rule 25 (statement -> commentStmt .)
    NUMBER          reduce using rule 25 (statement -> commentStmt .)
    $end            reduce using rule 25 (statement -> commentStmt .)
    ELSE            reduce using rule 25 (statement -> commentStmt .)


state 13

    (32) expressionStmt -> andExpression .
    (33) andExpression -> andExpression . AND unaryRelExpression

    SEMI            reduce using rule 32 (expressionStmt -> andExpression .)
    OR              reduce using rule 32 (expressionStmt -> andExpression .)
    COL             reduce using rule 32 (expressionStmt -> andExpression .)
    RPAREN          reduce using rule 32 (expressionStmt -> andExpression .)
    AND             shift and go to state 37


state 14

    (29) conditionalStmt -> IF . expressionStmt COL declarationList
    (30) conditionalStmt -> IF . expressionStmt COL declarationList ELSE COL declarationList
    (31) expressionStmt -> . expressionStmt OR andExpression
    (32) expressionStmt -> . andExpression
    (33) andExpression -> . andExpression AND unaryRelExpression
    (34) andExpression -> . unaryRelExpression
    (35) unaryRelExpression -> . NOT unaryRelExpression
    (36) unaryRelExpression -> . relExpression
    (37) relExpression -> . sumExpression relop sumExpression
    (38) relExpression -> . sumExpression
    (45) sumExpression -> . sumExpression sumop term
    (46) sumExpression -> . term
    (49) term -> . term mulop sumElement
    (50) term -> . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 38
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 15

    (26) iterationStmt -> FOR . ID IN iterationElement COL declarationList

    ID              shift and go to state 40


state 16

    (55) functionalStmt -> FILTER . LPAREN lambdaFilter RPAREN

    LPAREN          shift and go to state 41


state 17

    (56) functionalStmt -> MAP . LPAREN lambdaStmt RPAREN

    LPAREN          shift and go to state 42


state 18

    (57) functionalStmt -> REDUCE . LPAREN lambdaStmt RPAREN

    LPAREN          shift and go to state 43


state 19

    (60) inputStmt -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 44


state 20

    (61) outputStmt -> OUTPUT . LPAREN declarationElement RPAREN

    LPAREN          shift and go to state 45


state 21

    (62) commentStmt -> COMMENT .

    ID              reduce using rule 62 (commentStmt -> COMMENT .)
    IF              reduce using rule 62 (commentStmt -> COMMENT .)
    FOR             reduce using rule 62 (commentStmt -> COMMENT .)
    FILTER          reduce using rule 62 (commentStmt -> COMMENT .)
    MAP             reduce using rule 62 (commentStmt -> COMMENT .)
    REDUCE          reduce using rule 62 (commentStmt -> COMMENT .)
    INPUT           reduce using rule 62 (commentStmt -> COMMENT .)
    OUTPUT          reduce using rule 62 (commentStmt -> COMMENT .)
    COMMENT         reduce using rule 62 (commentStmt -> COMMENT .)
    NOT             reduce using rule 62 (commentStmt -> COMMENT .)
    NUMBER          reduce using rule 62 (commentStmt -> COMMENT .)
    $end            reduce using rule 62 (commentStmt -> COMMENT .)
    ELSE            reduce using rule 62 (commentStmt -> COMMENT .)


state 22

    (34) andExpression -> unaryRelExpression .

    AND             reduce using rule 34 (andExpression -> unaryRelExpression .)
    SEMI            reduce using rule 34 (andExpression -> unaryRelExpression .)
    OR              reduce using rule 34 (andExpression -> unaryRelExpression .)
    COL             reduce using rule 34 (andExpression -> unaryRelExpression .)
    RPAREN          reduce using rule 34 (andExpression -> unaryRelExpression .)


state 23

    (35) unaryRelExpression -> NOT . unaryRelExpression
    (35) unaryRelExpression -> . NOT unaryRelExpression
    (36) unaryRelExpression -> . relExpression
    (37) relExpression -> . sumExpression relop sumExpression
    (38) relExpression -> . sumExpression
    (45) sumExpression -> . sumExpression sumop term
    (46) sumExpression -> . term
    (49) term -> . term mulop sumElement
    (50) term -> . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    unaryRelExpression             shift and go to state 46
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 24

    (36) unaryRelExpression -> relExpression .

    AND             reduce using rule 36 (unaryRelExpression -> relExpression .)
    SEMI            reduce using rule 36 (unaryRelExpression -> relExpression .)
    OR              reduce using rule 36 (unaryRelExpression -> relExpression .)
    COL             reduce using rule 36 (unaryRelExpression -> relExpression .)
    RPAREN          reduce using rule 36 (unaryRelExpression -> relExpression .)


state 25

    (37) relExpression -> sumExpression . relop sumExpression
    (38) relExpression -> sumExpression .
    (45) sumExpression -> sumExpression . sumop term
    (39) relop -> . LE
    (40) relop -> . LT
    (41) relop -> . GT
    (42) relop -> . GE
    (43) relop -> . EQ
    (44) relop -> . NEQ
    (47) sumop -> . PLUS
    (48) sumop -> . MINUS

    AND             reduce using rule 38 (relExpression -> sumExpression .)
    SEMI            reduce using rule 38 (relExpression -> sumExpression .)
    OR              reduce using rule 38 (relExpression -> sumExpression .)
    COL             reduce using rule 38 (relExpression -> sumExpression .)
    RPAREN          reduce using rule 38 (relExpression -> sumExpression .)
    LE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    relop                          shift and go to state 47
    sumop                          shift and go to state 48

state 26

    (46) sumExpression -> term .
    (49) term -> term . mulop sumElement
    (53) mulop -> . PROD
    (54) mulop -> . DIV

    LE              reduce using rule 46 (sumExpression -> term .)
    LT              reduce using rule 46 (sumExpression -> term .)
    GT              reduce using rule 46 (sumExpression -> term .)
    GE              reduce using rule 46 (sumExpression -> term .)
    EQ              reduce using rule 46 (sumExpression -> term .)
    NEQ             reduce using rule 46 (sumExpression -> term .)
    PLUS            reduce using rule 46 (sumExpression -> term .)
    MINUS           reduce using rule 46 (sumExpression -> term .)
    AND             reduce using rule 46 (sumExpression -> term .)
    SEMI            reduce using rule 46 (sumExpression -> term .)
    OR              reduce using rule 46 (sumExpression -> term .)
    COL             reduce using rule 46 (sumExpression -> term .)
    RPAREN          reduce using rule 46 (sumExpression -> term .)
    PROD            shift and go to state 58
    DIV             shift and go to state 59

    mulop                          shift and go to state 57

state 27

    (50) term -> sumElement .

    PROD            reduce using rule 50 (term -> sumElement .)
    DIV             reduce using rule 50 (term -> sumElement .)
    LE              reduce using rule 50 (term -> sumElement .)
    LT              reduce using rule 50 (term -> sumElement .)
    GT              reduce using rule 50 (term -> sumElement .)
    GE              reduce using rule 50 (term -> sumElement .)
    EQ              reduce using rule 50 (term -> sumElement .)
    NEQ             reduce using rule 50 (term -> sumElement .)
    PLUS            reduce using rule 50 (term -> sumElement .)
    MINUS           reduce using rule 50 (term -> sumElement .)
    AND             reduce using rule 50 (term -> sumElement .)
    SEMI            reduce using rule 50 (term -> sumElement .)
    OR              reduce using rule 50 (term -> sumElement .)
    COL             reduce using rule 50 (term -> sumElement .)
    RPAREN          reduce using rule 50 (term -> sumElement .)


state 28

    (52) sumElement -> NUMBER .

    PROD            reduce using rule 52 (sumElement -> NUMBER .)
    DIV             reduce using rule 52 (sumElement -> NUMBER .)
    LE              reduce using rule 52 (sumElement -> NUMBER .)
    LT              reduce using rule 52 (sumElement -> NUMBER .)
    GT              reduce using rule 52 (sumElement -> NUMBER .)
    GE              reduce using rule 52 (sumElement -> NUMBER .)
    EQ              reduce using rule 52 (sumElement -> NUMBER .)
    NEQ             reduce using rule 52 (sumElement -> NUMBER .)
    PLUS            reduce using rule 52 (sumElement -> NUMBER .)
    MINUS           reduce using rule 52 (sumElement -> NUMBER .)
    AND             reduce using rule 52 (sumElement -> NUMBER .)
    SEMI            reduce using rule 52 (sumElement -> NUMBER .)
    OR              reduce using rule 52 (sumElement -> NUMBER .)
    COL             reduce using rule 52 (sumElement -> NUMBER .)
    RPAREN          reduce using rule 52 (sumElement -> NUMBER .)


state 29

    (1) declarationList -> declaration declarationList .

    $end            reduce using rule 1 (declarationList -> declaration declarationList .)
    ELSE            reduce using rule 1 (declarationList -> declaration declarationList .)
    ID              reduce using rule 1 (declarationList -> declaration declarationList .)
    IF              reduce using rule 1 (declarationList -> declaration declarationList .)
    FOR             reduce using rule 1 (declarationList -> declaration declarationList .)
    FILTER          reduce using rule 1 (declarationList -> declaration declarationList .)
    MAP             reduce using rule 1 (declarationList -> declaration declarationList .)
    REDUCE          reduce using rule 1 (declarationList -> declaration declarationList .)
    INPUT           reduce using rule 1 (declarationList -> declaration declarationList .)
    OUTPUT          reduce using rule 1 (declarationList -> declaration declarationList .)
    COMMENT         reduce using rule 1 (declarationList -> declaration declarationList .)
    NOT             reduce using rule 1 (declarationList -> declaration declarationList .)
    NUMBER          reduce using rule 1 (declarationList -> declaration declarationList .)


state 30

    (3) declaration -> varDeclaration SEMI .

    ID              reduce using rule 3 (declaration -> varDeclaration SEMI .)
    IF              reduce using rule 3 (declaration -> varDeclaration SEMI .)
    FOR             reduce using rule 3 (declaration -> varDeclaration SEMI .)
    FILTER          reduce using rule 3 (declaration -> varDeclaration SEMI .)
    MAP             reduce using rule 3 (declaration -> varDeclaration SEMI .)
    REDUCE          reduce using rule 3 (declaration -> varDeclaration SEMI .)
    INPUT           reduce using rule 3 (declaration -> varDeclaration SEMI .)
    OUTPUT          reduce using rule 3 (declaration -> varDeclaration SEMI .)
    COMMENT         reduce using rule 3 (declaration -> varDeclaration SEMI .)
    NOT             reduce using rule 3 (declaration -> varDeclaration SEMI .)
    NUMBER          reduce using rule 3 (declaration -> varDeclaration SEMI .)
    $end            reduce using rule 3 (declaration -> varDeclaration SEMI .)
    ELSE            reduce using rule 3 (declaration -> varDeclaration SEMI .)


state 31

    (5) varDeclaration -> ID EQUALS . declarationElement
    (6) declarationElement -> . list
    (7) declarationElement -> . sumExpression
    (8) declarationElement -> . STRING
    (9) declarationElement -> . BOOLEAN
    (10) declarationElement -> . inputStmt
    (11) declarationElement -> . functionalStmt
    (12) list -> . LSQUARE listElements RSQUARE
    (45) sumExpression -> . sumExpression sumop term
    (46) sumExpression -> . term
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (55) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (56) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (57) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (49) term -> . term mulop sumElement
    (50) term -> . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64
    LSQUARE         shift and go to state 67
    INPUT           shift and go to state 19
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    declarationElement             shift and go to state 60
    list                           shift and go to state 61
    sumExpression                  shift and go to state 62
    inputStmt                      shift and go to state 65
    functionalStmt                 shift and go to state 66
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 32

    (19) statement -> expressionStmt SEMI .

    ID              reduce using rule 19 (statement -> expressionStmt SEMI .)
    IF              reduce using rule 19 (statement -> expressionStmt SEMI .)
    FOR             reduce using rule 19 (statement -> expressionStmt SEMI .)
    FILTER          reduce using rule 19 (statement -> expressionStmt SEMI .)
    MAP             reduce using rule 19 (statement -> expressionStmt SEMI .)
    REDUCE          reduce using rule 19 (statement -> expressionStmt SEMI .)
    INPUT           reduce using rule 19 (statement -> expressionStmt SEMI .)
    OUTPUT          reduce using rule 19 (statement -> expressionStmt SEMI .)
    COMMENT         reduce using rule 19 (statement -> expressionStmt SEMI .)
    NOT             reduce using rule 19 (statement -> expressionStmt SEMI .)
    NUMBER          reduce using rule 19 (statement -> expressionStmt SEMI .)
    $end            reduce using rule 19 (statement -> expressionStmt SEMI .)
    ELSE            reduce using rule 19 (statement -> expressionStmt SEMI .)


state 33

    (31) expressionStmt -> expressionStmt OR . andExpression
    (33) andExpression -> . andExpression AND unaryRelExpression
    (34) andExpression -> . unaryRelExpression
    (35) unaryRelExpression -> . NOT unaryRelExpression
    (36) unaryRelExpression -> . relExpression
    (37) relExpression -> . sumExpression relop sumExpression
    (38) relExpression -> . sumExpression
    (45) sumExpression -> . sumExpression sumop term
    (46) sumExpression -> . term
    (49) term -> . term mulop sumElement
    (50) term -> . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    andExpression                  shift and go to state 68
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 34

    (22) statement -> functionalStmt SEMI .

    ID              reduce using rule 22 (statement -> functionalStmt SEMI .)
    IF              reduce using rule 22 (statement -> functionalStmt SEMI .)
    FOR             reduce using rule 22 (statement -> functionalStmt SEMI .)
    FILTER          reduce using rule 22 (statement -> functionalStmt SEMI .)
    MAP             reduce using rule 22 (statement -> functionalStmt SEMI .)
    REDUCE          reduce using rule 22 (statement -> functionalStmt SEMI .)
    INPUT           reduce using rule 22 (statement -> functionalStmt SEMI .)
    OUTPUT          reduce using rule 22 (statement -> functionalStmt SEMI .)
    COMMENT         reduce using rule 22 (statement -> functionalStmt SEMI .)
    NOT             reduce using rule 22 (statement -> functionalStmt SEMI .)
    NUMBER          reduce using rule 22 (statement -> functionalStmt SEMI .)
    $end            reduce using rule 22 (statement -> functionalStmt SEMI .)
    ELSE            reduce using rule 22 (statement -> functionalStmt SEMI .)


state 35

    (23) statement -> inputStmt SEMI .

    ID              reduce using rule 23 (statement -> inputStmt SEMI .)
    IF              reduce using rule 23 (statement -> inputStmt SEMI .)
    FOR             reduce using rule 23 (statement -> inputStmt SEMI .)
    FILTER          reduce using rule 23 (statement -> inputStmt SEMI .)
    MAP             reduce using rule 23 (statement -> inputStmt SEMI .)
    REDUCE          reduce using rule 23 (statement -> inputStmt SEMI .)
    INPUT           reduce using rule 23 (statement -> inputStmt SEMI .)
    OUTPUT          reduce using rule 23 (statement -> inputStmt SEMI .)
    COMMENT         reduce using rule 23 (statement -> inputStmt SEMI .)
    NOT             reduce using rule 23 (statement -> inputStmt SEMI .)
    NUMBER          reduce using rule 23 (statement -> inputStmt SEMI .)
    $end            reduce using rule 23 (statement -> inputStmt SEMI .)
    ELSE            reduce using rule 23 (statement -> inputStmt SEMI .)


state 36

    (24) statement -> outputStmt SEMI .

    ID              reduce using rule 24 (statement -> outputStmt SEMI .)
    IF              reduce using rule 24 (statement -> outputStmt SEMI .)
    FOR             reduce using rule 24 (statement -> outputStmt SEMI .)
    FILTER          reduce using rule 24 (statement -> outputStmt SEMI .)
    MAP             reduce using rule 24 (statement -> outputStmt SEMI .)
    REDUCE          reduce using rule 24 (statement -> outputStmt SEMI .)
    INPUT           reduce using rule 24 (statement -> outputStmt SEMI .)
    OUTPUT          reduce using rule 24 (statement -> outputStmt SEMI .)
    COMMENT         reduce using rule 24 (statement -> outputStmt SEMI .)
    NOT             reduce using rule 24 (statement -> outputStmt SEMI .)
    NUMBER          reduce using rule 24 (statement -> outputStmt SEMI .)
    $end            reduce using rule 24 (statement -> outputStmt SEMI .)
    ELSE            reduce using rule 24 (statement -> outputStmt SEMI .)


state 37

    (33) andExpression -> andExpression AND . unaryRelExpression
    (35) unaryRelExpression -> . NOT unaryRelExpression
    (36) unaryRelExpression -> . relExpression
    (37) relExpression -> . sumExpression relop sumExpression
    (38) relExpression -> . sumExpression
    (45) sumExpression -> . sumExpression sumop term
    (46) sumExpression -> . term
    (49) term -> . term mulop sumElement
    (50) term -> . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    unaryRelExpression             shift and go to state 69
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 38

    (29) conditionalStmt -> IF expressionStmt . COL declarationList
    (30) conditionalStmt -> IF expressionStmt . COL declarationList ELSE COL declarationList
    (31) expressionStmt -> expressionStmt . OR andExpression

    COL             shift and go to state 70
    OR              shift and go to state 33


state 39

    (51) sumElement -> ID .

    PROD            reduce using rule 51 (sumElement -> ID .)
    DIV             reduce using rule 51 (sumElement -> ID .)
    LE              reduce using rule 51 (sumElement -> ID .)
    LT              reduce using rule 51 (sumElement -> ID .)
    GT              reduce using rule 51 (sumElement -> ID .)
    GE              reduce using rule 51 (sumElement -> ID .)
    EQ              reduce using rule 51 (sumElement -> ID .)
    NEQ             reduce using rule 51 (sumElement -> ID .)
    PLUS            reduce using rule 51 (sumElement -> ID .)
    MINUS           reduce using rule 51 (sumElement -> ID .)
    AND             reduce using rule 51 (sumElement -> ID .)
    COL             reduce using rule 51 (sumElement -> ID .)
    OR              reduce using rule 51 (sumElement -> ID .)
    SEMI            reduce using rule 51 (sumElement -> ID .)
    RPAREN          reduce using rule 51 (sumElement -> ID .)


state 40

    (26) iterationStmt -> FOR ID . IN iterationElement COL declarationList

    IN              shift and go to state 71


state 41

    (55) functionalStmt -> FILTER LPAREN . lambdaFilter RPAREN
    (59) lambdaFilter -> . LAMBDA COL expressionStmt

    LAMBDA          shift and go to state 73

    lambdaFilter                   shift and go to state 72

state 42

    (56) functionalStmt -> MAP LPAREN . lambdaStmt RPAREN
    (58) lambdaStmt -> . LAMBDA COL sumExpression

    LAMBDA          shift and go to state 75

    lambdaStmt                     shift and go to state 74

state 43

    (57) functionalStmt -> REDUCE LPAREN . lambdaStmt RPAREN
    (58) lambdaStmt -> . LAMBDA COL sumExpression

    LAMBDA          shift and go to state 75

    lambdaStmt                     shift and go to state 76

state 44

    (60) inputStmt -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 77


state 45

    (61) outputStmt -> OUTPUT LPAREN . declarationElement RPAREN
    (6) declarationElement -> . list
    (7) declarationElement -> . sumExpression
    (8) declarationElement -> . STRING
    (9) declarationElement -> . BOOLEAN
    (10) declarationElement -> . inputStmt
    (11) declarationElement -> . functionalStmt
    (12) list -> . LSQUARE listElements RSQUARE
    (45) sumExpression -> . sumExpression sumop term
    (46) sumExpression -> . term
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (55) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (56) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (57) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (49) term -> . term mulop sumElement
    (50) term -> . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64
    LSQUARE         shift and go to state 67
    INPUT           shift and go to state 19
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    declarationElement             shift and go to state 78
    list                           shift and go to state 61
    sumExpression                  shift and go to state 62
    inputStmt                      shift and go to state 65
    functionalStmt                 shift and go to state 66
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 46

    (35) unaryRelExpression -> NOT unaryRelExpression .

    AND             reduce using rule 35 (unaryRelExpression -> NOT unaryRelExpression .)
    SEMI            reduce using rule 35 (unaryRelExpression -> NOT unaryRelExpression .)
    OR              reduce using rule 35 (unaryRelExpression -> NOT unaryRelExpression .)
    COL             reduce using rule 35 (unaryRelExpression -> NOT unaryRelExpression .)
    RPAREN          reduce using rule 35 (unaryRelExpression -> NOT unaryRelExpression .)


state 47

    (37) relExpression -> sumExpression relop . sumExpression
    (45) sumExpression -> . sumExpression sumop term
    (46) sumExpression -> . term
    (49) term -> . term mulop sumElement
    (50) term -> . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    sumExpression                  shift and go to state 79
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 48

    (45) sumExpression -> sumExpression sumop . term
    (49) term -> . term mulop sumElement
    (50) term -> . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    term                           shift and go to state 80
    sumElement                     shift and go to state 27

state 49

    (39) relop -> LE .

    ID              reduce using rule 39 (relop -> LE .)
    NUMBER          reduce using rule 39 (relop -> LE .)


state 50

    (40) relop -> LT .

    ID              reduce using rule 40 (relop -> LT .)
    NUMBER          reduce using rule 40 (relop -> LT .)


state 51

    (41) relop -> GT .

    ID              reduce using rule 41 (relop -> GT .)
    NUMBER          reduce using rule 41 (relop -> GT .)


state 52

    (42) relop -> GE .

    ID              reduce using rule 42 (relop -> GE .)
    NUMBER          reduce using rule 42 (relop -> GE .)


state 53

    (43) relop -> EQ .

    ID              reduce using rule 43 (relop -> EQ .)
    NUMBER          reduce using rule 43 (relop -> EQ .)


state 54

    (44) relop -> NEQ .

    ID              reduce using rule 44 (relop -> NEQ .)
    NUMBER          reduce using rule 44 (relop -> NEQ .)


state 55

    (47) sumop -> PLUS .

    ID              reduce using rule 47 (sumop -> PLUS .)
    NUMBER          reduce using rule 47 (sumop -> PLUS .)


state 56

    (48) sumop -> MINUS .

    ID              reduce using rule 48 (sumop -> MINUS .)
    NUMBER          reduce using rule 48 (sumop -> MINUS .)


state 57

    (49) term -> term mulop . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    sumElement                     shift and go to state 81

state 58

    (53) mulop -> PROD .

    ID              reduce using rule 53 (mulop -> PROD .)
    NUMBER          reduce using rule 53 (mulop -> PROD .)


state 59

    (54) mulop -> DIV .

    ID              reduce using rule 54 (mulop -> DIV .)
    NUMBER          reduce using rule 54 (mulop -> DIV .)


state 60

    (5) varDeclaration -> ID EQUALS declarationElement .

    SEMI            reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)


state 61

    (6) declarationElement -> list .

    SEMI            reduce using rule 6 (declarationElement -> list .)
    RPAREN          reduce using rule 6 (declarationElement -> list .)


state 62

    (7) declarationElement -> sumExpression .
    (45) sumExpression -> sumExpression . sumop term
    (47) sumop -> . PLUS
    (48) sumop -> . MINUS

    SEMI            reduce using rule 7 (declarationElement -> sumExpression .)
    RPAREN          reduce using rule 7 (declarationElement -> sumExpression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    sumop                          shift and go to state 48

state 63

    (8) declarationElement -> STRING .

    SEMI            reduce using rule 8 (declarationElement -> STRING .)
    RPAREN          reduce using rule 8 (declarationElement -> STRING .)


state 64

    (9) declarationElement -> BOOLEAN .

    SEMI            reduce using rule 9 (declarationElement -> BOOLEAN .)
    RPAREN          reduce using rule 9 (declarationElement -> BOOLEAN .)


state 65

    (10) declarationElement -> inputStmt .

    SEMI            reduce using rule 10 (declarationElement -> inputStmt .)
    RPAREN          reduce using rule 10 (declarationElement -> inputStmt .)


state 66

    (11) declarationElement -> functionalStmt .

    SEMI            reduce using rule 11 (declarationElement -> functionalStmt .)
    RPAREN          reduce using rule 11 (declarationElement -> functionalStmt .)


state 67

    (12) list -> LSQUARE . listElements RSQUARE
    (13) listElements -> . NUMBER
    (14) listElements -> . NUMBER OP_NUMBER
    (15) listElements -> . STRING
    (16) listElements -> . STRING OP_STRING
    (17) listElements -> . BOOLEAN
    (18) listElements -> . BOOLEAN OP_BOOLEAN

    NUMBER          shift and go to state 83
    STRING          shift and go to state 84
    BOOLEAN         shift and go to state 85

    listElements                   shift and go to state 82

state 68

    (31) expressionStmt -> expressionStmt OR andExpression .
    (33) andExpression -> andExpression . AND unaryRelExpression

    SEMI            reduce using rule 31 (expressionStmt -> expressionStmt OR andExpression .)
    OR              reduce using rule 31 (expressionStmt -> expressionStmt OR andExpression .)
    COL             reduce using rule 31 (expressionStmt -> expressionStmt OR andExpression .)
    RPAREN          reduce using rule 31 (expressionStmt -> expressionStmt OR andExpression .)
    AND             shift and go to state 37


state 69

    (33) andExpression -> andExpression AND unaryRelExpression .

    AND             reduce using rule 33 (andExpression -> andExpression AND unaryRelExpression .)
    SEMI            reduce using rule 33 (andExpression -> andExpression AND unaryRelExpression .)
    OR              reduce using rule 33 (andExpression -> andExpression AND unaryRelExpression .)
    COL             reduce using rule 33 (andExpression -> andExpression AND unaryRelExpression .)
    RPAREN          reduce using rule 33 (andExpression -> andExpression AND unaryRelExpression .)


state 70

    (29) conditionalStmt -> IF expressionStmt COL . declarationList
    (30) conditionalStmt -> IF expressionStmt COL . declarationList ELSE COL declarationList
    (1) declarationList -> . declaration declarationList
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (19) statement -> . expressionStmt SEMI
    (20) statement -> . conditionalStmt
    (21) statement -> . iterationStmt
    (22) statement -> . functionalStmt SEMI
    (23) statement -> . inputStmt SEMI
    (24) statement -> . outputStmt SEMI
    (25) statement -> . commentStmt
    (31) expressionStmt -> . expressionStmt OR andExpression
    (32) expressionStmt -> . andExpression
    (29) conditionalStmt -> . IF expressionStmt COL declarationList
    (30) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (26) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (55) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (56) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (57) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (33) andExpression -> . andExpression AND unaryRelExpression
    (34) andExpression -> . unaryRelExpression
    (35) unaryRelExpression -> . NOT unaryRelExpression
    (36) unaryRelExpression -> . relExpression
    (37) relExpression -> . sumExpression relop sumExpression
    (38) relExpression -> . sumExpression
    (45) sumExpression -> . sumExpression sumop term
    (46) sumExpression -> . term
    (49) term -> . term mulop sumElement
    (50) term -> . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 6
    declarationList                shift and go to state 86
    declaration                    shift and go to state 2
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 71

    (26) iterationStmt -> FOR ID IN . iterationElement COL declarationList
    (27) iterationElement -> . list
    (28) iterationElement -> . ID
    (12) list -> . LSQUARE listElements RSQUARE

    ID              shift and go to state 87
    LSQUARE         shift and go to state 67

    iterationElement               shift and go to state 88
    list                           shift and go to state 89

state 72

    (55) functionalStmt -> FILTER LPAREN lambdaFilter . RPAREN

    RPAREN          shift and go to state 90


state 73

    (59) lambdaFilter -> LAMBDA . COL expressionStmt

    COL             shift and go to state 91


state 74

    (56) functionalStmt -> MAP LPAREN lambdaStmt . RPAREN

    RPAREN          shift and go to state 92


state 75

    (58) lambdaStmt -> LAMBDA . COL sumExpression

    COL             shift and go to state 93


state 76

    (57) functionalStmt -> REDUCE LPAREN lambdaStmt . RPAREN

    RPAREN          shift and go to state 94


state 77

    (60) inputStmt -> INPUT LPAREN RPAREN .

    SEMI            reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)
    RPAREN          reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)


state 78

    (61) outputStmt -> OUTPUT LPAREN declarationElement . RPAREN

    RPAREN          shift and go to state 95


state 79

    (37) relExpression -> sumExpression relop sumExpression .
    (45) sumExpression -> sumExpression . sumop term
    (47) sumop -> . PLUS
    (48) sumop -> . MINUS

    AND             reduce using rule 37 (relExpression -> sumExpression relop sumExpression .)
    SEMI            reduce using rule 37 (relExpression -> sumExpression relop sumExpression .)
    OR              reduce using rule 37 (relExpression -> sumExpression relop sumExpression .)
    COL             reduce using rule 37 (relExpression -> sumExpression relop sumExpression .)
    RPAREN          reduce using rule 37 (relExpression -> sumExpression relop sumExpression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    sumop                          shift and go to state 48

state 80

    (45) sumExpression -> sumExpression sumop term .
    (49) term -> term . mulop sumElement
    (53) mulop -> . PROD
    (54) mulop -> . DIV

    LE              reduce using rule 45 (sumExpression -> sumExpression sumop term .)
    LT              reduce using rule 45 (sumExpression -> sumExpression sumop term .)
    GT              reduce using rule 45 (sumExpression -> sumExpression sumop term .)
    GE              reduce using rule 45 (sumExpression -> sumExpression sumop term .)
    EQ              reduce using rule 45 (sumExpression -> sumExpression sumop term .)
    NEQ             reduce using rule 45 (sumExpression -> sumExpression sumop term .)
    PLUS            reduce using rule 45 (sumExpression -> sumExpression sumop term .)
    MINUS           reduce using rule 45 (sumExpression -> sumExpression sumop term .)
    AND             reduce using rule 45 (sumExpression -> sumExpression sumop term .)
    SEMI            reduce using rule 45 (sumExpression -> sumExpression sumop term .)
    OR              reduce using rule 45 (sumExpression -> sumExpression sumop term .)
    COL             reduce using rule 45 (sumExpression -> sumExpression sumop term .)
    RPAREN          reduce using rule 45 (sumExpression -> sumExpression sumop term .)
    PROD            shift and go to state 58
    DIV             shift and go to state 59

    mulop                          shift and go to state 57

state 81

    (49) term -> term mulop sumElement .

    PROD            reduce using rule 49 (term -> term mulop sumElement .)
    DIV             reduce using rule 49 (term -> term mulop sumElement .)
    LE              reduce using rule 49 (term -> term mulop sumElement .)
    LT              reduce using rule 49 (term -> term mulop sumElement .)
    GT              reduce using rule 49 (term -> term mulop sumElement .)
    GE              reduce using rule 49 (term -> term mulop sumElement .)
    EQ              reduce using rule 49 (term -> term mulop sumElement .)
    NEQ             reduce using rule 49 (term -> term mulop sumElement .)
    PLUS            reduce using rule 49 (term -> term mulop sumElement .)
    MINUS           reduce using rule 49 (term -> term mulop sumElement .)
    AND             reduce using rule 49 (term -> term mulop sumElement .)
    SEMI            reduce using rule 49 (term -> term mulop sumElement .)
    OR              reduce using rule 49 (term -> term mulop sumElement .)
    COL             reduce using rule 49 (term -> term mulop sumElement .)
    RPAREN          reduce using rule 49 (term -> term mulop sumElement .)


state 82

    (12) list -> LSQUARE listElements . RSQUARE

    RSQUARE         shift and go to state 96


state 83

    (13) listElements -> NUMBER .
    (14) listElements -> NUMBER . OP_NUMBER

    RSQUARE         reduce using rule 13 (listElements -> NUMBER .)
    OP_NUMBER       shift and go to state 97


state 84

    (15) listElements -> STRING .
    (16) listElements -> STRING . OP_STRING

    RSQUARE         reduce using rule 15 (listElements -> STRING .)
    OP_STRING       shift and go to state 98


state 85

    (17) listElements -> BOOLEAN .
    (18) listElements -> BOOLEAN . OP_BOOLEAN

    RSQUARE         reduce using rule 17 (listElements -> BOOLEAN .)
    OP_BOOLEAN      shift and go to state 99


state 86

    (29) conditionalStmt -> IF expressionStmt COL declarationList .
    (30) conditionalStmt -> IF expressionStmt COL declarationList . ELSE COL declarationList

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList .)
    IF              reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList .)
    FOR             reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList .)
    FILTER          reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList .)
    MAP             reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList .)
    REDUCE          reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList .)
    INPUT           reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList .)
    OUTPUT          reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList .)
    COMMENT         reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList .)
    NOT             reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList .)
    NUMBER          reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList .)
    $end            reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList .)
    ELSE            shift and go to state 100

  ! ELSE            [ reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList .) ]


state 87

    (28) iterationElement -> ID .

    COL             reduce using rule 28 (iterationElement -> ID .)


state 88

    (26) iterationStmt -> FOR ID IN iterationElement . COL declarationList

    COL             shift and go to state 101


state 89

    (27) iterationElement -> list .

    COL             reduce using rule 27 (iterationElement -> list .)


state 90

    (55) functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .

    SEMI            reduce using rule 55 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)
    RPAREN          reduce using rule 55 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)


state 91

    (59) lambdaFilter -> LAMBDA COL . expressionStmt
    (31) expressionStmt -> . expressionStmt OR andExpression
    (32) expressionStmt -> . andExpression
    (33) andExpression -> . andExpression AND unaryRelExpression
    (34) andExpression -> . unaryRelExpression
    (35) unaryRelExpression -> . NOT unaryRelExpression
    (36) unaryRelExpression -> . relExpression
    (37) relExpression -> . sumExpression relop sumExpression
    (38) relExpression -> . sumExpression
    (45) sumExpression -> . sumExpression sumop term
    (46) sumExpression -> . term
    (49) term -> . term mulop sumElement
    (50) term -> . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 102
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 92

    (56) functionalStmt -> MAP LPAREN lambdaStmt RPAREN .

    SEMI            reduce using rule 56 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)
    RPAREN          reduce using rule 56 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)


state 93

    (58) lambdaStmt -> LAMBDA COL . sumExpression
    (45) sumExpression -> . sumExpression sumop term
    (46) sumExpression -> . term
    (49) term -> . term mulop sumElement
    (50) term -> . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    sumExpression                  shift and go to state 103
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 94

    (57) functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .

    SEMI            reduce using rule 57 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)
    RPAREN          reduce using rule 57 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)


state 95

    (61) outputStmt -> OUTPUT LPAREN declarationElement RPAREN .

    SEMI            reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)


state 96

    (12) list -> LSQUARE listElements RSQUARE .

    SEMI            reduce using rule 12 (list -> LSQUARE listElements RSQUARE .)
    RPAREN          reduce using rule 12 (list -> LSQUARE listElements RSQUARE .)
    COL             reduce using rule 12 (list -> LSQUARE listElements RSQUARE .)


state 97

    (14) listElements -> NUMBER OP_NUMBER .

    RSQUARE         reduce using rule 14 (listElements -> NUMBER OP_NUMBER .)


state 98

    (16) listElements -> STRING OP_STRING .

    RSQUARE         reduce using rule 16 (listElements -> STRING OP_STRING .)


state 99

    (18) listElements -> BOOLEAN OP_BOOLEAN .

    RSQUARE         reduce using rule 18 (listElements -> BOOLEAN OP_BOOLEAN .)


state 100

    (30) conditionalStmt -> IF expressionStmt COL declarationList ELSE . COL declarationList

    COL             shift and go to state 104


state 101

    (26) iterationStmt -> FOR ID IN iterationElement COL . declarationList
    (1) declarationList -> . declaration declarationList
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (19) statement -> . expressionStmt SEMI
    (20) statement -> . conditionalStmt
    (21) statement -> . iterationStmt
    (22) statement -> . functionalStmt SEMI
    (23) statement -> . inputStmt SEMI
    (24) statement -> . outputStmt SEMI
    (25) statement -> . commentStmt
    (31) expressionStmt -> . expressionStmt OR andExpression
    (32) expressionStmt -> . andExpression
    (29) conditionalStmt -> . IF expressionStmt COL declarationList
    (30) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (26) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (55) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (56) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (57) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (33) andExpression -> . andExpression AND unaryRelExpression
    (34) andExpression -> . unaryRelExpression
    (35) unaryRelExpression -> . NOT unaryRelExpression
    (36) unaryRelExpression -> . relExpression
    (37) relExpression -> . sumExpression relop sumExpression
    (38) relExpression -> . sumExpression
    (45) sumExpression -> . sumExpression sumop term
    (46) sumExpression -> . term
    (49) term -> . term mulop sumElement
    (50) term -> . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

    declarationList                shift and go to state 105
    declaration                    shift and go to state 2
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 102

    (59) lambdaFilter -> LAMBDA COL expressionStmt .
    (31) expressionStmt -> expressionStmt . OR andExpression

    RPAREN          reduce using rule 59 (lambdaFilter -> LAMBDA COL expressionStmt .)
    OR              shift and go to state 33


state 103

    (58) lambdaStmt -> LAMBDA COL sumExpression .
    (45) sumExpression -> sumExpression . sumop term
    (47) sumop -> . PLUS
    (48) sumop -> . MINUS

    RPAREN          reduce using rule 58 (lambdaStmt -> LAMBDA COL sumExpression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    sumop                          shift and go to state 48

state 104

    (30) conditionalStmt -> IF expressionStmt COL declarationList ELSE COL . declarationList
    (1) declarationList -> . declaration declarationList
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (19) statement -> . expressionStmt SEMI
    (20) statement -> . conditionalStmt
    (21) statement -> . iterationStmt
    (22) statement -> . functionalStmt SEMI
    (23) statement -> . inputStmt SEMI
    (24) statement -> . outputStmt SEMI
    (25) statement -> . commentStmt
    (31) expressionStmt -> . expressionStmt OR andExpression
    (32) expressionStmt -> . andExpression
    (29) conditionalStmt -> . IF expressionStmt COL declarationList
    (30) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (26) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (55) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (56) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (57) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (33) andExpression -> . andExpression AND unaryRelExpression
    (34) andExpression -> . unaryRelExpression
    (35) unaryRelExpression -> . NOT unaryRelExpression
    (36) unaryRelExpression -> . relExpression
    (37) relExpression -> . sumExpression relop sumExpression
    (38) relExpression -> . sumExpression
    (45) sumExpression -> . sumExpression sumop term
    (46) sumExpression -> . term
    (49) term -> . term mulop sumElement
    (50) term -> . sumElement
    (51) sumElement -> . ID
    (52) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 6
    declarationList                shift and go to state 106
    declaration                    shift and go to state 2
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 105

    (26) iterationStmt -> FOR ID IN iterationElement COL declarationList .

    ID              reduce using rule 26 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    IF              reduce using rule 26 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    FOR             reduce using rule 26 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    FILTER          reduce using rule 26 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    MAP             reduce using rule 26 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    REDUCE          reduce using rule 26 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    INPUT           reduce using rule 26 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    OUTPUT          reduce using rule 26 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    COMMENT         reduce using rule 26 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    NOT             reduce using rule 26 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    NUMBER          reduce using rule 26 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    $end            reduce using rule 26 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    ELSE            reduce using rule 26 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)


state 106

    (30) conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .

    ID              reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    IF              reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    FOR             reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    FILTER          reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    MAP             reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    REDUCE          reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    INPUT           reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    OUTPUT          reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    COMMENT         reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    NOT             reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    NUMBER          reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    $end            reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    ELSE            reduce using rule 30 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for FILTER in state 2 resolved as shift
WARNING: shift/reduce conflict for MAP in state 2 resolved as shift
WARNING: shift/reduce conflict for REDUCE in state 2 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 2 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 2 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 2 resolved as shift
WARNING: shift/reduce conflict for NOT in state 2 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 2 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 86 resolved as shift
