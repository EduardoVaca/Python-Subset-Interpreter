Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> declarationList
Rule 1     declarationList -> declarationList declaration
Rule 2     declarationList -> declaration
Rule 3     declaration -> varDeclaration
Rule 4     declaration -> statement
Rule 5     varDeclaration -> ID EQUALS declarationElement
Rule 6     declarationElement -> list
Rule 7     declarationElement -> STRING
Rule 8     declarationElement -> NUMBER
Rule 9     declarationElement -> BOOLEAN
Rule 10    list -> LSQUARE listElements RSQUARE
Rule 11    listElements -> NUMBER
Rule 12    listElements -> NUMBER OP_NUMBER
Rule 13    listElements -> STRING
Rule 14    listElements -> STRING OP_STRING
Rule 15    listElements -> BOOLEAN
Rule 16    listElements -> BOOLEAN OP_BOOLEAN
Rule 17    statement -> expressionStmt
Rule 18    statement -> conditionalStmt SEMI
Rule 19    statement -> iterationStmt SEMI
Rule 20    statement -> functionalStmt
Rule 21    statement -> inputStmt
Rule 22    statement -> outputStmt
Rule 23    statement -> commentStmt
Rule 24    iterationStmt -> FOR ID IN iterationElement COL statement
Rule 25    iterationElement -> list
Rule 26    iterationElement -> ID
Rule 27    conditionalStmt -> IF expressionStmt COL statement
Rule 28    conditionalStmt -> IF expressionStmt COL statement ELSE COL statement
Rule 29    expressionStmt -> expressionStmt OR andExpression
Rule 30    expressionStmt -> andExpression
Rule 31    andExpression -> andExpression AND unaryRelExpression
Rule 32    andExpression -> unaryRelExpression
Rule 33    unaryRelExpression -> NOT unaryRelExpression
Rule 34    unaryRelExpression -> relExpression
Rule 35    relExpression -> sumExpression relop sumExpression
Rule 36    relExpression -> sumExpression
Rule 37    relop -> LE
Rule 38    relop -> LT
Rule 39    relop -> GT
Rule 40    relop -> GE
Rule 41    relop -> EQ
Rule 42    relop -> NEQ
Rule 43    sumExpression -> sumExpression sumop term
Rule 44    sumExpression -> term
Rule 45    sumop -> PLUS
Rule 46    sumop -> MINUS
Rule 47    term -> term mulop sumElement
Rule 48    term -> sumElement
Rule 49    sumElement -> ID
Rule 50    sumElement -> NUMBER
Rule 51    mulop -> PROD
Rule 52    mulop -> DIV
Rule 53    functionalStmt -> FILTER LPAREN lambdaFilter RPAREN
Rule 54    functionalStmt -> MAP LPAREN lambdaStmt RPAREN
Rule 55    functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN
Rule 56    lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA iterationElement
Rule 57    lambdaElement -> ID
Rule 58    lambdaElement -> ID OP_ID
Rule 59    lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA iterationElement
Rule 60    inputStmt -> INPUT LPAREN RPAREN
Rule 61    outputStmt -> OUTPUT LPAREN declarationElement RPAREN
Rule 62    commentStmt -> COMMENT

Terminals, with rules where they appear

AND                  : 31
BOOLEAN              : 9 15 16
COL                  : 24 27 28 28 56 59
COMA                 : 56 59
COMMENT              : 62
DIV                  : 52
ELSE                 : 28
EQ                   : 41
EQUALS               : 5
FILTER               : 53
FOR                  : 24
GE                   : 40
GT                   : 39
ID                   : 5 24 26 49 57 58
IF                   : 27 28
IN                   : 24
INPUT                : 60
LAMBDA               : 56 59
LE                   : 37
LPAREN               : 53 54 55 60 61
LSQUARE              : 10
LT                   : 38
MAP                  : 54
MINUS                : 46
NEQ                  : 42
NOT                  : 33
NUMBER               : 8 11 12 50
OP_BOOLEAN           : 16
OP_ID                : 58
OP_NUMBER            : 12
OP_STRING            : 14
OR                   : 29
OUTPUT               : 61
PLUS                 : 45
PROD                 : 51
REDUCE               : 55
RPAREN               : 53 54 55 60 61
RSQUARE              : 10
SEMI                 : 18 19
STRING               : 7 13 14
error                : 

Nonterminals, with rules where they appear

andExpression        : 29 30 31
commentStmt          : 23
conditionalStmt      : 18
declaration          : 1 2
declarationElement   : 5 61
declarationList      : 1 0
expressionStmt       : 17 27 28 29 59
functionalStmt       : 20
inputStmt            : 21
iterationElement     : 24 56 59
iterationStmt        : 19
lambdaElement        : 56 59
lambdaFilter         : 53
lambdaStmt           : 54 55
list                 : 6 25
listElements         : 10
mulop                : 47
outputStmt           : 22
relExpression        : 34
relop                : 35
statement            : 4 24 27 28 28
sumElement           : 47 48
sumExpression        : 35 35 36 43 56
sumop                : 43
term                 : 43 44 47
unaryRelExpression   : 31 32 33
varDeclaration       : 3

Parsing method: LALR

state 0

    (0) S' -> . declarationList
    (1) declarationList -> . declarationList declaration
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (17) statement -> . expressionStmt
    (18) statement -> . conditionalStmt SEMI
    (19) statement -> . iterationStmt SEMI
    (20) statement -> . functionalStmt
    (21) statement -> . inputStmt
    (22) statement -> . outputStmt
    (23) statement -> . commentStmt
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (27) conditionalStmt -> . IF expressionStmt COL statement
    (28) conditionalStmt -> . IF expressionStmt COL statement ELSE COL statement
    (24) iterationStmt -> . FOR ID IN iterationElement COL statement
    (53) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (54) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (55) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

    declarationList                shift and go to state 1
    declaration                    shift and go to state 2
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 1

    (0) S' -> declarationList .
    (1) declarationList -> declarationList . declaration
    (3) declaration -> . varDeclaration
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (17) statement -> . expressionStmt
    (18) statement -> . conditionalStmt SEMI
    (19) statement -> . iterationStmt SEMI
    (20) statement -> . functionalStmt
    (21) statement -> . inputStmt
    (22) statement -> . outputStmt
    (23) statement -> . commentStmt
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (27) conditionalStmt -> . IF expressionStmt COL statement
    (28) conditionalStmt -> . IF expressionStmt COL statement ELSE COL statement
    (24) iterationStmt -> . FOR ID IN iterationElement COL statement
    (53) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (54) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (55) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

    declaration                    shift and go to state 29
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 2

    (2) declarationList -> declaration .

    ID              reduce using rule 2 (declarationList -> declaration .)
    IF              reduce using rule 2 (declarationList -> declaration .)
    FOR             reduce using rule 2 (declarationList -> declaration .)
    FILTER          reduce using rule 2 (declarationList -> declaration .)
    MAP             reduce using rule 2 (declarationList -> declaration .)
    REDUCE          reduce using rule 2 (declarationList -> declaration .)
    INPUT           reduce using rule 2 (declarationList -> declaration .)
    OUTPUT          reduce using rule 2 (declarationList -> declaration .)
    COMMENT         reduce using rule 2 (declarationList -> declaration .)
    NOT             reduce using rule 2 (declarationList -> declaration .)
    NUMBER          reduce using rule 2 (declarationList -> declaration .)
    $end            reduce using rule 2 (declarationList -> declaration .)


state 3

    (3) declaration -> varDeclaration .

    ID              reduce using rule 3 (declaration -> varDeclaration .)
    IF              reduce using rule 3 (declaration -> varDeclaration .)
    FOR             reduce using rule 3 (declaration -> varDeclaration .)
    FILTER          reduce using rule 3 (declaration -> varDeclaration .)
    MAP             reduce using rule 3 (declaration -> varDeclaration .)
    REDUCE          reduce using rule 3 (declaration -> varDeclaration .)
    INPUT           reduce using rule 3 (declaration -> varDeclaration .)
    OUTPUT          reduce using rule 3 (declaration -> varDeclaration .)
    COMMENT         reduce using rule 3 (declaration -> varDeclaration .)
    NOT             reduce using rule 3 (declaration -> varDeclaration .)
    NUMBER          reduce using rule 3 (declaration -> varDeclaration .)
    $end            reduce using rule 3 (declaration -> varDeclaration .)


state 4

    (4) declaration -> statement .

    ID              reduce using rule 4 (declaration -> statement .)
    IF              reduce using rule 4 (declaration -> statement .)
    FOR             reduce using rule 4 (declaration -> statement .)
    FILTER          reduce using rule 4 (declaration -> statement .)
    MAP             reduce using rule 4 (declaration -> statement .)
    REDUCE          reduce using rule 4 (declaration -> statement .)
    INPUT           reduce using rule 4 (declaration -> statement .)
    OUTPUT          reduce using rule 4 (declaration -> statement .)
    COMMENT         reduce using rule 4 (declaration -> statement .)
    NOT             reduce using rule 4 (declaration -> statement .)
    NUMBER          reduce using rule 4 (declaration -> statement .)
    $end            reduce using rule 4 (declaration -> statement .)


state 5

    (5) varDeclaration -> ID . EQUALS declarationElement
    (49) sumElement -> ID .

    EQUALS          shift and go to state 30
    PROD            reduce using rule 49 (sumElement -> ID .)
    DIV             reduce using rule 49 (sumElement -> ID .)
    LE              reduce using rule 49 (sumElement -> ID .)
    LT              reduce using rule 49 (sumElement -> ID .)
    GT              reduce using rule 49 (sumElement -> ID .)
    GE              reduce using rule 49 (sumElement -> ID .)
    EQ              reduce using rule 49 (sumElement -> ID .)
    NEQ             reduce using rule 49 (sumElement -> ID .)
    PLUS            reduce using rule 49 (sumElement -> ID .)
    MINUS           reduce using rule 49 (sumElement -> ID .)
    AND             reduce using rule 49 (sumElement -> ID .)
    OR              reduce using rule 49 (sumElement -> ID .)
    ID              reduce using rule 49 (sumElement -> ID .)
    IF              reduce using rule 49 (sumElement -> ID .)
    FOR             reduce using rule 49 (sumElement -> ID .)
    FILTER          reduce using rule 49 (sumElement -> ID .)
    MAP             reduce using rule 49 (sumElement -> ID .)
    REDUCE          reduce using rule 49 (sumElement -> ID .)
    INPUT           reduce using rule 49 (sumElement -> ID .)
    OUTPUT          reduce using rule 49 (sumElement -> ID .)
    COMMENT         reduce using rule 49 (sumElement -> ID .)
    NOT             reduce using rule 49 (sumElement -> ID .)
    NUMBER          reduce using rule 49 (sumElement -> ID .)
    $end            reduce using rule 49 (sumElement -> ID .)


state 6

    (17) statement -> expressionStmt .
    (29) expressionStmt -> expressionStmt . OR andExpression

    ID              reduce using rule 17 (statement -> expressionStmt .)
    IF              reduce using rule 17 (statement -> expressionStmt .)
    FOR             reduce using rule 17 (statement -> expressionStmt .)
    FILTER          reduce using rule 17 (statement -> expressionStmt .)
    MAP             reduce using rule 17 (statement -> expressionStmt .)
    REDUCE          reduce using rule 17 (statement -> expressionStmt .)
    INPUT           reduce using rule 17 (statement -> expressionStmt .)
    OUTPUT          reduce using rule 17 (statement -> expressionStmt .)
    COMMENT         reduce using rule 17 (statement -> expressionStmt .)
    NOT             reduce using rule 17 (statement -> expressionStmt .)
    NUMBER          reduce using rule 17 (statement -> expressionStmt .)
    $end            reduce using rule 17 (statement -> expressionStmt .)
    ELSE            reduce using rule 17 (statement -> expressionStmt .)
    SEMI            reduce using rule 17 (statement -> expressionStmt .)
    OR              shift and go to state 31


state 7

    (18) statement -> conditionalStmt . SEMI

    SEMI            shift and go to state 32


state 8

    (19) statement -> iterationStmt . SEMI

    SEMI            shift and go to state 33


state 9

    (20) statement -> functionalStmt .

    ID              reduce using rule 20 (statement -> functionalStmt .)
    IF              reduce using rule 20 (statement -> functionalStmt .)
    FOR             reduce using rule 20 (statement -> functionalStmt .)
    FILTER          reduce using rule 20 (statement -> functionalStmt .)
    MAP             reduce using rule 20 (statement -> functionalStmt .)
    REDUCE          reduce using rule 20 (statement -> functionalStmt .)
    INPUT           reduce using rule 20 (statement -> functionalStmt .)
    OUTPUT          reduce using rule 20 (statement -> functionalStmt .)
    COMMENT         reduce using rule 20 (statement -> functionalStmt .)
    NOT             reduce using rule 20 (statement -> functionalStmt .)
    NUMBER          reduce using rule 20 (statement -> functionalStmt .)
    $end            reduce using rule 20 (statement -> functionalStmt .)
    ELSE            reduce using rule 20 (statement -> functionalStmt .)
    SEMI            reduce using rule 20 (statement -> functionalStmt .)


state 10

    (21) statement -> inputStmt .

    ID              reduce using rule 21 (statement -> inputStmt .)
    IF              reduce using rule 21 (statement -> inputStmt .)
    FOR             reduce using rule 21 (statement -> inputStmt .)
    FILTER          reduce using rule 21 (statement -> inputStmt .)
    MAP             reduce using rule 21 (statement -> inputStmt .)
    REDUCE          reduce using rule 21 (statement -> inputStmt .)
    INPUT           reduce using rule 21 (statement -> inputStmt .)
    OUTPUT          reduce using rule 21 (statement -> inputStmt .)
    COMMENT         reduce using rule 21 (statement -> inputStmt .)
    NOT             reduce using rule 21 (statement -> inputStmt .)
    NUMBER          reduce using rule 21 (statement -> inputStmt .)
    $end            reduce using rule 21 (statement -> inputStmt .)
    ELSE            reduce using rule 21 (statement -> inputStmt .)
    SEMI            reduce using rule 21 (statement -> inputStmt .)


state 11

    (22) statement -> outputStmt .

    ID              reduce using rule 22 (statement -> outputStmt .)
    IF              reduce using rule 22 (statement -> outputStmt .)
    FOR             reduce using rule 22 (statement -> outputStmt .)
    FILTER          reduce using rule 22 (statement -> outputStmt .)
    MAP             reduce using rule 22 (statement -> outputStmt .)
    REDUCE          reduce using rule 22 (statement -> outputStmt .)
    INPUT           reduce using rule 22 (statement -> outputStmt .)
    OUTPUT          reduce using rule 22 (statement -> outputStmt .)
    COMMENT         reduce using rule 22 (statement -> outputStmt .)
    NOT             reduce using rule 22 (statement -> outputStmt .)
    NUMBER          reduce using rule 22 (statement -> outputStmt .)
    $end            reduce using rule 22 (statement -> outputStmt .)
    ELSE            reduce using rule 22 (statement -> outputStmt .)
    SEMI            reduce using rule 22 (statement -> outputStmt .)


state 12

    (23) statement -> commentStmt .

    ID              reduce using rule 23 (statement -> commentStmt .)
    IF              reduce using rule 23 (statement -> commentStmt .)
    FOR             reduce using rule 23 (statement -> commentStmt .)
    FILTER          reduce using rule 23 (statement -> commentStmt .)
    MAP             reduce using rule 23 (statement -> commentStmt .)
    REDUCE          reduce using rule 23 (statement -> commentStmt .)
    INPUT           reduce using rule 23 (statement -> commentStmt .)
    OUTPUT          reduce using rule 23 (statement -> commentStmt .)
    COMMENT         reduce using rule 23 (statement -> commentStmt .)
    NOT             reduce using rule 23 (statement -> commentStmt .)
    NUMBER          reduce using rule 23 (statement -> commentStmt .)
    $end            reduce using rule 23 (statement -> commentStmt .)
    ELSE            reduce using rule 23 (statement -> commentStmt .)
    SEMI            reduce using rule 23 (statement -> commentStmt .)


state 13

    (30) expressionStmt -> andExpression .
    (31) andExpression -> andExpression . AND unaryRelExpression

    OR              reduce using rule 30 (expressionStmt -> andExpression .)
    ID              reduce using rule 30 (expressionStmt -> andExpression .)
    IF              reduce using rule 30 (expressionStmt -> andExpression .)
    FOR             reduce using rule 30 (expressionStmt -> andExpression .)
    FILTER          reduce using rule 30 (expressionStmt -> andExpression .)
    MAP             reduce using rule 30 (expressionStmt -> andExpression .)
    REDUCE          reduce using rule 30 (expressionStmt -> andExpression .)
    INPUT           reduce using rule 30 (expressionStmt -> andExpression .)
    OUTPUT          reduce using rule 30 (expressionStmt -> andExpression .)
    COMMENT         reduce using rule 30 (expressionStmt -> andExpression .)
    NOT             reduce using rule 30 (expressionStmt -> andExpression .)
    NUMBER          reduce using rule 30 (expressionStmt -> andExpression .)
    $end            reduce using rule 30 (expressionStmt -> andExpression .)
    COL             reduce using rule 30 (expressionStmt -> andExpression .)
    ELSE            reduce using rule 30 (expressionStmt -> andExpression .)
    SEMI            reduce using rule 30 (expressionStmt -> andExpression .)
    COMA            reduce using rule 30 (expressionStmt -> andExpression .)
    AND             shift and go to state 34


state 14

    (27) conditionalStmt -> IF . expressionStmt COL statement
    (28) conditionalStmt -> IF . expressionStmt COL statement ELSE COL statement
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 36
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 35
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 15

    (24) iterationStmt -> FOR . ID IN iterationElement COL statement

    ID              shift and go to state 37


state 16

    (53) functionalStmt -> FILTER . LPAREN lambdaFilter RPAREN

    LPAREN          shift and go to state 38


state 17

    (54) functionalStmt -> MAP . LPAREN lambdaStmt RPAREN

    LPAREN          shift and go to state 39


state 18

    (55) functionalStmt -> REDUCE . LPAREN lambdaStmt RPAREN

    LPAREN          shift and go to state 40


state 19

    (60) inputStmt -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 41


state 20

    (61) outputStmt -> OUTPUT . LPAREN declarationElement RPAREN

    LPAREN          shift and go to state 42


state 21

    (62) commentStmt -> COMMENT .

    ID              reduce using rule 62 (commentStmt -> COMMENT .)
    IF              reduce using rule 62 (commentStmt -> COMMENT .)
    FOR             reduce using rule 62 (commentStmt -> COMMENT .)
    FILTER          reduce using rule 62 (commentStmt -> COMMENT .)
    MAP             reduce using rule 62 (commentStmt -> COMMENT .)
    REDUCE          reduce using rule 62 (commentStmt -> COMMENT .)
    INPUT           reduce using rule 62 (commentStmt -> COMMENT .)
    OUTPUT          reduce using rule 62 (commentStmt -> COMMENT .)
    COMMENT         reduce using rule 62 (commentStmt -> COMMENT .)
    NOT             reduce using rule 62 (commentStmt -> COMMENT .)
    NUMBER          reduce using rule 62 (commentStmt -> COMMENT .)
    $end            reduce using rule 62 (commentStmt -> COMMENT .)
    ELSE            reduce using rule 62 (commentStmt -> COMMENT .)
    SEMI            reduce using rule 62 (commentStmt -> COMMENT .)


state 22

    (32) andExpression -> unaryRelExpression .

    AND             reduce using rule 32 (andExpression -> unaryRelExpression .)
    OR              reduce using rule 32 (andExpression -> unaryRelExpression .)
    ID              reduce using rule 32 (andExpression -> unaryRelExpression .)
    IF              reduce using rule 32 (andExpression -> unaryRelExpression .)
    FOR             reduce using rule 32 (andExpression -> unaryRelExpression .)
    FILTER          reduce using rule 32 (andExpression -> unaryRelExpression .)
    MAP             reduce using rule 32 (andExpression -> unaryRelExpression .)
    REDUCE          reduce using rule 32 (andExpression -> unaryRelExpression .)
    INPUT           reduce using rule 32 (andExpression -> unaryRelExpression .)
    OUTPUT          reduce using rule 32 (andExpression -> unaryRelExpression .)
    COMMENT         reduce using rule 32 (andExpression -> unaryRelExpression .)
    NOT             reduce using rule 32 (andExpression -> unaryRelExpression .)
    NUMBER          reduce using rule 32 (andExpression -> unaryRelExpression .)
    $end            reduce using rule 32 (andExpression -> unaryRelExpression .)
    COL             reduce using rule 32 (andExpression -> unaryRelExpression .)
    ELSE            reduce using rule 32 (andExpression -> unaryRelExpression .)
    SEMI            reduce using rule 32 (andExpression -> unaryRelExpression .)
    COMA            reduce using rule 32 (andExpression -> unaryRelExpression .)


state 23

    (33) unaryRelExpression -> NOT . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 36
    NUMBER          shift and go to state 28

    unaryRelExpression             shift and go to state 43
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 24

    (34) unaryRelExpression -> relExpression .

    AND             reduce using rule 34 (unaryRelExpression -> relExpression .)
    OR              reduce using rule 34 (unaryRelExpression -> relExpression .)
    ID              reduce using rule 34 (unaryRelExpression -> relExpression .)
    IF              reduce using rule 34 (unaryRelExpression -> relExpression .)
    FOR             reduce using rule 34 (unaryRelExpression -> relExpression .)
    FILTER          reduce using rule 34 (unaryRelExpression -> relExpression .)
    MAP             reduce using rule 34 (unaryRelExpression -> relExpression .)
    REDUCE          reduce using rule 34 (unaryRelExpression -> relExpression .)
    INPUT           reduce using rule 34 (unaryRelExpression -> relExpression .)
    OUTPUT          reduce using rule 34 (unaryRelExpression -> relExpression .)
    COMMENT         reduce using rule 34 (unaryRelExpression -> relExpression .)
    NOT             reduce using rule 34 (unaryRelExpression -> relExpression .)
    NUMBER          reduce using rule 34 (unaryRelExpression -> relExpression .)
    $end            reduce using rule 34 (unaryRelExpression -> relExpression .)
    COL             reduce using rule 34 (unaryRelExpression -> relExpression .)
    ELSE            reduce using rule 34 (unaryRelExpression -> relExpression .)
    SEMI            reduce using rule 34 (unaryRelExpression -> relExpression .)
    COMA            reduce using rule 34 (unaryRelExpression -> relExpression .)


state 25

    (35) relExpression -> sumExpression . relop sumExpression
    (36) relExpression -> sumExpression .
    (43) sumExpression -> sumExpression . sumop term
    (37) relop -> . LE
    (38) relop -> . LT
    (39) relop -> . GT
    (40) relop -> . GE
    (41) relop -> . EQ
    (42) relop -> . NEQ
    (45) sumop -> . PLUS
    (46) sumop -> . MINUS

    AND             reduce using rule 36 (relExpression -> sumExpression .)
    OR              reduce using rule 36 (relExpression -> sumExpression .)
    ID              reduce using rule 36 (relExpression -> sumExpression .)
    IF              reduce using rule 36 (relExpression -> sumExpression .)
    FOR             reduce using rule 36 (relExpression -> sumExpression .)
    FILTER          reduce using rule 36 (relExpression -> sumExpression .)
    MAP             reduce using rule 36 (relExpression -> sumExpression .)
    REDUCE          reduce using rule 36 (relExpression -> sumExpression .)
    INPUT           reduce using rule 36 (relExpression -> sumExpression .)
    OUTPUT          reduce using rule 36 (relExpression -> sumExpression .)
    COMMENT         reduce using rule 36 (relExpression -> sumExpression .)
    NOT             reduce using rule 36 (relExpression -> sumExpression .)
    NUMBER          reduce using rule 36 (relExpression -> sumExpression .)
    $end            reduce using rule 36 (relExpression -> sumExpression .)
    COL             reduce using rule 36 (relExpression -> sumExpression .)
    ELSE            reduce using rule 36 (relExpression -> sumExpression .)
    SEMI            reduce using rule 36 (relExpression -> sumExpression .)
    COMA            reduce using rule 36 (relExpression -> sumExpression .)
    LE              shift and go to state 46
    LT              shift and go to state 47
    GT              shift and go to state 48
    GE              shift and go to state 49
    EQ              shift and go to state 50
    NEQ             shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53

    relop                          shift and go to state 44
    sumop                          shift and go to state 45

state 26

    (44) sumExpression -> term .
    (47) term -> term . mulop sumElement
    (51) mulop -> . PROD
    (52) mulop -> . DIV

    LE              reduce using rule 44 (sumExpression -> term .)
    LT              reduce using rule 44 (sumExpression -> term .)
    GT              reduce using rule 44 (sumExpression -> term .)
    GE              reduce using rule 44 (sumExpression -> term .)
    EQ              reduce using rule 44 (sumExpression -> term .)
    NEQ             reduce using rule 44 (sumExpression -> term .)
    PLUS            reduce using rule 44 (sumExpression -> term .)
    MINUS           reduce using rule 44 (sumExpression -> term .)
    AND             reduce using rule 44 (sumExpression -> term .)
    OR              reduce using rule 44 (sumExpression -> term .)
    ID              reduce using rule 44 (sumExpression -> term .)
    IF              reduce using rule 44 (sumExpression -> term .)
    FOR             reduce using rule 44 (sumExpression -> term .)
    FILTER          reduce using rule 44 (sumExpression -> term .)
    MAP             reduce using rule 44 (sumExpression -> term .)
    REDUCE          reduce using rule 44 (sumExpression -> term .)
    INPUT           reduce using rule 44 (sumExpression -> term .)
    OUTPUT          reduce using rule 44 (sumExpression -> term .)
    COMMENT         reduce using rule 44 (sumExpression -> term .)
    NOT             reduce using rule 44 (sumExpression -> term .)
    NUMBER          reduce using rule 44 (sumExpression -> term .)
    $end            reduce using rule 44 (sumExpression -> term .)
    COL             reduce using rule 44 (sumExpression -> term .)
    ELSE            reduce using rule 44 (sumExpression -> term .)
    SEMI            reduce using rule 44 (sumExpression -> term .)
    COMA            reduce using rule 44 (sumExpression -> term .)
    PROD            shift and go to state 55
    DIV             shift and go to state 56

    mulop                          shift and go to state 54

state 27

    (48) term -> sumElement .

    PROD            reduce using rule 48 (term -> sumElement .)
    DIV             reduce using rule 48 (term -> sumElement .)
    LE              reduce using rule 48 (term -> sumElement .)
    LT              reduce using rule 48 (term -> sumElement .)
    GT              reduce using rule 48 (term -> sumElement .)
    GE              reduce using rule 48 (term -> sumElement .)
    EQ              reduce using rule 48 (term -> sumElement .)
    NEQ             reduce using rule 48 (term -> sumElement .)
    PLUS            reduce using rule 48 (term -> sumElement .)
    MINUS           reduce using rule 48 (term -> sumElement .)
    AND             reduce using rule 48 (term -> sumElement .)
    OR              reduce using rule 48 (term -> sumElement .)
    ID              reduce using rule 48 (term -> sumElement .)
    IF              reduce using rule 48 (term -> sumElement .)
    FOR             reduce using rule 48 (term -> sumElement .)
    FILTER          reduce using rule 48 (term -> sumElement .)
    MAP             reduce using rule 48 (term -> sumElement .)
    REDUCE          reduce using rule 48 (term -> sumElement .)
    INPUT           reduce using rule 48 (term -> sumElement .)
    OUTPUT          reduce using rule 48 (term -> sumElement .)
    COMMENT         reduce using rule 48 (term -> sumElement .)
    NOT             reduce using rule 48 (term -> sumElement .)
    NUMBER          reduce using rule 48 (term -> sumElement .)
    $end            reduce using rule 48 (term -> sumElement .)
    COL             reduce using rule 48 (term -> sumElement .)
    ELSE            reduce using rule 48 (term -> sumElement .)
    SEMI            reduce using rule 48 (term -> sumElement .)
    COMA            reduce using rule 48 (term -> sumElement .)


state 28

    (50) sumElement -> NUMBER .

    PROD            reduce using rule 50 (sumElement -> NUMBER .)
    DIV             reduce using rule 50 (sumElement -> NUMBER .)
    LE              reduce using rule 50 (sumElement -> NUMBER .)
    LT              reduce using rule 50 (sumElement -> NUMBER .)
    GT              reduce using rule 50 (sumElement -> NUMBER .)
    GE              reduce using rule 50 (sumElement -> NUMBER .)
    EQ              reduce using rule 50 (sumElement -> NUMBER .)
    NEQ             reduce using rule 50 (sumElement -> NUMBER .)
    PLUS            reduce using rule 50 (sumElement -> NUMBER .)
    MINUS           reduce using rule 50 (sumElement -> NUMBER .)
    AND             reduce using rule 50 (sumElement -> NUMBER .)
    OR              reduce using rule 50 (sumElement -> NUMBER .)
    ID              reduce using rule 50 (sumElement -> NUMBER .)
    IF              reduce using rule 50 (sumElement -> NUMBER .)
    FOR             reduce using rule 50 (sumElement -> NUMBER .)
    FILTER          reduce using rule 50 (sumElement -> NUMBER .)
    MAP             reduce using rule 50 (sumElement -> NUMBER .)
    REDUCE          reduce using rule 50 (sumElement -> NUMBER .)
    INPUT           reduce using rule 50 (sumElement -> NUMBER .)
    OUTPUT          reduce using rule 50 (sumElement -> NUMBER .)
    COMMENT         reduce using rule 50 (sumElement -> NUMBER .)
    NOT             reduce using rule 50 (sumElement -> NUMBER .)
    NUMBER          reduce using rule 50 (sumElement -> NUMBER .)
    $end            reduce using rule 50 (sumElement -> NUMBER .)
    COL             reduce using rule 50 (sumElement -> NUMBER .)
    ELSE            reduce using rule 50 (sumElement -> NUMBER .)
    SEMI            reduce using rule 50 (sumElement -> NUMBER .)
    COMA            reduce using rule 50 (sumElement -> NUMBER .)


state 29

    (1) declarationList -> declarationList declaration .

    ID              reduce using rule 1 (declarationList -> declarationList declaration .)
    IF              reduce using rule 1 (declarationList -> declarationList declaration .)
    FOR             reduce using rule 1 (declarationList -> declarationList declaration .)
    FILTER          reduce using rule 1 (declarationList -> declarationList declaration .)
    MAP             reduce using rule 1 (declarationList -> declarationList declaration .)
    REDUCE          reduce using rule 1 (declarationList -> declarationList declaration .)
    INPUT           reduce using rule 1 (declarationList -> declarationList declaration .)
    OUTPUT          reduce using rule 1 (declarationList -> declarationList declaration .)
    COMMENT         reduce using rule 1 (declarationList -> declarationList declaration .)
    NOT             reduce using rule 1 (declarationList -> declarationList declaration .)
    NUMBER          reduce using rule 1 (declarationList -> declarationList declaration .)
    $end            reduce using rule 1 (declarationList -> declarationList declaration .)


state 30

    (5) varDeclaration -> ID EQUALS . declarationElement
    (6) declarationElement -> . list
    (7) declarationElement -> . STRING
    (8) declarationElement -> . NUMBER
    (9) declarationElement -> . BOOLEAN
    (10) list -> . LSQUARE listElements RSQUARE

    STRING          shift and go to state 59
    NUMBER          shift and go to state 60
    BOOLEAN         shift and go to state 61
    LSQUARE         shift and go to state 62

    declarationElement             shift and go to state 57
    list                           shift and go to state 58

state 31

    (29) expressionStmt -> expressionStmt OR . andExpression
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 36
    NUMBER          shift and go to state 28

    andExpression                  shift and go to state 63
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 32

    (18) statement -> conditionalStmt SEMI .

    ID              reduce using rule 18 (statement -> conditionalStmt SEMI .)
    IF              reduce using rule 18 (statement -> conditionalStmt SEMI .)
    FOR             reduce using rule 18 (statement -> conditionalStmt SEMI .)
    FILTER          reduce using rule 18 (statement -> conditionalStmt SEMI .)
    MAP             reduce using rule 18 (statement -> conditionalStmt SEMI .)
    REDUCE          reduce using rule 18 (statement -> conditionalStmt SEMI .)
    INPUT           reduce using rule 18 (statement -> conditionalStmt SEMI .)
    OUTPUT          reduce using rule 18 (statement -> conditionalStmt SEMI .)
    COMMENT         reduce using rule 18 (statement -> conditionalStmt SEMI .)
    NOT             reduce using rule 18 (statement -> conditionalStmt SEMI .)
    NUMBER          reduce using rule 18 (statement -> conditionalStmt SEMI .)
    $end            reduce using rule 18 (statement -> conditionalStmt SEMI .)
    ELSE            reduce using rule 18 (statement -> conditionalStmt SEMI .)
    SEMI            reduce using rule 18 (statement -> conditionalStmt SEMI .)


state 33

    (19) statement -> iterationStmt SEMI .

    ID              reduce using rule 19 (statement -> iterationStmt SEMI .)
    IF              reduce using rule 19 (statement -> iterationStmt SEMI .)
    FOR             reduce using rule 19 (statement -> iterationStmt SEMI .)
    FILTER          reduce using rule 19 (statement -> iterationStmt SEMI .)
    MAP             reduce using rule 19 (statement -> iterationStmt SEMI .)
    REDUCE          reduce using rule 19 (statement -> iterationStmt SEMI .)
    INPUT           reduce using rule 19 (statement -> iterationStmt SEMI .)
    OUTPUT          reduce using rule 19 (statement -> iterationStmt SEMI .)
    COMMENT         reduce using rule 19 (statement -> iterationStmt SEMI .)
    NOT             reduce using rule 19 (statement -> iterationStmt SEMI .)
    NUMBER          reduce using rule 19 (statement -> iterationStmt SEMI .)
    $end            reduce using rule 19 (statement -> iterationStmt SEMI .)
    ELSE            reduce using rule 19 (statement -> iterationStmt SEMI .)
    SEMI            reduce using rule 19 (statement -> iterationStmt SEMI .)


state 34

    (31) andExpression -> andExpression AND . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 36
    NUMBER          shift and go to state 28

    unaryRelExpression             shift and go to state 64
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 35

    (27) conditionalStmt -> IF expressionStmt . COL statement
    (28) conditionalStmt -> IF expressionStmt . COL statement ELSE COL statement
    (29) expressionStmt -> expressionStmt . OR andExpression

    COL             shift and go to state 65
    OR              shift and go to state 31


state 36

    (49) sumElement -> ID .

    PROD            reduce using rule 49 (sumElement -> ID .)
    DIV             reduce using rule 49 (sumElement -> ID .)
    LE              reduce using rule 49 (sumElement -> ID .)
    LT              reduce using rule 49 (sumElement -> ID .)
    GT              reduce using rule 49 (sumElement -> ID .)
    GE              reduce using rule 49 (sumElement -> ID .)
    EQ              reduce using rule 49 (sumElement -> ID .)
    NEQ             reduce using rule 49 (sumElement -> ID .)
    PLUS            reduce using rule 49 (sumElement -> ID .)
    MINUS           reduce using rule 49 (sumElement -> ID .)
    AND             reduce using rule 49 (sumElement -> ID .)
    COL             reduce using rule 49 (sumElement -> ID .)
    OR              reduce using rule 49 (sumElement -> ID .)
    ID              reduce using rule 49 (sumElement -> ID .)
    IF              reduce using rule 49 (sumElement -> ID .)
    FOR             reduce using rule 49 (sumElement -> ID .)
    FILTER          reduce using rule 49 (sumElement -> ID .)
    MAP             reduce using rule 49 (sumElement -> ID .)
    REDUCE          reduce using rule 49 (sumElement -> ID .)
    INPUT           reduce using rule 49 (sumElement -> ID .)
    OUTPUT          reduce using rule 49 (sumElement -> ID .)
    COMMENT         reduce using rule 49 (sumElement -> ID .)
    NOT             reduce using rule 49 (sumElement -> ID .)
    NUMBER          reduce using rule 49 (sumElement -> ID .)
    $end            reduce using rule 49 (sumElement -> ID .)
    ELSE            reduce using rule 49 (sumElement -> ID .)
    SEMI            reduce using rule 49 (sumElement -> ID .)
    COMA            reduce using rule 49 (sumElement -> ID .)


state 37

    (24) iterationStmt -> FOR ID . IN iterationElement COL statement

    IN              shift and go to state 66


state 38

    (53) functionalStmt -> FILTER LPAREN . lambdaFilter RPAREN
    (59) lambdaFilter -> . LAMBDA lambdaElement COL expressionStmt COMA iterationElement

    LAMBDA          shift and go to state 68

    lambdaFilter                   shift and go to state 67

state 39

    (54) functionalStmt -> MAP LPAREN . lambdaStmt RPAREN
    (56) lambdaStmt -> . LAMBDA lambdaElement COL sumExpression COMA iterationElement

    LAMBDA          shift and go to state 70

    lambdaStmt                     shift and go to state 69

state 40

    (55) functionalStmt -> REDUCE LPAREN . lambdaStmt RPAREN
    (56) lambdaStmt -> . LAMBDA lambdaElement COL sumExpression COMA iterationElement

    LAMBDA          shift and go to state 70

    lambdaStmt                     shift and go to state 71

state 41

    (60) inputStmt -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 72


state 42

    (61) outputStmt -> OUTPUT LPAREN . declarationElement RPAREN
    (6) declarationElement -> . list
    (7) declarationElement -> . STRING
    (8) declarationElement -> . NUMBER
    (9) declarationElement -> . BOOLEAN
    (10) list -> . LSQUARE listElements RSQUARE

    STRING          shift and go to state 59
    NUMBER          shift and go to state 60
    BOOLEAN         shift and go to state 61
    LSQUARE         shift and go to state 62

    declarationElement             shift and go to state 73
    list                           shift and go to state 58

state 43

    (33) unaryRelExpression -> NOT unaryRelExpression .

    AND             reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    OR              reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    ID              reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    IF              reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    FOR             reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    FILTER          reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    MAP             reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    REDUCE          reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    INPUT           reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    OUTPUT          reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    COMMENT         reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    NOT             reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    NUMBER          reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    $end            reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    COL             reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    ELSE            reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    SEMI            reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    COMA            reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)


state 44

    (35) relExpression -> sumExpression relop . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    ID              shift and go to state 36
    NUMBER          shift and go to state 28

    sumExpression                  shift and go to state 74
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 45

    (43) sumExpression -> sumExpression sumop . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    ID              shift and go to state 36
    NUMBER          shift and go to state 28

    term                           shift and go to state 75
    sumElement                     shift and go to state 27

state 46

    (37) relop -> LE .

    ID              reduce using rule 37 (relop -> LE .)
    NUMBER          reduce using rule 37 (relop -> LE .)


state 47

    (38) relop -> LT .

    ID              reduce using rule 38 (relop -> LT .)
    NUMBER          reduce using rule 38 (relop -> LT .)


state 48

    (39) relop -> GT .

    ID              reduce using rule 39 (relop -> GT .)
    NUMBER          reduce using rule 39 (relop -> GT .)


state 49

    (40) relop -> GE .

    ID              reduce using rule 40 (relop -> GE .)
    NUMBER          reduce using rule 40 (relop -> GE .)


state 50

    (41) relop -> EQ .

    ID              reduce using rule 41 (relop -> EQ .)
    NUMBER          reduce using rule 41 (relop -> EQ .)


state 51

    (42) relop -> NEQ .

    ID              reduce using rule 42 (relop -> NEQ .)
    NUMBER          reduce using rule 42 (relop -> NEQ .)


state 52

    (45) sumop -> PLUS .

    ID              reduce using rule 45 (sumop -> PLUS .)
    NUMBER          reduce using rule 45 (sumop -> PLUS .)


state 53

    (46) sumop -> MINUS .

    ID              reduce using rule 46 (sumop -> MINUS .)
    NUMBER          reduce using rule 46 (sumop -> MINUS .)


state 54

    (47) term -> term mulop . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    ID              shift and go to state 36
    NUMBER          shift and go to state 28

    sumElement                     shift and go to state 76

state 55

    (51) mulop -> PROD .

    ID              reduce using rule 51 (mulop -> PROD .)
    NUMBER          reduce using rule 51 (mulop -> PROD .)


state 56

    (52) mulop -> DIV .

    ID              reduce using rule 52 (mulop -> DIV .)
    NUMBER          reduce using rule 52 (mulop -> DIV .)


state 57

    (5) varDeclaration -> ID EQUALS declarationElement .

    ID              reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    IF              reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    FOR             reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    FILTER          reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    MAP             reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    REDUCE          reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    INPUT           reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    OUTPUT          reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    COMMENT         reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    NOT             reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    NUMBER          reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    $end            reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)


state 58

    (6) declarationElement -> list .

    ID              reduce using rule 6 (declarationElement -> list .)
    IF              reduce using rule 6 (declarationElement -> list .)
    FOR             reduce using rule 6 (declarationElement -> list .)
    FILTER          reduce using rule 6 (declarationElement -> list .)
    MAP             reduce using rule 6 (declarationElement -> list .)
    REDUCE          reduce using rule 6 (declarationElement -> list .)
    INPUT           reduce using rule 6 (declarationElement -> list .)
    OUTPUT          reduce using rule 6 (declarationElement -> list .)
    COMMENT         reduce using rule 6 (declarationElement -> list .)
    NOT             reduce using rule 6 (declarationElement -> list .)
    NUMBER          reduce using rule 6 (declarationElement -> list .)
    $end            reduce using rule 6 (declarationElement -> list .)
    RPAREN          reduce using rule 6 (declarationElement -> list .)


state 59

    (7) declarationElement -> STRING .

    ID              reduce using rule 7 (declarationElement -> STRING .)
    IF              reduce using rule 7 (declarationElement -> STRING .)
    FOR             reduce using rule 7 (declarationElement -> STRING .)
    FILTER          reduce using rule 7 (declarationElement -> STRING .)
    MAP             reduce using rule 7 (declarationElement -> STRING .)
    REDUCE          reduce using rule 7 (declarationElement -> STRING .)
    INPUT           reduce using rule 7 (declarationElement -> STRING .)
    OUTPUT          reduce using rule 7 (declarationElement -> STRING .)
    COMMENT         reduce using rule 7 (declarationElement -> STRING .)
    NOT             reduce using rule 7 (declarationElement -> STRING .)
    NUMBER          reduce using rule 7 (declarationElement -> STRING .)
    $end            reduce using rule 7 (declarationElement -> STRING .)
    RPAREN          reduce using rule 7 (declarationElement -> STRING .)


state 60

    (8) declarationElement -> NUMBER .

    ID              reduce using rule 8 (declarationElement -> NUMBER .)
    IF              reduce using rule 8 (declarationElement -> NUMBER .)
    FOR             reduce using rule 8 (declarationElement -> NUMBER .)
    FILTER          reduce using rule 8 (declarationElement -> NUMBER .)
    MAP             reduce using rule 8 (declarationElement -> NUMBER .)
    REDUCE          reduce using rule 8 (declarationElement -> NUMBER .)
    INPUT           reduce using rule 8 (declarationElement -> NUMBER .)
    OUTPUT          reduce using rule 8 (declarationElement -> NUMBER .)
    COMMENT         reduce using rule 8 (declarationElement -> NUMBER .)
    NOT             reduce using rule 8 (declarationElement -> NUMBER .)
    NUMBER          reduce using rule 8 (declarationElement -> NUMBER .)
    $end            reduce using rule 8 (declarationElement -> NUMBER .)
    RPAREN          reduce using rule 8 (declarationElement -> NUMBER .)


state 61

    (9) declarationElement -> BOOLEAN .

    ID              reduce using rule 9 (declarationElement -> BOOLEAN .)
    IF              reduce using rule 9 (declarationElement -> BOOLEAN .)
    FOR             reduce using rule 9 (declarationElement -> BOOLEAN .)
    FILTER          reduce using rule 9 (declarationElement -> BOOLEAN .)
    MAP             reduce using rule 9 (declarationElement -> BOOLEAN .)
    REDUCE          reduce using rule 9 (declarationElement -> BOOLEAN .)
    INPUT           reduce using rule 9 (declarationElement -> BOOLEAN .)
    OUTPUT          reduce using rule 9 (declarationElement -> BOOLEAN .)
    COMMENT         reduce using rule 9 (declarationElement -> BOOLEAN .)
    NOT             reduce using rule 9 (declarationElement -> BOOLEAN .)
    NUMBER          reduce using rule 9 (declarationElement -> BOOLEAN .)
    $end            reduce using rule 9 (declarationElement -> BOOLEAN .)
    RPAREN          reduce using rule 9 (declarationElement -> BOOLEAN .)


state 62

    (10) list -> LSQUARE . listElements RSQUARE
    (11) listElements -> . NUMBER
    (12) listElements -> . NUMBER OP_NUMBER
    (13) listElements -> . STRING
    (14) listElements -> . STRING OP_STRING
    (15) listElements -> . BOOLEAN
    (16) listElements -> . BOOLEAN OP_BOOLEAN

    NUMBER          shift and go to state 78
    STRING          shift and go to state 79
    BOOLEAN         shift and go to state 80

    listElements                   shift and go to state 77

state 63

    (29) expressionStmt -> expressionStmt OR andExpression .
    (31) andExpression -> andExpression . AND unaryRelExpression

    OR              reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    ID              reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    IF              reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    FOR             reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    FILTER          reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    MAP             reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    REDUCE          reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    INPUT           reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    OUTPUT          reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    COMMENT         reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    NOT             reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    NUMBER          reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    $end            reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    COL             reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    ELSE            reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    SEMI            reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    COMA            reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    AND             shift and go to state 34


state 64

    (31) andExpression -> andExpression AND unaryRelExpression .

    AND             reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    OR              reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    ID              reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    IF              reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    FOR             reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    FILTER          reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    MAP             reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    REDUCE          reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    INPUT           reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    OUTPUT          reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    COMMENT         reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    NOT             reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    NUMBER          reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    $end            reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    COL             reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    ELSE            reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    SEMI            reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    COMA            reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)


state 65

    (27) conditionalStmt -> IF expressionStmt COL . statement
    (28) conditionalStmt -> IF expressionStmt COL . statement ELSE COL statement
    (17) statement -> . expressionStmt
    (18) statement -> . conditionalStmt SEMI
    (19) statement -> . iterationStmt SEMI
    (20) statement -> . functionalStmt
    (21) statement -> . inputStmt
    (22) statement -> . outputStmt
    (23) statement -> . commentStmt
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (27) conditionalStmt -> . IF expressionStmt COL statement
    (28) conditionalStmt -> . IF expressionStmt COL statement ELSE COL statement
    (24) iterationStmt -> . FOR ID IN iterationElement COL statement
    (53) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (54) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (55) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    ID              shift and go to state 36
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 6
    statement                      shift and go to state 81
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 66

    (24) iterationStmt -> FOR ID IN . iterationElement COL statement
    (25) iterationElement -> . list
    (26) iterationElement -> . ID
    (10) list -> . LSQUARE listElements RSQUARE

    ID              shift and go to state 82
    LSQUARE         shift and go to state 62

    iterationElement               shift and go to state 83
    list                           shift and go to state 84

state 67

    (53) functionalStmt -> FILTER LPAREN lambdaFilter . RPAREN

    RPAREN          shift and go to state 85


state 68

    (59) lambdaFilter -> LAMBDA . lambdaElement COL expressionStmt COMA iterationElement
    (57) lambdaElement -> . ID
    (58) lambdaElement -> . ID OP_ID

    ID              shift and go to state 87

    lambdaElement                  shift and go to state 86

state 69

    (54) functionalStmt -> MAP LPAREN lambdaStmt . RPAREN

    RPAREN          shift and go to state 88


state 70

    (56) lambdaStmt -> LAMBDA . lambdaElement COL sumExpression COMA iterationElement
    (57) lambdaElement -> . ID
    (58) lambdaElement -> . ID OP_ID

    ID              shift and go to state 87

    lambdaElement                  shift and go to state 89

state 71

    (55) functionalStmt -> REDUCE LPAREN lambdaStmt . RPAREN

    RPAREN          shift and go to state 90


state 72

    (60) inputStmt -> INPUT LPAREN RPAREN .

    ID              reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)
    IF              reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)
    FOR             reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)
    FILTER          reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)
    MAP             reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)
    REDUCE          reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)
    INPUT           reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)
    OUTPUT          reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)
    COMMENT         reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)
    NOT             reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)
    NUMBER          reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)
    $end            reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)
    ELSE            reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)
    SEMI            reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)


state 73

    (61) outputStmt -> OUTPUT LPAREN declarationElement . RPAREN

    RPAREN          shift and go to state 91


state 74

    (35) relExpression -> sumExpression relop sumExpression .
    (43) sumExpression -> sumExpression . sumop term
    (45) sumop -> . PLUS
    (46) sumop -> . MINUS

    AND             reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    OR              reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    ID              reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    IF              reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    FOR             reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    FILTER          reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    MAP             reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    REDUCE          reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    INPUT           reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    OUTPUT          reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    COMMENT         reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    NOT             reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    NUMBER          reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    $end            reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    COL             reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    ELSE            reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    SEMI            reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    COMA            reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53

    sumop                          shift and go to state 45

state 75

    (43) sumExpression -> sumExpression sumop term .
    (47) term -> term . mulop sumElement
    (51) mulop -> . PROD
    (52) mulop -> . DIV

    LE              reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    LT              reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    GT              reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    GE              reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    EQ              reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    NEQ             reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    PLUS            reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    MINUS           reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    AND             reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    OR              reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    ID              reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    IF              reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    FOR             reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    FILTER          reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    MAP             reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    REDUCE          reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    INPUT           reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    OUTPUT          reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    COMMENT         reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    NOT             reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    NUMBER          reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    $end            reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    COL             reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    ELSE            reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    SEMI            reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    COMA            reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    PROD            shift and go to state 55
    DIV             shift and go to state 56

    mulop                          shift and go to state 54

state 76

    (47) term -> term mulop sumElement .

    PROD            reduce using rule 47 (term -> term mulop sumElement .)
    DIV             reduce using rule 47 (term -> term mulop sumElement .)
    LE              reduce using rule 47 (term -> term mulop sumElement .)
    LT              reduce using rule 47 (term -> term mulop sumElement .)
    GT              reduce using rule 47 (term -> term mulop sumElement .)
    GE              reduce using rule 47 (term -> term mulop sumElement .)
    EQ              reduce using rule 47 (term -> term mulop sumElement .)
    NEQ             reduce using rule 47 (term -> term mulop sumElement .)
    PLUS            reduce using rule 47 (term -> term mulop sumElement .)
    MINUS           reduce using rule 47 (term -> term mulop sumElement .)
    AND             reduce using rule 47 (term -> term mulop sumElement .)
    OR              reduce using rule 47 (term -> term mulop sumElement .)
    ID              reduce using rule 47 (term -> term mulop sumElement .)
    IF              reduce using rule 47 (term -> term mulop sumElement .)
    FOR             reduce using rule 47 (term -> term mulop sumElement .)
    FILTER          reduce using rule 47 (term -> term mulop sumElement .)
    MAP             reduce using rule 47 (term -> term mulop sumElement .)
    REDUCE          reduce using rule 47 (term -> term mulop sumElement .)
    INPUT           reduce using rule 47 (term -> term mulop sumElement .)
    OUTPUT          reduce using rule 47 (term -> term mulop sumElement .)
    COMMENT         reduce using rule 47 (term -> term mulop sumElement .)
    NOT             reduce using rule 47 (term -> term mulop sumElement .)
    NUMBER          reduce using rule 47 (term -> term mulop sumElement .)
    $end            reduce using rule 47 (term -> term mulop sumElement .)
    COL             reduce using rule 47 (term -> term mulop sumElement .)
    ELSE            reduce using rule 47 (term -> term mulop sumElement .)
    SEMI            reduce using rule 47 (term -> term mulop sumElement .)
    COMA            reduce using rule 47 (term -> term mulop sumElement .)


state 77

    (10) list -> LSQUARE listElements . RSQUARE

    RSQUARE         shift and go to state 92


state 78

    (11) listElements -> NUMBER .
    (12) listElements -> NUMBER . OP_NUMBER

    RSQUARE         reduce using rule 11 (listElements -> NUMBER .)
    OP_NUMBER       shift and go to state 93


state 79

    (13) listElements -> STRING .
    (14) listElements -> STRING . OP_STRING

    RSQUARE         reduce using rule 13 (listElements -> STRING .)
    OP_STRING       shift and go to state 94


state 80

    (15) listElements -> BOOLEAN .
    (16) listElements -> BOOLEAN . OP_BOOLEAN

    RSQUARE         reduce using rule 15 (listElements -> BOOLEAN .)
    OP_BOOLEAN      shift and go to state 95


state 81

    (27) conditionalStmt -> IF expressionStmt COL statement .
    (28) conditionalStmt -> IF expressionStmt COL statement . ELSE COL statement

    SEMI            reduce using rule 27 (conditionalStmt -> IF expressionStmt COL statement .)
    ELSE            shift and go to state 96


state 82

    (26) iterationElement -> ID .

    COL             reduce using rule 26 (iterationElement -> ID .)
    RPAREN          reduce using rule 26 (iterationElement -> ID .)


state 83

    (24) iterationStmt -> FOR ID IN iterationElement . COL statement

    COL             shift and go to state 97


state 84

    (25) iterationElement -> list .

    COL             reduce using rule 25 (iterationElement -> list .)
    RPAREN          reduce using rule 25 (iterationElement -> list .)


state 85

    (53) functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .

    ID              reduce using rule 53 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)
    IF              reduce using rule 53 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)
    FOR             reduce using rule 53 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)
    FILTER          reduce using rule 53 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)
    MAP             reduce using rule 53 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)
    REDUCE          reduce using rule 53 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)
    INPUT           reduce using rule 53 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)
    OUTPUT          reduce using rule 53 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)
    COMMENT         reduce using rule 53 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)
    NOT             reduce using rule 53 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)
    NUMBER          reduce using rule 53 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)
    $end            reduce using rule 53 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)
    ELSE            reduce using rule 53 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)
    SEMI            reduce using rule 53 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)


state 86

    (59) lambdaFilter -> LAMBDA lambdaElement . COL expressionStmt COMA iterationElement

    COL             shift and go to state 98


state 87

    (57) lambdaElement -> ID .
    (58) lambdaElement -> ID . OP_ID

    COL             reduce using rule 57 (lambdaElement -> ID .)
    OP_ID           shift and go to state 99


state 88

    (54) functionalStmt -> MAP LPAREN lambdaStmt RPAREN .

    ID              reduce using rule 54 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)
    IF              reduce using rule 54 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)
    FOR             reduce using rule 54 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)
    FILTER          reduce using rule 54 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)
    MAP             reduce using rule 54 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)
    REDUCE          reduce using rule 54 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)
    INPUT           reduce using rule 54 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)
    OUTPUT          reduce using rule 54 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)
    COMMENT         reduce using rule 54 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)
    NOT             reduce using rule 54 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)
    NUMBER          reduce using rule 54 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)
    $end            reduce using rule 54 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)
    ELSE            reduce using rule 54 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)
    SEMI            reduce using rule 54 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)


state 89

    (56) lambdaStmt -> LAMBDA lambdaElement . COL sumExpression COMA iterationElement

    COL             shift and go to state 100


state 90

    (55) functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .

    ID              reduce using rule 55 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)
    IF              reduce using rule 55 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)
    FOR             reduce using rule 55 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)
    FILTER          reduce using rule 55 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)
    MAP             reduce using rule 55 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)
    REDUCE          reduce using rule 55 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)
    INPUT           reduce using rule 55 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)
    OUTPUT          reduce using rule 55 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)
    COMMENT         reduce using rule 55 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)
    NOT             reduce using rule 55 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)
    NUMBER          reduce using rule 55 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)
    $end            reduce using rule 55 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)
    ELSE            reduce using rule 55 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)
    SEMI            reduce using rule 55 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)


state 91

    (61) outputStmt -> OUTPUT LPAREN declarationElement RPAREN .

    ID              reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)
    IF              reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)
    FOR             reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)
    FILTER          reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)
    MAP             reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)
    REDUCE          reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)
    INPUT           reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)
    OUTPUT          reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)
    COMMENT         reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)
    NOT             reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)
    NUMBER          reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)
    $end            reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)
    ELSE            reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)
    SEMI            reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)


state 92

    (10) list -> LSQUARE listElements RSQUARE .

    ID              reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    IF              reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    FOR             reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    FILTER          reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    MAP             reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    REDUCE          reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    INPUT           reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    OUTPUT          reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    COMMENT         reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    NOT             reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    NUMBER          reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    $end            reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    RPAREN          reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    COL             reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)


state 93

    (12) listElements -> NUMBER OP_NUMBER .

    RSQUARE         reduce using rule 12 (listElements -> NUMBER OP_NUMBER .)


state 94

    (14) listElements -> STRING OP_STRING .

    RSQUARE         reduce using rule 14 (listElements -> STRING OP_STRING .)


state 95

    (16) listElements -> BOOLEAN OP_BOOLEAN .

    RSQUARE         reduce using rule 16 (listElements -> BOOLEAN OP_BOOLEAN .)


state 96

    (28) conditionalStmt -> IF expressionStmt COL statement ELSE . COL statement

    COL             shift and go to state 101


state 97

    (24) iterationStmt -> FOR ID IN iterationElement COL . statement
    (17) statement -> . expressionStmt
    (18) statement -> . conditionalStmt SEMI
    (19) statement -> . iterationStmt SEMI
    (20) statement -> . functionalStmt
    (21) statement -> . inputStmt
    (22) statement -> . outputStmt
    (23) statement -> . commentStmt
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (27) conditionalStmt -> . IF expressionStmt COL statement
    (28) conditionalStmt -> . IF expressionStmt COL statement ELSE COL statement
    (24) iterationStmt -> . FOR ID IN iterationElement COL statement
    (53) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (54) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (55) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    ID              shift and go to state 36
    NUMBER          shift and go to state 28

    statement                      shift and go to state 102
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 98

    (59) lambdaFilter -> LAMBDA lambdaElement COL . expressionStmt COMA iterationElement
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 36
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 103
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 99

    (58) lambdaElement -> ID OP_ID .

    COL             reduce using rule 58 (lambdaElement -> ID OP_ID .)


state 100

    (56) lambdaStmt -> LAMBDA lambdaElement COL . sumExpression COMA iterationElement
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    ID              shift and go to state 36
    NUMBER          shift and go to state 28

    sumExpression                  shift and go to state 104
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 101

    (28) conditionalStmt -> IF expressionStmt COL statement ELSE COL . statement
    (17) statement -> . expressionStmt
    (18) statement -> . conditionalStmt SEMI
    (19) statement -> . iterationStmt SEMI
    (20) statement -> . functionalStmt
    (21) statement -> . inputStmt
    (22) statement -> . outputStmt
    (23) statement -> . commentStmt
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (27) conditionalStmt -> . IF expressionStmt COL statement
    (28) conditionalStmt -> . IF expressionStmt COL statement ELSE COL statement
    (24) iterationStmt -> . FOR ID IN iterationElement COL statement
    (53) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (54) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (55) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    ID              shift and go to state 36
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 6
    statement                      shift and go to state 105
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 102

    (24) iterationStmt -> FOR ID IN iterationElement COL statement .

    SEMI            reduce using rule 24 (iterationStmt -> FOR ID IN iterationElement COL statement .)


state 103

    (59) lambdaFilter -> LAMBDA lambdaElement COL expressionStmt . COMA iterationElement
    (29) expressionStmt -> expressionStmt . OR andExpression

    COMA            shift and go to state 106
    OR              shift and go to state 31


state 104

    (56) lambdaStmt -> LAMBDA lambdaElement COL sumExpression . COMA iterationElement
    (43) sumExpression -> sumExpression . sumop term
    (45) sumop -> . PLUS
    (46) sumop -> . MINUS

    COMA            shift and go to state 107
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53

    sumop                          shift and go to state 45

state 105

    (28) conditionalStmt -> IF expressionStmt COL statement ELSE COL statement .

    SEMI            reduce using rule 28 (conditionalStmt -> IF expressionStmt COL statement ELSE COL statement .)


state 106

    (59) lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA . iterationElement
    (25) iterationElement -> . list
    (26) iterationElement -> . ID
    (10) list -> . LSQUARE listElements RSQUARE

    ID              shift and go to state 82
    LSQUARE         shift and go to state 62

    iterationElement               shift and go to state 108
    list                           shift and go to state 84

state 107

    (56) lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA . iterationElement
    (25) iterationElement -> . list
    (26) iterationElement -> . ID
    (10) list -> . LSQUARE listElements RSQUARE

    ID              shift and go to state 82
    LSQUARE         shift and go to state 62

    iterationElement               shift and go to state 109
    list                           shift and go to state 84

state 108

    (59) lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA iterationElement .

    RPAREN          reduce using rule 59 (lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA iterationElement .)


state 109

    (56) lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA iterationElement .

    RPAREN          reduce using rule 56 (lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA iterationElement .)

