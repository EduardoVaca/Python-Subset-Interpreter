Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    STRING
    BOOLEAN
    EQUALS
    LPAREN
    RPAREN
    LSQUARE
    RSQUARE
    COMA
    LAMBDA
    MAP
    REDUCE
    FILTER
    INPUT
    OUTPUT

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expressionStmt
Rule 2     statement -> conditionalStmt SEMI
Rule 3     statement -> iterationStmt SEMI
Rule 4     iterationStmt -> FOR ID IN iterationElement COL statement
Rule 5     iterationElement -> ID
Rule 6     conditionalStmt -> IF expressionStmt COL statement
Rule 7     conditionalStmt -> IF expressionStmt COL statement ELSE COL statement
Rule 8     expressionStmt -> expressionStmt OR andExpression
Rule 9     expressionStmt -> andExpression
Rule 10    andExpression -> andExpression AND unaryRelExpression
Rule 11    andExpression -> unaryRelExpression
Rule 12    unaryRelExpression -> NOT unaryRelExpression
Rule 13    unaryRelExpression -> relExpression
Rule 14    relExpression -> sumExpression relop sumExpression
Rule 15    relExpression -> sumExpression
Rule 16    relop -> LE
Rule 17    relop -> LT
Rule 18    relop -> GT
Rule 19    relop -> GE
Rule 20    relop -> EQ
Rule 21    relop -> NEQ
Rule 22    sumExpression -> sumExpression sumop term
Rule 23    sumExpression -> term
Rule 24    sumop -> PLUS
Rule 25    sumop -> MINUS
Rule 26    term -> term mulop sumElement
Rule 27    term -> sumElement
Rule 28    sumElement -> ID
Rule 29    sumElement -> NUMBER
Rule 30    mulop -> PROD
Rule 31    mulop -> DIV

Terminals, with rules where they appear

AND                  : 10
BOOLEAN              : 
COL                  : 4 6 7 7
COMA                 : 
COMMENT              : 
DIV                  : 31
ELSE                 : 7
EQ                   : 20
EQUALS               : 
FILTER               : 
FOR                  : 4
GE                   : 19
GT                   : 18
ID                   : 4 5 28
IF                   : 6 7
IN                   : 4
INPUT                : 
LAMBDA               : 
LE                   : 16
LPAREN               : 
LSQUARE              : 
LT                   : 17
MAP                  : 
MINUS                : 25
NEQ                  : 21
NOT                  : 12
NUMBER               : 29
OR                   : 8
OUTPUT               : 
PLUS                 : 24
PROD                 : 30
REDUCE               : 
RPAREN               : 
RSQUARE              : 
SEMI                 : 2 3
STRING               : 
error                : 

Nonterminals, with rules where they appear

andExpression        : 8 9 10
conditionalStmt      : 2
expressionStmt       : 1 6 7 8
iterationElement     : 4
iterationStmt        : 3
mulop                : 26
relExpression        : 13
relop                : 14
statement            : 4 6 7 7 0
sumElement           : 26 27
sumExpression        : 14 14 15 22
sumop                : 22
term                 : 22 23 26
unaryRelExpression   : 10 11 12

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expressionStmt
    (2) statement -> . conditionalStmt SEMI
    (3) statement -> . iterationStmt SEMI
    (8) expressionStmt -> . expressionStmt OR andExpression
    (9) expressionStmt -> . andExpression
    (6) conditionalStmt -> . IF expressionStmt COL statement
    (7) conditionalStmt -> . IF expressionStmt COL statement ELSE COL statement
    (4) iterationStmt -> . FOR ID IN iterationElement COL statement
    (10) andExpression -> . andExpression AND unaryRelExpression
    (11) andExpression -> . unaryRelExpression
    (12) unaryRelExpression -> . NOT unaryRelExpression
    (13) unaryRelExpression -> . relExpression
    (14) relExpression -> . sumExpression relop sumExpression
    (15) relExpression -> . sumExpression
    (22) sumExpression -> . sumExpression sumop term
    (23) sumExpression -> . term
    (26) term -> . term mulop sumElement
    (27) term -> . sumElement
    (28) sumElement -> . ID
    (29) sumElement -> . NUMBER

    IF              shift and go to state 6
    FOR             shift and go to state 7
    NOT             shift and go to state 10
    ID              shift and go to state 8
    NUMBER          shift and go to state 15

    statement                      shift and go to state 1
    expressionStmt                 shift and go to state 2
    conditionalStmt                shift and go to state 3
    iterationStmt                  shift and go to state 4
    andExpression                  shift and go to state 5
    unaryRelExpression             shift and go to state 9
    relExpression                  shift and go to state 11
    sumExpression                  shift and go to state 12
    term                           shift and go to state 13
    sumElement                     shift and go to state 14

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expressionStmt .
    (8) expressionStmt -> expressionStmt . OR andExpression

    $end            reduce using rule 1 (statement -> expressionStmt .)
    ELSE            reduce using rule 1 (statement -> expressionStmt .)
    SEMI            reduce using rule 1 (statement -> expressionStmt .)
    OR              shift and go to state 16


state 3

    (2) statement -> conditionalStmt . SEMI

    SEMI            shift and go to state 17


state 4

    (3) statement -> iterationStmt . SEMI

    SEMI            shift and go to state 18


state 5

    (9) expressionStmt -> andExpression .
    (10) andExpression -> andExpression . AND unaryRelExpression

    OR              reduce using rule 9 (expressionStmt -> andExpression .)
    $end            reduce using rule 9 (expressionStmt -> andExpression .)
    COL             reduce using rule 9 (expressionStmt -> andExpression .)
    ELSE            reduce using rule 9 (expressionStmt -> andExpression .)
    SEMI            reduce using rule 9 (expressionStmt -> andExpression .)
    AND             shift and go to state 19


state 6

    (6) conditionalStmt -> IF . expressionStmt COL statement
    (7) conditionalStmt -> IF . expressionStmt COL statement ELSE COL statement
    (8) expressionStmt -> . expressionStmt OR andExpression
    (9) expressionStmt -> . andExpression
    (10) andExpression -> . andExpression AND unaryRelExpression
    (11) andExpression -> . unaryRelExpression
    (12) unaryRelExpression -> . NOT unaryRelExpression
    (13) unaryRelExpression -> . relExpression
    (14) relExpression -> . sumExpression relop sumExpression
    (15) relExpression -> . sumExpression
    (22) sumExpression -> . sumExpression sumop term
    (23) sumExpression -> . term
    (26) term -> . term mulop sumElement
    (27) term -> . sumElement
    (28) sumElement -> . ID
    (29) sumElement -> . NUMBER

    NOT             shift and go to state 10
    ID              shift and go to state 8
    NUMBER          shift and go to state 15

    expressionStmt                 shift and go to state 20
    andExpression                  shift and go to state 5
    unaryRelExpression             shift and go to state 9
    relExpression                  shift and go to state 11
    sumExpression                  shift and go to state 12
    term                           shift and go to state 13
    sumElement                     shift and go to state 14

state 7

    (4) iterationStmt -> FOR . ID IN iterationElement COL statement

    ID              shift and go to state 21


state 8

    (28) sumElement -> ID .

    PROD            reduce using rule 28 (sumElement -> ID .)
    DIV             reduce using rule 28 (sumElement -> ID .)
    LE              reduce using rule 28 (sumElement -> ID .)
    LT              reduce using rule 28 (sumElement -> ID .)
    GT              reduce using rule 28 (sumElement -> ID .)
    GE              reduce using rule 28 (sumElement -> ID .)
    EQ              reduce using rule 28 (sumElement -> ID .)
    NEQ             reduce using rule 28 (sumElement -> ID .)
    PLUS            reduce using rule 28 (sumElement -> ID .)
    MINUS           reduce using rule 28 (sumElement -> ID .)
    AND             reduce using rule 28 (sumElement -> ID .)
    OR              reduce using rule 28 (sumElement -> ID .)
    $end            reduce using rule 28 (sumElement -> ID .)
    COL             reduce using rule 28 (sumElement -> ID .)
    ELSE            reduce using rule 28 (sumElement -> ID .)
    SEMI            reduce using rule 28 (sumElement -> ID .)


state 9

    (11) andExpression -> unaryRelExpression .

    AND             reduce using rule 11 (andExpression -> unaryRelExpression .)
    OR              reduce using rule 11 (andExpression -> unaryRelExpression .)
    $end            reduce using rule 11 (andExpression -> unaryRelExpression .)
    COL             reduce using rule 11 (andExpression -> unaryRelExpression .)
    ELSE            reduce using rule 11 (andExpression -> unaryRelExpression .)
    SEMI            reduce using rule 11 (andExpression -> unaryRelExpression .)


state 10

    (12) unaryRelExpression -> NOT . unaryRelExpression
    (12) unaryRelExpression -> . NOT unaryRelExpression
    (13) unaryRelExpression -> . relExpression
    (14) relExpression -> . sumExpression relop sumExpression
    (15) relExpression -> . sumExpression
    (22) sumExpression -> . sumExpression sumop term
    (23) sumExpression -> . term
    (26) term -> . term mulop sumElement
    (27) term -> . sumElement
    (28) sumElement -> . ID
    (29) sumElement -> . NUMBER

    NOT             shift and go to state 10
    ID              shift and go to state 8
    NUMBER          shift and go to state 15

    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 11
    sumExpression                  shift and go to state 12
    term                           shift and go to state 13
    sumElement                     shift and go to state 14

state 11

    (13) unaryRelExpression -> relExpression .

    AND             reduce using rule 13 (unaryRelExpression -> relExpression .)
    OR              reduce using rule 13 (unaryRelExpression -> relExpression .)
    $end            reduce using rule 13 (unaryRelExpression -> relExpression .)
    COL             reduce using rule 13 (unaryRelExpression -> relExpression .)
    ELSE            reduce using rule 13 (unaryRelExpression -> relExpression .)
    SEMI            reduce using rule 13 (unaryRelExpression -> relExpression .)


state 12

    (14) relExpression -> sumExpression . relop sumExpression
    (15) relExpression -> sumExpression .
    (22) sumExpression -> sumExpression . sumop term
    (16) relop -> . LE
    (17) relop -> . LT
    (18) relop -> . GT
    (19) relop -> . GE
    (20) relop -> . EQ
    (21) relop -> . NEQ
    (24) sumop -> . PLUS
    (25) sumop -> . MINUS

    AND             reduce using rule 15 (relExpression -> sumExpression .)
    OR              reduce using rule 15 (relExpression -> sumExpression .)
    $end            reduce using rule 15 (relExpression -> sumExpression .)
    COL             reduce using rule 15 (relExpression -> sumExpression .)
    ELSE            reduce using rule 15 (relExpression -> sumExpression .)
    SEMI            reduce using rule 15 (relExpression -> sumExpression .)
    LE              shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27
    GE              shift and go to state 28
    EQ              shift and go to state 29
    NEQ             shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32

    relop                          shift and go to state 23
    sumop                          shift and go to state 24

state 13

    (23) sumExpression -> term .
    (26) term -> term . mulop sumElement
    (30) mulop -> . PROD
    (31) mulop -> . DIV

    LE              reduce using rule 23 (sumExpression -> term .)
    LT              reduce using rule 23 (sumExpression -> term .)
    GT              reduce using rule 23 (sumExpression -> term .)
    GE              reduce using rule 23 (sumExpression -> term .)
    EQ              reduce using rule 23 (sumExpression -> term .)
    NEQ             reduce using rule 23 (sumExpression -> term .)
    PLUS            reduce using rule 23 (sumExpression -> term .)
    MINUS           reduce using rule 23 (sumExpression -> term .)
    AND             reduce using rule 23 (sumExpression -> term .)
    OR              reduce using rule 23 (sumExpression -> term .)
    $end            reduce using rule 23 (sumExpression -> term .)
    COL             reduce using rule 23 (sumExpression -> term .)
    ELSE            reduce using rule 23 (sumExpression -> term .)
    SEMI            reduce using rule 23 (sumExpression -> term .)
    PROD            shift and go to state 34
    DIV             shift and go to state 35

    mulop                          shift and go to state 33

state 14

    (27) term -> sumElement .

    PROD            reduce using rule 27 (term -> sumElement .)
    DIV             reduce using rule 27 (term -> sumElement .)
    LE              reduce using rule 27 (term -> sumElement .)
    LT              reduce using rule 27 (term -> sumElement .)
    GT              reduce using rule 27 (term -> sumElement .)
    GE              reduce using rule 27 (term -> sumElement .)
    EQ              reduce using rule 27 (term -> sumElement .)
    NEQ             reduce using rule 27 (term -> sumElement .)
    PLUS            reduce using rule 27 (term -> sumElement .)
    MINUS           reduce using rule 27 (term -> sumElement .)
    AND             reduce using rule 27 (term -> sumElement .)
    OR              reduce using rule 27 (term -> sumElement .)
    $end            reduce using rule 27 (term -> sumElement .)
    COL             reduce using rule 27 (term -> sumElement .)
    ELSE            reduce using rule 27 (term -> sumElement .)
    SEMI            reduce using rule 27 (term -> sumElement .)


state 15

    (29) sumElement -> NUMBER .

    PROD            reduce using rule 29 (sumElement -> NUMBER .)
    DIV             reduce using rule 29 (sumElement -> NUMBER .)
    LE              reduce using rule 29 (sumElement -> NUMBER .)
    LT              reduce using rule 29 (sumElement -> NUMBER .)
    GT              reduce using rule 29 (sumElement -> NUMBER .)
    GE              reduce using rule 29 (sumElement -> NUMBER .)
    EQ              reduce using rule 29 (sumElement -> NUMBER .)
    NEQ             reduce using rule 29 (sumElement -> NUMBER .)
    PLUS            reduce using rule 29 (sumElement -> NUMBER .)
    MINUS           reduce using rule 29 (sumElement -> NUMBER .)
    AND             reduce using rule 29 (sumElement -> NUMBER .)
    OR              reduce using rule 29 (sumElement -> NUMBER .)
    $end            reduce using rule 29 (sumElement -> NUMBER .)
    COL             reduce using rule 29 (sumElement -> NUMBER .)
    ELSE            reduce using rule 29 (sumElement -> NUMBER .)
    SEMI            reduce using rule 29 (sumElement -> NUMBER .)


state 16

    (8) expressionStmt -> expressionStmt OR . andExpression
    (10) andExpression -> . andExpression AND unaryRelExpression
    (11) andExpression -> . unaryRelExpression
    (12) unaryRelExpression -> . NOT unaryRelExpression
    (13) unaryRelExpression -> . relExpression
    (14) relExpression -> . sumExpression relop sumExpression
    (15) relExpression -> . sumExpression
    (22) sumExpression -> . sumExpression sumop term
    (23) sumExpression -> . term
    (26) term -> . term mulop sumElement
    (27) term -> . sumElement
    (28) sumElement -> . ID
    (29) sumElement -> . NUMBER

    NOT             shift and go to state 10
    ID              shift and go to state 8
    NUMBER          shift and go to state 15

    andExpression                  shift and go to state 36
    unaryRelExpression             shift and go to state 9
    relExpression                  shift and go to state 11
    sumExpression                  shift and go to state 12
    term                           shift and go to state 13
    sumElement                     shift and go to state 14

state 17

    (2) statement -> conditionalStmt SEMI .

    $end            reduce using rule 2 (statement -> conditionalStmt SEMI .)
    ELSE            reduce using rule 2 (statement -> conditionalStmt SEMI .)
    SEMI            reduce using rule 2 (statement -> conditionalStmt SEMI .)


state 18

    (3) statement -> iterationStmt SEMI .

    $end            reduce using rule 3 (statement -> iterationStmt SEMI .)
    ELSE            reduce using rule 3 (statement -> iterationStmt SEMI .)
    SEMI            reduce using rule 3 (statement -> iterationStmt SEMI .)


state 19

    (10) andExpression -> andExpression AND . unaryRelExpression
    (12) unaryRelExpression -> . NOT unaryRelExpression
    (13) unaryRelExpression -> . relExpression
    (14) relExpression -> . sumExpression relop sumExpression
    (15) relExpression -> . sumExpression
    (22) sumExpression -> . sumExpression sumop term
    (23) sumExpression -> . term
    (26) term -> . term mulop sumElement
    (27) term -> . sumElement
    (28) sumElement -> . ID
    (29) sumElement -> . NUMBER

    NOT             shift and go to state 10
    ID              shift and go to state 8
    NUMBER          shift and go to state 15

    unaryRelExpression             shift and go to state 37
    relExpression                  shift and go to state 11
    sumExpression                  shift and go to state 12
    term                           shift and go to state 13
    sumElement                     shift and go to state 14

state 20

    (6) conditionalStmt -> IF expressionStmt . COL statement
    (7) conditionalStmt -> IF expressionStmt . COL statement ELSE COL statement
    (8) expressionStmt -> expressionStmt . OR andExpression

    COL             shift and go to state 38
    OR              shift and go to state 16


state 21

    (4) iterationStmt -> FOR ID . IN iterationElement COL statement

    IN              shift and go to state 39


state 22

    (12) unaryRelExpression -> NOT unaryRelExpression .

    AND             reduce using rule 12 (unaryRelExpression -> NOT unaryRelExpression .)
    OR              reduce using rule 12 (unaryRelExpression -> NOT unaryRelExpression .)
    $end            reduce using rule 12 (unaryRelExpression -> NOT unaryRelExpression .)
    COL             reduce using rule 12 (unaryRelExpression -> NOT unaryRelExpression .)
    ELSE            reduce using rule 12 (unaryRelExpression -> NOT unaryRelExpression .)
    SEMI            reduce using rule 12 (unaryRelExpression -> NOT unaryRelExpression .)


state 23

    (14) relExpression -> sumExpression relop . sumExpression
    (22) sumExpression -> . sumExpression sumop term
    (23) sumExpression -> . term
    (26) term -> . term mulop sumElement
    (27) term -> . sumElement
    (28) sumElement -> . ID
    (29) sumElement -> . NUMBER

    ID              shift and go to state 8
    NUMBER          shift and go to state 15

    sumExpression                  shift and go to state 40
    term                           shift and go to state 13
    sumElement                     shift and go to state 14

state 24

    (22) sumExpression -> sumExpression sumop . term
    (26) term -> . term mulop sumElement
    (27) term -> . sumElement
    (28) sumElement -> . ID
    (29) sumElement -> . NUMBER

    ID              shift and go to state 8
    NUMBER          shift and go to state 15

    term                           shift and go to state 41
    sumElement                     shift and go to state 14

state 25

    (16) relop -> LE .

    ID              reduce using rule 16 (relop -> LE .)
    NUMBER          reduce using rule 16 (relop -> LE .)


state 26

    (17) relop -> LT .

    ID              reduce using rule 17 (relop -> LT .)
    NUMBER          reduce using rule 17 (relop -> LT .)


state 27

    (18) relop -> GT .

    ID              reduce using rule 18 (relop -> GT .)
    NUMBER          reduce using rule 18 (relop -> GT .)


state 28

    (19) relop -> GE .

    ID              reduce using rule 19 (relop -> GE .)
    NUMBER          reduce using rule 19 (relop -> GE .)


state 29

    (20) relop -> EQ .

    ID              reduce using rule 20 (relop -> EQ .)
    NUMBER          reduce using rule 20 (relop -> EQ .)


state 30

    (21) relop -> NEQ .

    ID              reduce using rule 21 (relop -> NEQ .)
    NUMBER          reduce using rule 21 (relop -> NEQ .)


state 31

    (24) sumop -> PLUS .

    ID              reduce using rule 24 (sumop -> PLUS .)
    NUMBER          reduce using rule 24 (sumop -> PLUS .)


state 32

    (25) sumop -> MINUS .

    ID              reduce using rule 25 (sumop -> MINUS .)
    NUMBER          reduce using rule 25 (sumop -> MINUS .)


state 33

    (26) term -> term mulop . sumElement
    (28) sumElement -> . ID
    (29) sumElement -> . NUMBER

    ID              shift and go to state 8
    NUMBER          shift and go to state 15

    sumElement                     shift and go to state 42

state 34

    (30) mulop -> PROD .

    ID              reduce using rule 30 (mulop -> PROD .)
    NUMBER          reduce using rule 30 (mulop -> PROD .)


state 35

    (31) mulop -> DIV .

    ID              reduce using rule 31 (mulop -> DIV .)
    NUMBER          reduce using rule 31 (mulop -> DIV .)


state 36

    (8) expressionStmt -> expressionStmt OR andExpression .
    (10) andExpression -> andExpression . AND unaryRelExpression

    OR              reduce using rule 8 (expressionStmt -> expressionStmt OR andExpression .)
    $end            reduce using rule 8 (expressionStmt -> expressionStmt OR andExpression .)
    COL             reduce using rule 8 (expressionStmt -> expressionStmt OR andExpression .)
    ELSE            reduce using rule 8 (expressionStmt -> expressionStmt OR andExpression .)
    SEMI            reduce using rule 8 (expressionStmt -> expressionStmt OR andExpression .)
    AND             shift and go to state 19


state 37

    (10) andExpression -> andExpression AND unaryRelExpression .

    AND             reduce using rule 10 (andExpression -> andExpression AND unaryRelExpression .)
    OR              reduce using rule 10 (andExpression -> andExpression AND unaryRelExpression .)
    $end            reduce using rule 10 (andExpression -> andExpression AND unaryRelExpression .)
    COL             reduce using rule 10 (andExpression -> andExpression AND unaryRelExpression .)
    ELSE            reduce using rule 10 (andExpression -> andExpression AND unaryRelExpression .)
    SEMI            reduce using rule 10 (andExpression -> andExpression AND unaryRelExpression .)


state 38

    (6) conditionalStmt -> IF expressionStmt COL . statement
    (7) conditionalStmt -> IF expressionStmt COL . statement ELSE COL statement
    (1) statement -> . expressionStmt
    (2) statement -> . conditionalStmt SEMI
    (3) statement -> . iterationStmt SEMI
    (8) expressionStmt -> . expressionStmt OR andExpression
    (9) expressionStmt -> . andExpression
    (6) conditionalStmt -> . IF expressionStmt COL statement
    (7) conditionalStmt -> . IF expressionStmt COL statement ELSE COL statement
    (4) iterationStmt -> . FOR ID IN iterationElement COL statement
    (10) andExpression -> . andExpression AND unaryRelExpression
    (11) andExpression -> . unaryRelExpression
    (12) unaryRelExpression -> . NOT unaryRelExpression
    (13) unaryRelExpression -> . relExpression
    (14) relExpression -> . sumExpression relop sumExpression
    (15) relExpression -> . sumExpression
    (22) sumExpression -> . sumExpression sumop term
    (23) sumExpression -> . term
    (26) term -> . term mulop sumElement
    (27) term -> . sumElement
    (28) sumElement -> . ID
    (29) sumElement -> . NUMBER

    IF              shift and go to state 6
    FOR             shift and go to state 7
    NOT             shift and go to state 10
    ID              shift and go to state 8
    NUMBER          shift and go to state 15

    expressionStmt                 shift and go to state 2
    statement                      shift and go to state 43
    conditionalStmt                shift and go to state 3
    iterationStmt                  shift and go to state 4
    andExpression                  shift and go to state 5
    unaryRelExpression             shift and go to state 9
    relExpression                  shift and go to state 11
    sumExpression                  shift and go to state 12
    term                           shift and go to state 13
    sumElement                     shift and go to state 14

state 39

    (4) iterationStmt -> FOR ID IN . iterationElement COL statement
    (5) iterationElement -> . ID

    ID              shift and go to state 44

    iterationElement               shift and go to state 45

state 40

    (14) relExpression -> sumExpression relop sumExpression .
    (22) sumExpression -> sumExpression . sumop term
    (24) sumop -> . PLUS
    (25) sumop -> . MINUS

    AND             reduce using rule 14 (relExpression -> sumExpression relop sumExpression .)
    OR              reduce using rule 14 (relExpression -> sumExpression relop sumExpression .)
    $end            reduce using rule 14 (relExpression -> sumExpression relop sumExpression .)
    COL             reduce using rule 14 (relExpression -> sumExpression relop sumExpression .)
    ELSE            reduce using rule 14 (relExpression -> sumExpression relop sumExpression .)
    SEMI            reduce using rule 14 (relExpression -> sumExpression relop sumExpression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32

    sumop                          shift and go to state 24

state 41

    (22) sumExpression -> sumExpression sumop term .
    (26) term -> term . mulop sumElement
    (30) mulop -> . PROD
    (31) mulop -> . DIV

    LE              reduce using rule 22 (sumExpression -> sumExpression sumop term .)
    LT              reduce using rule 22 (sumExpression -> sumExpression sumop term .)
    GT              reduce using rule 22 (sumExpression -> sumExpression sumop term .)
    GE              reduce using rule 22 (sumExpression -> sumExpression sumop term .)
    EQ              reduce using rule 22 (sumExpression -> sumExpression sumop term .)
    NEQ             reduce using rule 22 (sumExpression -> sumExpression sumop term .)
    PLUS            reduce using rule 22 (sumExpression -> sumExpression sumop term .)
    MINUS           reduce using rule 22 (sumExpression -> sumExpression sumop term .)
    AND             reduce using rule 22 (sumExpression -> sumExpression sumop term .)
    OR              reduce using rule 22 (sumExpression -> sumExpression sumop term .)
    $end            reduce using rule 22 (sumExpression -> sumExpression sumop term .)
    COL             reduce using rule 22 (sumExpression -> sumExpression sumop term .)
    ELSE            reduce using rule 22 (sumExpression -> sumExpression sumop term .)
    SEMI            reduce using rule 22 (sumExpression -> sumExpression sumop term .)
    PROD            shift and go to state 34
    DIV             shift and go to state 35

    mulop                          shift and go to state 33

state 42

    (26) term -> term mulop sumElement .

    PROD            reduce using rule 26 (term -> term mulop sumElement .)
    DIV             reduce using rule 26 (term -> term mulop sumElement .)
    LE              reduce using rule 26 (term -> term mulop sumElement .)
    LT              reduce using rule 26 (term -> term mulop sumElement .)
    GT              reduce using rule 26 (term -> term mulop sumElement .)
    GE              reduce using rule 26 (term -> term mulop sumElement .)
    EQ              reduce using rule 26 (term -> term mulop sumElement .)
    NEQ             reduce using rule 26 (term -> term mulop sumElement .)
    PLUS            reduce using rule 26 (term -> term mulop sumElement .)
    MINUS           reduce using rule 26 (term -> term mulop sumElement .)
    AND             reduce using rule 26 (term -> term mulop sumElement .)
    OR              reduce using rule 26 (term -> term mulop sumElement .)
    $end            reduce using rule 26 (term -> term mulop sumElement .)
    COL             reduce using rule 26 (term -> term mulop sumElement .)
    ELSE            reduce using rule 26 (term -> term mulop sumElement .)
    SEMI            reduce using rule 26 (term -> term mulop sumElement .)


state 43

    (6) conditionalStmt -> IF expressionStmt COL statement .
    (7) conditionalStmt -> IF expressionStmt COL statement . ELSE COL statement

    SEMI            reduce using rule 6 (conditionalStmt -> IF expressionStmt COL statement .)
    ELSE            shift and go to state 46


state 44

    (5) iterationElement -> ID .

    COL             reduce using rule 5 (iterationElement -> ID .)


state 45

    (4) iterationStmt -> FOR ID IN iterationElement . COL statement

    COL             shift and go to state 47


state 46

    (7) conditionalStmt -> IF expressionStmt COL statement ELSE . COL statement

    COL             shift and go to state 48


state 47

    (4) iterationStmt -> FOR ID IN iterationElement COL . statement
    (1) statement -> . expressionStmt
    (2) statement -> . conditionalStmt SEMI
    (3) statement -> . iterationStmt SEMI
    (8) expressionStmt -> . expressionStmt OR andExpression
    (9) expressionStmt -> . andExpression
    (6) conditionalStmt -> . IF expressionStmt COL statement
    (7) conditionalStmt -> . IF expressionStmt COL statement ELSE COL statement
    (4) iterationStmt -> . FOR ID IN iterationElement COL statement
    (10) andExpression -> . andExpression AND unaryRelExpression
    (11) andExpression -> . unaryRelExpression
    (12) unaryRelExpression -> . NOT unaryRelExpression
    (13) unaryRelExpression -> . relExpression
    (14) relExpression -> . sumExpression relop sumExpression
    (15) relExpression -> . sumExpression
    (22) sumExpression -> . sumExpression sumop term
    (23) sumExpression -> . term
    (26) term -> . term mulop sumElement
    (27) term -> . sumElement
    (28) sumElement -> . ID
    (29) sumElement -> . NUMBER

    IF              shift and go to state 6
    FOR             shift and go to state 7
    NOT             shift and go to state 10
    ID              shift and go to state 8
    NUMBER          shift and go to state 15

    statement                      shift and go to state 49
    expressionStmt                 shift and go to state 2
    conditionalStmt                shift and go to state 3
    iterationStmt                  shift and go to state 4
    andExpression                  shift and go to state 5
    unaryRelExpression             shift and go to state 9
    relExpression                  shift and go to state 11
    sumExpression                  shift and go to state 12
    term                           shift and go to state 13
    sumElement                     shift and go to state 14

state 48

    (7) conditionalStmt -> IF expressionStmt COL statement ELSE COL . statement
    (1) statement -> . expressionStmt
    (2) statement -> . conditionalStmt SEMI
    (3) statement -> . iterationStmt SEMI
    (8) expressionStmt -> . expressionStmt OR andExpression
    (9) expressionStmt -> . andExpression
    (6) conditionalStmt -> . IF expressionStmt COL statement
    (7) conditionalStmt -> . IF expressionStmt COL statement ELSE COL statement
    (4) iterationStmt -> . FOR ID IN iterationElement COL statement
    (10) andExpression -> . andExpression AND unaryRelExpression
    (11) andExpression -> . unaryRelExpression
    (12) unaryRelExpression -> . NOT unaryRelExpression
    (13) unaryRelExpression -> . relExpression
    (14) relExpression -> . sumExpression relop sumExpression
    (15) relExpression -> . sumExpression
    (22) sumExpression -> . sumExpression sumop term
    (23) sumExpression -> . term
    (26) term -> . term mulop sumElement
    (27) term -> . sumElement
    (28) sumElement -> . ID
    (29) sumElement -> . NUMBER

    IF              shift and go to state 6
    FOR             shift and go to state 7
    NOT             shift and go to state 10
    ID              shift and go to state 8
    NUMBER          shift and go to state 15

    expressionStmt                 shift and go to state 2
    statement                      shift and go to state 50
    conditionalStmt                shift and go to state 3
    iterationStmt                  shift and go to state 4
    andExpression                  shift and go to state 5
    unaryRelExpression             shift and go to state 9
    relExpression                  shift and go to state 11
    sumExpression                  shift and go to state 12
    term                           shift and go to state 13
    sumElement                     shift and go to state 14

state 49

    (4) iterationStmt -> FOR ID IN iterationElement COL statement .

    SEMI            reduce using rule 4 (iterationStmt -> FOR ID IN iterationElement COL statement .)


state 50

    (7) conditionalStmt -> IF expressionStmt COL statement ELSE COL statement .

    SEMI            reduce using rule 7 (conditionalStmt -> IF expressionStmt COL statement ELSE COL statement .)

