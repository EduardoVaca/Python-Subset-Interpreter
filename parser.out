Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> declarationList
Rule 1     declarationList -> declarationList declaration
Rule 2     declarationList -> declaration
Rule 3     declaration -> varDeclaration SEMI
Rule 4     declaration -> statement
Rule 5     varDeclaration -> ID EQUALS declarationElement
Rule 6     declarationElement -> list
Rule 7     declarationElement -> STRING
Rule 8     declarationElement -> NUMBER
Rule 9     declarationElement -> BOOLEAN
Rule 10    list -> LSQUARE listElements RSQUARE
Rule 11    listElements -> NUMBER
Rule 12    listElements -> NUMBER OP_NUMBER
Rule 13    listElements -> STRING
Rule 14    listElements -> STRING OP_STRING
Rule 15    listElements -> BOOLEAN
Rule 16    listElements -> BOOLEAN OP_BOOLEAN
Rule 17    statement -> expressionStmt SEMI
Rule 18    statement -> conditionalStmt
Rule 19    statement -> iterationStmt
Rule 20    statement -> functionalStmt SEMI
Rule 21    statement -> inputStmt SEMI
Rule 22    statement -> outputStmt SEMI
Rule 23    statement -> commentStmt
Rule 24    iterationStmt -> FOR ID IN iterationElement COL declarationList
Rule 25    iterationElement -> list
Rule 26    iterationElement -> ID
Rule 27    conditionalStmt -> IF expressionStmt COL declarationList
Rule 28    conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList
Rule 29    expressionStmt -> expressionStmt OR andExpression
Rule 30    expressionStmt -> andExpression
Rule 31    andExpression -> andExpression AND unaryRelExpression
Rule 32    andExpression -> unaryRelExpression
Rule 33    unaryRelExpression -> NOT unaryRelExpression
Rule 34    unaryRelExpression -> relExpression
Rule 35    relExpression -> sumExpression relop sumExpression
Rule 36    relExpression -> sumExpression
Rule 37    relop -> LE
Rule 38    relop -> LT
Rule 39    relop -> GT
Rule 40    relop -> GE
Rule 41    relop -> EQ
Rule 42    relop -> NEQ
Rule 43    sumExpression -> sumExpression sumop term
Rule 44    sumExpression -> term
Rule 45    sumop -> PLUS
Rule 46    sumop -> MINUS
Rule 47    term -> term mulop sumElement
Rule 48    term -> sumElement
Rule 49    sumElement -> ID
Rule 50    sumElement -> NUMBER
Rule 51    mulop -> PROD
Rule 52    mulop -> DIV
Rule 53    functionalStmt -> FILTER LPAREN lambdaFilter RPAREN
Rule 54    functionalStmt -> MAP LPAREN lambdaStmt RPAREN
Rule 55    functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN
Rule 56    lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA iterationElement
Rule 57    lambdaElement -> ID
Rule 58    lambdaElement -> ID OP_ID
Rule 59    lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA iterationElement
Rule 60    inputStmt -> INPUT LPAREN RPAREN
Rule 61    outputStmt -> OUTPUT LPAREN declarationElement RPAREN
Rule 62    commentStmt -> COMMENT

Terminals, with rules where they appear

AND                  : 31
BOOLEAN              : 9 15 16
COL                  : 24 27 28 28 56 59
COMA                 : 56 59
COMMENT              : 62
DIV                  : 52
ELSE                 : 28
EQ                   : 41
EQUALS               : 5
FILTER               : 53
FOR                  : 24
GE                   : 40
GT                   : 39
ID                   : 5 24 26 49 57 58
IF                   : 27 28
IN                   : 24
INPUT                : 60
LAMBDA               : 56 59
LE                   : 37
LPAREN               : 53 54 55 60 61
LSQUARE              : 10
LT                   : 38
MAP                  : 54
MINUS                : 46
NEQ                  : 42
NOT                  : 33
NUMBER               : 8 11 12 50
OP_BOOLEAN           : 16
OP_ID                : 58
OP_NUMBER            : 12
OP_STRING            : 14
OR                   : 29
OUTPUT               : 61
PLUS                 : 45
PROD                 : 51
REDUCE               : 55
RPAREN               : 53 54 55 60 61
RSQUARE              : 10
SEMI                 : 3 17 20 21 22
STRING               : 7 13 14
error                : 

Nonterminals, with rules where they appear

andExpression        : 29 30 31
commentStmt          : 23
conditionalStmt      : 18
declaration          : 1 2
declarationElement   : 5 61
declarationList      : 1 24 27 28 28 0
expressionStmt       : 17 27 28 29 59
functionalStmt       : 20
inputStmt            : 21
iterationElement     : 24 56 59
iterationStmt        : 19
lambdaElement        : 56 59
lambdaFilter         : 53
lambdaStmt           : 54 55
list                 : 6 25
listElements         : 10
mulop                : 47
outputStmt           : 22
relExpression        : 34
relop                : 35
statement            : 4
sumElement           : 47 48
sumExpression        : 35 35 36 43 56
sumop                : 43
term                 : 43 44 47
unaryRelExpression   : 31 32 33
varDeclaration       : 3

Parsing method: LALR

state 0

    (0) S' -> . declarationList
    (1) declarationList -> . declarationList declaration
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (17) statement -> . expressionStmt SEMI
    (18) statement -> . conditionalStmt
    (19) statement -> . iterationStmt
    (20) statement -> . functionalStmt SEMI
    (21) statement -> . inputStmt SEMI
    (22) statement -> . outputStmt SEMI
    (23) statement -> . commentStmt
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (27) conditionalStmt -> . IF expressionStmt COL declarationList
    (28) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (24) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (53) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (54) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (55) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

    declarationList                shift and go to state 1
    declaration                    shift and go to state 2
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 1

    (0) S' -> declarationList .
    (1) declarationList -> declarationList . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (17) statement -> . expressionStmt SEMI
    (18) statement -> . conditionalStmt
    (19) statement -> . iterationStmt
    (20) statement -> . functionalStmt SEMI
    (21) statement -> . inputStmt SEMI
    (22) statement -> . outputStmt SEMI
    (23) statement -> . commentStmt
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (27) conditionalStmt -> . IF expressionStmt COL declarationList
    (28) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (24) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (53) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (54) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (55) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

    declaration                    shift and go to state 29
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 2

    (2) declarationList -> declaration .

    ID              reduce using rule 2 (declarationList -> declaration .)
    IF              reduce using rule 2 (declarationList -> declaration .)
    FOR             reduce using rule 2 (declarationList -> declaration .)
    FILTER          reduce using rule 2 (declarationList -> declaration .)
    MAP             reduce using rule 2 (declarationList -> declaration .)
    REDUCE          reduce using rule 2 (declarationList -> declaration .)
    INPUT           reduce using rule 2 (declarationList -> declaration .)
    OUTPUT          reduce using rule 2 (declarationList -> declaration .)
    COMMENT         reduce using rule 2 (declarationList -> declaration .)
    NOT             reduce using rule 2 (declarationList -> declaration .)
    NUMBER          reduce using rule 2 (declarationList -> declaration .)
    $end            reduce using rule 2 (declarationList -> declaration .)
    ELSE            reduce using rule 2 (declarationList -> declaration .)


state 3

    (3) declaration -> varDeclaration . SEMI

    SEMI            shift and go to state 30


state 4

    (4) declaration -> statement .

    ID              reduce using rule 4 (declaration -> statement .)
    IF              reduce using rule 4 (declaration -> statement .)
    FOR             reduce using rule 4 (declaration -> statement .)
    FILTER          reduce using rule 4 (declaration -> statement .)
    MAP             reduce using rule 4 (declaration -> statement .)
    REDUCE          reduce using rule 4 (declaration -> statement .)
    INPUT           reduce using rule 4 (declaration -> statement .)
    OUTPUT          reduce using rule 4 (declaration -> statement .)
    COMMENT         reduce using rule 4 (declaration -> statement .)
    NOT             reduce using rule 4 (declaration -> statement .)
    NUMBER          reduce using rule 4 (declaration -> statement .)
    $end            reduce using rule 4 (declaration -> statement .)
    ELSE            reduce using rule 4 (declaration -> statement .)


state 5

    (5) varDeclaration -> ID . EQUALS declarationElement
    (49) sumElement -> ID .

    EQUALS          shift and go to state 31
    PROD            reduce using rule 49 (sumElement -> ID .)
    DIV             reduce using rule 49 (sumElement -> ID .)
    LE              reduce using rule 49 (sumElement -> ID .)
    LT              reduce using rule 49 (sumElement -> ID .)
    GT              reduce using rule 49 (sumElement -> ID .)
    GE              reduce using rule 49 (sumElement -> ID .)
    EQ              reduce using rule 49 (sumElement -> ID .)
    NEQ             reduce using rule 49 (sumElement -> ID .)
    PLUS            reduce using rule 49 (sumElement -> ID .)
    MINUS           reduce using rule 49 (sumElement -> ID .)
    AND             reduce using rule 49 (sumElement -> ID .)
    SEMI            reduce using rule 49 (sumElement -> ID .)
    OR              reduce using rule 49 (sumElement -> ID .)


state 6

    (17) statement -> expressionStmt . SEMI
    (29) expressionStmt -> expressionStmt . OR andExpression

    SEMI            shift and go to state 32
    OR              shift and go to state 33


state 7

    (18) statement -> conditionalStmt .

    ID              reduce using rule 18 (statement -> conditionalStmt .)
    IF              reduce using rule 18 (statement -> conditionalStmt .)
    FOR             reduce using rule 18 (statement -> conditionalStmt .)
    FILTER          reduce using rule 18 (statement -> conditionalStmt .)
    MAP             reduce using rule 18 (statement -> conditionalStmt .)
    REDUCE          reduce using rule 18 (statement -> conditionalStmt .)
    INPUT           reduce using rule 18 (statement -> conditionalStmt .)
    OUTPUT          reduce using rule 18 (statement -> conditionalStmt .)
    COMMENT         reduce using rule 18 (statement -> conditionalStmt .)
    NOT             reduce using rule 18 (statement -> conditionalStmt .)
    NUMBER          reduce using rule 18 (statement -> conditionalStmt .)
    $end            reduce using rule 18 (statement -> conditionalStmt .)
    ELSE            reduce using rule 18 (statement -> conditionalStmt .)


state 8

    (19) statement -> iterationStmt .

    ID              reduce using rule 19 (statement -> iterationStmt .)
    IF              reduce using rule 19 (statement -> iterationStmt .)
    FOR             reduce using rule 19 (statement -> iterationStmt .)
    FILTER          reduce using rule 19 (statement -> iterationStmt .)
    MAP             reduce using rule 19 (statement -> iterationStmt .)
    REDUCE          reduce using rule 19 (statement -> iterationStmt .)
    INPUT           reduce using rule 19 (statement -> iterationStmt .)
    OUTPUT          reduce using rule 19 (statement -> iterationStmt .)
    COMMENT         reduce using rule 19 (statement -> iterationStmt .)
    NOT             reduce using rule 19 (statement -> iterationStmt .)
    NUMBER          reduce using rule 19 (statement -> iterationStmt .)
    $end            reduce using rule 19 (statement -> iterationStmt .)
    ELSE            reduce using rule 19 (statement -> iterationStmt .)


state 9

    (20) statement -> functionalStmt . SEMI

    SEMI            shift and go to state 34


state 10

    (21) statement -> inputStmt . SEMI

    SEMI            shift and go to state 35


state 11

    (22) statement -> outputStmt . SEMI

    SEMI            shift and go to state 36


state 12

    (23) statement -> commentStmt .

    ID              reduce using rule 23 (statement -> commentStmt .)
    IF              reduce using rule 23 (statement -> commentStmt .)
    FOR             reduce using rule 23 (statement -> commentStmt .)
    FILTER          reduce using rule 23 (statement -> commentStmt .)
    MAP             reduce using rule 23 (statement -> commentStmt .)
    REDUCE          reduce using rule 23 (statement -> commentStmt .)
    INPUT           reduce using rule 23 (statement -> commentStmt .)
    OUTPUT          reduce using rule 23 (statement -> commentStmt .)
    COMMENT         reduce using rule 23 (statement -> commentStmt .)
    NOT             reduce using rule 23 (statement -> commentStmt .)
    NUMBER          reduce using rule 23 (statement -> commentStmt .)
    $end            reduce using rule 23 (statement -> commentStmt .)
    ELSE            reduce using rule 23 (statement -> commentStmt .)


state 13

    (30) expressionStmt -> andExpression .
    (31) andExpression -> andExpression . AND unaryRelExpression

    SEMI            reduce using rule 30 (expressionStmt -> andExpression .)
    OR              reduce using rule 30 (expressionStmt -> andExpression .)
    COL             reduce using rule 30 (expressionStmt -> andExpression .)
    COMA            reduce using rule 30 (expressionStmt -> andExpression .)
    AND             shift and go to state 37


state 14

    (27) conditionalStmt -> IF . expressionStmt COL declarationList
    (28) conditionalStmt -> IF . expressionStmt COL declarationList ELSE COL declarationList
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 38
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 15

    (24) iterationStmt -> FOR . ID IN iterationElement COL declarationList

    ID              shift and go to state 40


state 16

    (53) functionalStmt -> FILTER . LPAREN lambdaFilter RPAREN

    LPAREN          shift and go to state 41


state 17

    (54) functionalStmt -> MAP . LPAREN lambdaStmt RPAREN

    LPAREN          shift and go to state 42


state 18

    (55) functionalStmt -> REDUCE . LPAREN lambdaStmt RPAREN

    LPAREN          shift and go to state 43


state 19

    (60) inputStmt -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 44


state 20

    (61) outputStmt -> OUTPUT . LPAREN declarationElement RPAREN

    LPAREN          shift and go to state 45


state 21

    (62) commentStmt -> COMMENT .

    ID              reduce using rule 62 (commentStmt -> COMMENT .)
    IF              reduce using rule 62 (commentStmt -> COMMENT .)
    FOR             reduce using rule 62 (commentStmt -> COMMENT .)
    FILTER          reduce using rule 62 (commentStmt -> COMMENT .)
    MAP             reduce using rule 62 (commentStmt -> COMMENT .)
    REDUCE          reduce using rule 62 (commentStmt -> COMMENT .)
    INPUT           reduce using rule 62 (commentStmt -> COMMENT .)
    OUTPUT          reduce using rule 62 (commentStmt -> COMMENT .)
    COMMENT         reduce using rule 62 (commentStmt -> COMMENT .)
    NOT             reduce using rule 62 (commentStmt -> COMMENT .)
    NUMBER          reduce using rule 62 (commentStmt -> COMMENT .)
    $end            reduce using rule 62 (commentStmt -> COMMENT .)
    ELSE            reduce using rule 62 (commentStmt -> COMMENT .)


state 22

    (32) andExpression -> unaryRelExpression .

    AND             reduce using rule 32 (andExpression -> unaryRelExpression .)
    SEMI            reduce using rule 32 (andExpression -> unaryRelExpression .)
    OR              reduce using rule 32 (andExpression -> unaryRelExpression .)
    COL             reduce using rule 32 (andExpression -> unaryRelExpression .)
    COMA            reduce using rule 32 (andExpression -> unaryRelExpression .)


state 23

    (33) unaryRelExpression -> NOT . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    unaryRelExpression             shift and go to state 46
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 24

    (34) unaryRelExpression -> relExpression .

    AND             reduce using rule 34 (unaryRelExpression -> relExpression .)
    SEMI            reduce using rule 34 (unaryRelExpression -> relExpression .)
    OR              reduce using rule 34 (unaryRelExpression -> relExpression .)
    COL             reduce using rule 34 (unaryRelExpression -> relExpression .)
    COMA            reduce using rule 34 (unaryRelExpression -> relExpression .)


state 25

    (35) relExpression -> sumExpression . relop sumExpression
    (36) relExpression -> sumExpression .
    (43) sumExpression -> sumExpression . sumop term
    (37) relop -> . LE
    (38) relop -> . LT
    (39) relop -> . GT
    (40) relop -> . GE
    (41) relop -> . EQ
    (42) relop -> . NEQ
    (45) sumop -> . PLUS
    (46) sumop -> . MINUS

    AND             reduce using rule 36 (relExpression -> sumExpression .)
    SEMI            reduce using rule 36 (relExpression -> sumExpression .)
    OR              reduce using rule 36 (relExpression -> sumExpression .)
    COL             reduce using rule 36 (relExpression -> sumExpression .)
    COMA            reduce using rule 36 (relExpression -> sumExpression .)
    LE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    relop                          shift and go to state 47
    sumop                          shift and go to state 48

state 26

    (44) sumExpression -> term .
    (47) term -> term . mulop sumElement
    (51) mulop -> . PROD
    (52) mulop -> . DIV

    LE              reduce using rule 44 (sumExpression -> term .)
    LT              reduce using rule 44 (sumExpression -> term .)
    GT              reduce using rule 44 (sumExpression -> term .)
    GE              reduce using rule 44 (sumExpression -> term .)
    EQ              reduce using rule 44 (sumExpression -> term .)
    NEQ             reduce using rule 44 (sumExpression -> term .)
    PLUS            reduce using rule 44 (sumExpression -> term .)
    MINUS           reduce using rule 44 (sumExpression -> term .)
    AND             reduce using rule 44 (sumExpression -> term .)
    SEMI            reduce using rule 44 (sumExpression -> term .)
    OR              reduce using rule 44 (sumExpression -> term .)
    COL             reduce using rule 44 (sumExpression -> term .)
    COMA            reduce using rule 44 (sumExpression -> term .)
    PROD            shift and go to state 58
    DIV             shift and go to state 59

    mulop                          shift and go to state 57

state 27

    (48) term -> sumElement .

    PROD            reduce using rule 48 (term -> sumElement .)
    DIV             reduce using rule 48 (term -> sumElement .)
    LE              reduce using rule 48 (term -> sumElement .)
    LT              reduce using rule 48 (term -> sumElement .)
    GT              reduce using rule 48 (term -> sumElement .)
    GE              reduce using rule 48 (term -> sumElement .)
    EQ              reduce using rule 48 (term -> sumElement .)
    NEQ             reduce using rule 48 (term -> sumElement .)
    PLUS            reduce using rule 48 (term -> sumElement .)
    MINUS           reduce using rule 48 (term -> sumElement .)
    AND             reduce using rule 48 (term -> sumElement .)
    SEMI            reduce using rule 48 (term -> sumElement .)
    OR              reduce using rule 48 (term -> sumElement .)
    COL             reduce using rule 48 (term -> sumElement .)
    COMA            reduce using rule 48 (term -> sumElement .)


state 28

    (50) sumElement -> NUMBER .

    PROD            reduce using rule 50 (sumElement -> NUMBER .)
    DIV             reduce using rule 50 (sumElement -> NUMBER .)
    LE              reduce using rule 50 (sumElement -> NUMBER .)
    LT              reduce using rule 50 (sumElement -> NUMBER .)
    GT              reduce using rule 50 (sumElement -> NUMBER .)
    GE              reduce using rule 50 (sumElement -> NUMBER .)
    EQ              reduce using rule 50 (sumElement -> NUMBER .)
    NEQ             reduce using rule 50 (sumElement -> NUMBER .)
    PLUS            reduce using rule 50 (sumElement -> NUMBER .)
    MINUS           reduce using rule 50 (sumElement -> NUMBER .)
    AND             reduce using rule 50 (sumElement -> NUMBER .)
    SEMI            reduce using rule 50 (sumElement -> NUMBER .)
    OR              reduce using rule 50 (sumElement -> NUMBER .)
    COL             reduce using rule 50 (sumElement -> NUMBER .)
    COMA            reduce using rule 50 (sumElement -> NUMBER .)


state 29

    (1) declarationList -> declarationList declaration .

    ID              reduce using rule 1 (declarationList -> declarationList declaration .)
    IF              reduce using rule 1 (declarationList -> declarationList declaration .)
    FOR             reduce using rule 1 (declarationList -> declarationList declaration .)
    FILTER          reduce using rule 1 (declarationList -> declarationList declaration .)
    MAP             reduce using rule 1 (declarationList -> declarationList declaration .)
    REDUCE          reduce using rule 1 (declarationList -> declarationList declaration .)
    INPUT           reduce using rule 1 (declarationList -> declarationList declaration .)
    OUTPUT          reduce using rule 1 (declarationList -> declarationList declaration .)
    COMMENT         reduce using rule 1 (declarationList -> declarationList declaration .)
    NOT             reduce using rule 1 (declarationList -> declarationList declaration .)
    NUMBER          reduce using rule 1 (declarationList -> declarationList declaration .)
    $end            reduce using rule 1 (declarationList -> declarationList declaration .)
    ELSE            reduce using rule 1 (declarationList -> declarationList declaration .)


state 30

    (3) declaration -> varDeclaration SEMI .

    ID              reduce using rule 3 (declaration -> varDeclaration SEMI .)
    IF              reduce using rule 3 (declaration -> varDeclaration SEMI .)
    FOR             reduce using rule 3 (declaration -> varDeclaration SEMI .)
    FILTER          reduce using rule 3 (declaration -> varDeclaration SEMI .)
    MAP             reduce using rule 3 (declaration -> varDeclaration SEMI .)
    REDUCE          reduce using rule 3 (declaration -> varDeclaration SEMI .)
    INPUT           reduce using rule 3 (declaration -> varDeclaration SEMI .)
    OUTPUT          reduce using rule 3 (declaration -> varDeclaration SEMI .)
    COMMENT         reduce using rule 3 (declaration -> varDeclaration SEMI .)
    NOT             reduce using rule 3 (declaration -> varDeclaration SEMI .)
    NUMBER          reduce using rule 3 (declaration -> varDeclaration SEMI .)
    $end            reduce using rule 3 (declaration -> varDeclaration SEMI .)
    ELSE            reduce using rule 3 (declaration -> varDeclaration SEMI .)


state 31

    (5) varDeclaration -> ID EQUALS . declarationElement
    (6) declarationElement -> . list
    (7) declarationElement -> . STRING
    (8) declarationElement -> . NUMBER
    (9) declarationElement -> . BOOLEAN
    (10) list -> . LSQUARE listElements RSQUARE

    STRING          shift and go to state 62
    NUMBER          shift and go to state 63
    BOOLEAN         shift and go to state 64
    LSQUARE         shift and go to state 65

    declarationElement             shift and go to state 60
    list                           shift and go to state 61

state 32

    (17) statement -> expressionStmt SEMI .

    ID              reduce using rule 17 (statement -> expressionStmt SEMI .)
    IF              reduce using rule 17 (statement -> expressionStmt SEMI .)
    FOR             reduce using rule 17 (statement -> expressionStmt SEMI .)
    FILTER          reduce using rule 17 (statement -> expressionStmt SEMI .)
    MAP             reduce using rule 17 (statement -> expressionStmt SEMI .)
    REDUCE          reduce using rule 17 (statement -> expressionStmt SEMI .)
    INPUT           reduce using rule 17 (statement -> expressionStmt SEMI .)
    OUTPUT          reduce using rule 17 (statement -> expressionStmt SEMI .)
    COMMENT         reduce using rule 17 (statement -> expressionStmt SEMI .)
    NOT             reduce using rule 17 (statement -> expressionStmt SEMI .)
    NUMBER          reduce using rule 17 (statement -> expressionStmt SEMI .)
    $end            reduce using rule 17 (statement -> expressionStmt SEMI .)
    ELSE            reduce using rule 17 (statement -> expressionStmt SEMI .)


state 33

    (29) expressionStmt -> expressionStmt OR . andExpression
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    andExpression                  shift and go to state 66
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 34

    (20) statement -> functionalStmt SEMI .

    ID              reduce using rule 20 (statement -> functionalStmt SEMI .)
    IF              reduce using rule 20 (statement -> functionalStmt SEMI .)
    FOR             reduce using rule 20 (statement -> functionalStmt SEMI .)
    FILTER          reduce using rule 20 (statement -> functionalStmt SEMI .)
    MAP             reduce using rule 20 (statement -> functionalStmt SEMI .)
    REDUCE          reduce using rule 20 (statement -> functionalStmt SEMI .)
    INPUT           reduce using rule 20 (statement -> functionalStmt SEMI .)
    OUTPUT          reduce using rule 20 (statement -> functionalStmt SEMI .)
    COMMENT         reduce using rule 20 (statement -> functionalStmt SEMI .)
    NOT             reduce using rule 20 (statement -> functionalStmt SEMI .)
    NUMBER          reduce using rule 20 (statement -> functionalStmt SEMI .)
    $end            reduce using rule 20 (statement -> functionalStmt SEMI .)
    ELSE            reduce using rule 20 (statement -> functionalStmt SEMI .)


state 35

    (21) statement -> inputStmt SEMI .

    ID              reduce using rule 21 (statement -> inputStmt SEMI .)
    IF              reduce using rule 21 (statement -> inputStmt SEMI .)
    FOR             reduce using rule 21 (statement -> inputStmt SEMI .)
    FILTER          reduce using rule 21 (statement -> inputStmt SEMI .)
    MAP             reduce using rule 21 (statement -> inputStmt SEMI .)
    REDUCE          reduce using rule 21 (statement -> inputStmt SEMI .)
    INPUT           reduce using rule 21 (statement -> inputStmt SEMI .)
    OUTPUT          reduce using rule 21 (statement -> inputStmt SEMI .)
    COMMENT         reduce using rule 21 (statement -> inputStmt SEMI .)
    NOT             reduce using rule 21 (statement -> inputStmt SEMI .)
    NUMBER          reduce using rule 21 (statement -> inputStmt SEMI .)
    $end            reduce using rule 21 (statement -> inputStmt SEMI .)
    ELSE            reduce using rule 21 (statement -> inputStmt SEMI .)


state 36

    (22) statement -> outputStmt SEMI .

    ID              reduce using rule 22 (statement -> outputStmt SEMI .)
    IF              reduce using rule 22 (statement -> outputStmt SEMI .)
    FOR             reduce using rule 22 (statement -> outputStmt SEMI .)
    FILTER          reduce using rule 22 (statement -> outputStmt SEMI .)
    MAP             reduce using rule 22 (statement -> outputStmt SEMI .)
    REDUCE          reduce using rule 22 (statement -> outputStmt SEMI .)
    INPUT           reduce using rule 22 (statement -> outputStmt SEMI .)
    OUTPUT          reduce using rule 22 (statement -> outputStmt SEMI .)
    COMMENT         reduce using rule 22 (statement -> outputStmt SEMI .)
    NOT             reduce using rule 22 (statement -> outputStmt SEMI .)
    NUMBER          reduce using rule 22 (statement -> outputStmt SEMI .)
    $end            reduce using rule 22 (statement -> outputStmt SEMI .)
    ELSE            reduce using rule 22 (statement -> outputStmt SEMI .)


state 37

    (31) andExpression -> andExpression AND . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    unaryRelExpression             shift and go to state 67
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 38

    (27) conditionalStmt -> IF expressionStmt . COL declarationList
    (28) conditionalStmt -> IF expressionStmt . COL declarationList ELSE COL declarationList
    (29) expressionStmt -> expressionStmt . OR andExpression

    COL             shift and go to state 68
    OR              shift and go to state 33


state 39

    (49) sumElement -> ID .

    PROD            reduce using rule 49 (sumElement -> ID .)
    DIV             reduce using rule 49 (sumElement -> ID .)
    LE              reduce using rule 49 (sumElement -> ID .)
    LT              reduce using rule 49 (sumElement -> ID .)
    GT              reduce using rule 49 (sumElement -> ID .)
    GE              reduce using rule 49 (sumElement -> ID .)
    EQ              reduce using rule 49 (sumElement -> ID .)
    NEQ             reduce using rule 49 (sumElement -> ID .)
    PLUS            reduce using rule 49 (sumElement -> ID .)
    MINUS           reduce using rule 49 (sumElement -> ID .)
    AND             reduce using rule 49 (sumElement -> ID .)
    COL             reduce using rule 49 (sumElement -> ID .)
    OR              reduce using rule 49 (sumElement -> ID .)
    SEMI            reduce using rule 49 (sumElement -> ID .)
    COMA            reduce using rule 49 (sumElement -> ID .)


state 40

    (24) iterationStmt -> FOR ID . IN iterationElement COL declarationList

    IN              shift and go to state 69


state 41

    (53) functionalStmt -> FILTER LPAREN . lambdaFilter RPAREN
    (59) lambdaFilter -> . LAMBDA lambdaElement COL expressionStmt COMA iterationElement

    LAMBDA          shift and go to state 71

    lambdaFilter                   shift and go to state 70

state 42

    (54) functionalStmt -> MAP LPAREN . lambdaStmt RPAREN
    (56) lambdaStmt -> . LAMBDA lambdaElement COL sumExpression COMA iterationElement

    LAMBDA          shift and go to state 73

    lambdaStmt                     shift and go to state 72

state 43

    (55) functionalStmt -> REDUCE LPAREN . lambdaStmt RPAREN
    (56) lambdaStmt -> . LAMBDA lambdaElement COL sumExpression COMA iterationElement

    LAMBDA          shift and go to state 73

    lambdaStmt                     shift and go to state 74

state 44

    (60) inputStmt -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 75


state 45

    (61) outputStmt -> OUTPUT LPAREN . declarationElement RPAREN
    (6) declarationElement -> . list
    (7) declarationElement -> . STRING
    (8) declarationElement -> . NUMBER
    (9) declarationElement -> . BOOLEAN
    (10) list -> . LSQUARE listElements RSQUARE

    STRING          shift and go to state 62
    NUMBER          shift and go to state 63
    BOOLEAN         shift and go to state 64
    LSQUARE         shift and go to state 65

    declarationElement             shift and go to state 76
    list                           shift and go to state 61

state 46

    (33) unaryRelExpression -> NOT unaryRelExpression .

    AND             reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    SEMI            reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    OR              reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    COL             reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)
    COMA            reduce using rule 33 (unaryRelExpression -> NOT unaryRelExpression .)


state 47

    (35) relExpression -> sumExpression relop . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    sumExpression                  shift and go to state 77
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 48

    (43) sumExpression -> sumExpression sumop . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    term                           shift and go to state 78
    sumElement                     shift and go to state 27

state 49

    (37) relop -> LE .

    ID              reduce using rule 37 (relop -> LE .)
    NUMBER          reduce using rule 37 (relop -> LE .)


state 50

    (38) relop -> LT .

    ID              reduce using rule 38 (relop -> LT .)
    NUMBER          reduce using rule 38 (relop -> LT .)


state 51

    (39) relop -> GT .

    ID              reduce using rule 39 (relop -> GT .)
    NUMBER          reduce using rule 39 (relop -> GT .)


state 52

    (40) relop -> GE .

    ID              reduce using rule 40 (relop -> GE .)
    NUMBER          reduce using rule 40 (relop -> GE .)


state 53

    (41) relop -> EQ .

    ID              reduce using rule 41 (relop -> EQ .)
    NUMBER          reduce using rule 41 (relop -> EQ .)


state 54

    (42) relop -> NEQ .

    ID              reduce using rule 42 (relop -> NEQ .)
    NUMBER          reduce using rule 42 (relop -> NEQ .)


state 55

    (45) sumop -> PLUS .

    ID              reduce using rule 45 (sumop -> PLUS .)
    NUMBER          reduce using rule 45 (sumop -> PLUS .)


state 56

    (46) sumop -> MINUS .

    ID              reduce using rule 46 (sumop -> MINUS .)
    NUMBER          reduce using rule 46 (sumop -> MINUS .)


state 57

    (47) term -> term mulop . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    sumElement                     shift and go to state 79

state 58

    (51) mulop -> PROD .

    ID              reduce using rule 51 (mulop -> PROD .)
    NUMBER          reduce using rule 51 (mulop -> PROD .)


state 59

    (52) mulop -> DIV .

    ID              reduce using rule 52 (mulop -> DIV .)
    NUMBER          reduce using rule 52 (mulop -> DIV .)


state 60

    (5) varDeclaration -> ID EQUALS declarationElement .

    SEMI            reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)


state 61

    (6) declarationElement -> list .

    SEMI            reduce using rule 6 (declarationElement -> list .)
    RPAREN          reduce using rule 6 (declarationElement -> list .)


state 62

    (7) declarationElement -> STRING .

    SEMI            reduce using rule 7 (declarationElement -> STRING .)
    RPAREN          reduce using rule 7 (declarationElement -> STRING .)


state 63

    (8) declarationElement -> NUMBER .

    SEMI            reduce using rule 8 (declarationElement -> NUMBER .)
    RPAREN          reduce using rule 8 (declarationElement -> NUMBER .)


state 64

    (9) declarationElement -> BOOLEAN .

    SEMI            reduce using rule 9 (declarationElement -> BOOLEAN .)
    RPAREN          reduce using rule 9 (declarationElement -> BOOLEAN .)


state 65

    (10) list -> LSQUARE . listElements RSQUARE
    (11) listElements -> . NUMBER
    (12) listElements -> . NUMBER OP_NUMBER
    (13) listElements -> . STRING
    (14) listElements -> . STRING OP_STRING
    (15) listElements -> . BOOLEAN
    (16) listElements -> . BOOLEAN OP_BOOLEAN

    NUMBER          shift and go to state 81
    STRING          shift and go to state 82
    BOOLEAN         shift and go to state 83

    listElements                   shift and go to state 80

state 66

    (29) expressionStmt -> expressionStmt OR andExpression .
    (31) andExpression -> andExpression . AND unaryRelExpression

    SEMI            reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    OR              reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    COL             reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    COMA            reduce using rule 29 (expressionStmt -> expressionStmt OR andExpression .)
    AND             shift and go to state 37


state 67

    (31) andExpression -> andExpression AND unaryRelExpression .

    AND             reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    SEMI            reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    OR              reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    COL             reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)
    COMA            reduce using rule 31 (andExpression -> andExpression AND unaryRelExpression .)


state 68

    (27) conditionalStmt -> IF expressionStmt COL . declarationList
    (28) conditionalStmt -> IF expressionStmt COL . declarationList ELSE COL declarationList
    (1) declarationList -> . declarationList declaration
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (17) statement -> . expressionStmt SEMI
    (18) statement -> . conditionalStmt
    (19) statement -> . iterationStmt
    (20) statement -> . functionalStmt SEMI
    (21) statement -> . inputStmt SEMI
    (22) statement -> . outputStmt SEMI
    (23) statement -> . commentStmt
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (27) conditionalStmt -> . IF expressionStmt COL declarationList
    (28) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (24) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (53) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (54) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (55) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 6
    declarationList                shift and go to state 84
    declaration                    shift and go to state 2
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 69

    (24) iterationStmt -> FOR ID IN . iterationElement COL declarationList
    (25) iterationElement -> . list
    (26) iterationElement -> . ID
    (10) list -> . LSQUARE listElements RSQUARE

    ID              shift and go to state 85
    LSQUARE         shift and go to state 65

    iterationElement               shift and go to state 86
    list                           shift and go to state 87

state 70

    (53) functionalStmt -> FILTER LPAREN lambdaFilter . RPAREN

    RPAREN          shift and go to state 88


state 71

    (59) lambdaFilter -> LAMBDA . lambdaElement COL expressionStmt COMA iterationElement
    (57) lambdaElement -> . ID
    (58) lambdaElement -> . ID OP_ID

    ID              shift and go to state 90

    lambdaElement                  shift and go to state 89

state 72

    (54) functionalStmt -> MAP LPAREN lambdaStmt . RPAREN

    RPAREN          shift and go to state 91


state 73

    (56) lambdaStmt -> LAMBDA . lambdaElement COL sumExpression COMA iterationElement
    (57) lambdaElement -> . ID
    (58) lambdaElement -> . ID OP_ID

    ID              shift and go to state 90

    lambdaElement                  shift and go to state 92

state 74

    (55) functionalStmt -> REDUCE LPAREN lambdaStmt . RPAREN

    RPAREN          shift and go to state 93


state 75

    (60) inputStmt -> INPUT LPAREN RPAREN .

    SEMI            reduce using rule 60 (inputStmt -> INPUT LPAREN RPAREN .)


state 76

    (61) outputStmt -> OUTPUT LPAREN declarationElement . RPAREN

    RPAREN          shift and go to state 94


state 77

    (35) relExpression -> sumExpression relop sumExpression .
    (43) sumExpression -> sumExpression . sumop term
    (45) sumop -> . PLUS
    (46) sumop -> . MINUS

    AND             reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    SEMI            reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    OR              reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    COL             reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    COMA            reduce using rule 35 (relExpression -> sumExpression relop sumExpression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    sumop                          shift and go to state 48

state 78

    (43) sumExpression -> sumExpression sumop term .
    (47) term -> term . mulop sumElement
    (51) mulop -> . PROD
    (52) mulop -> . DIV

    LE              reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    LT              reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    GT              reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    GE              reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    EQ              reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    NEQ             reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    PLUS            reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    MINUS           reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    AND             reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    SEMI            reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    OR              reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    COL             reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    COMA            reduce using rule 43 (sumExpression -> sumExpression sumop term .)
    PROD            shift and go to state 58
    DIV             shift and go to state 59

    mulop                          shift and go to state 57

state 79

    (47) term -> term mulop sumElement .

    PROD            reduce using rule 47 (term -> term mulop sumElement .)
    DIV             reduce using rule 47 (term -> term mulop sumElement .)
    LE              reduce using rule 47 (term -> term mulop sumElement .)
    LT              reduce using rule 47 (term -> term mulop sumElement .)
    GT              reduce using rule 47 (term -> term mulop sumElement .)
    GE              reduce using rule 47 (term -> term mulop sumElement .)
    EQ              reduce using rule 47 (term -> term mulop sumElement .)
    NEQ             reduce using rule 47 (term -> term mulop sumElement .)
    PLUS            reduce using rule 47 (term -> term mulop sumElement .)
    MINUS           reduce using rule 47 (term -> term mulop sumElement .)
    AND             reduce using rule 47 (term -> term mulop sumElement .)
    SEMI            reduce using rule 47 (term -> term mulop sumElement .)
    OR              reduce using rule 47 (term -> term mulop sumElement .)
    COL             reduce using rule 47 (term -> term mulop sumElement .)
    COMA            reduce using rule 47 (term -> term mulop sumElement .)


state 80

    (10) list -> LSQUARE listElements . RSQUARE

    RSQUARE         shift and go to state 95


state 81

    (11) listElements -> NUMBER .
    (12) listElements -> NUMBER . OP_NUMBER

    RSQUARE         reduce using rule 11 (listElements -> NUMBER .)
    OP_NUMBER       shift and go to state 96


state 82

    (13) listElements -> STRING .
    (14) listElements -> STRING . OP_STRING

    RSQUARE         reduce using rule 13 (listElements -> STRING .)
    OP_STRING       shift and go to state 97


state 83

    (15) listElements -> BOOLEAN .
    (16) listElements -> BOOLEAN . OP_BOOLEAN

    RSQUARE         reduce using rule 15 (listElements -> BOOLEAN .)
    OP_BOOLEAN      shift and go to state 98


state 84

    (27) conditionalStmt -> IF expressionStmt COL declarationList .
    (28) conditionalStmt -> IF expressionStmt COL declarationList . ELSE COL declarationList
    (1) declarationList -> declarationList . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (17) statement -> . expressionStmt SEMI
    (18) statement -> . conditionalStmt
    (19) statement -> . iterationStmt
    (20) statement -> . functionalStmt SEMI
    (21) statement -> . inputStmt SEMI
    (22) statement -> . outputStmt SEMI
    (23) statement -> . commentStmt
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (27) conditionalStmt -> . IF expressionStmt COL declarationList
    (28) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (24) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (53) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (54) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (55) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FILTER resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for REDUCE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    $end            reduce using rule 27 (conditionalStmt -> IF expressionStmt COL declarationList .)
    ELSE            shift and go to state 99
    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

  ! ID              [ reduce using rule 27 (conditionalStmt -> IF expressionStmt COL declarationList .) ]
  ! IF              [ reduce using rule 27 (conditionalStmt -> IF expressionStmt COL declarationList .) ]
  ! FOR             [ reduce using rule 27 (conditionalStmt -> IF expressionStmt COL declarationList .) ]
  ! FILTER          [ reduce using rule 27 (conditionalStmt -> IF expressionStmt COL declarationList .) ]
  ! MAP             [ reduce using rule 27 (conditionalStmt -> IF expressionStmt COL declarationList .) ]
  ! REDUCE          [ reduce using rule 27 (conditionalStmt -> IF expressionStmt COL declarationList .) ]
  ! INPUT           [ reduce using rule 27 (conditionalStmt -> IF expressionStmt COL declarationList .) ]
  ! OUTPUT          [ reduce using rule 27 (conditionalStmt -> IF expressionStmt COL declarationList .) ]
  ! COMMENT         [ reduce using rule 27 (conditionalStmt -> IF expressionStmt COL declarationList .) ]
  ! NOT             [ reduce using rule 27 (conditionalStmt -> IF expressionStmt COL declarationList .) ]
  ! NUMBER          [ reduce using rule 27 (conditionalStmt -> IF expressionStmt COL declarationList .) ]
  ! ELSE            [ reduce using rule 27 (conditionalStmt -> IF expressionStmt COL declarationList .) ]

    expressionStmt                 shift and go to state 6
    declaration                    shift and go to state 29
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 85

    (26) iterationElement -> ID .

    COL             reduce using rule 26 (iterationElement -> ID .)
    RPAREN          reduce using rule 26 (iterationElement -> ID .)


state 86

    (24) iterationStmt -> FOR ID IN iterationElement . COL declarationList

    COL             shift and go to state 100


state 87

    (25) iterationElement -> list .

    COL             reduce using rule 25 (iterationElement -> list .)
    RPAREN          reduce using rule 25 (iterationElement -> list .)


state 88

    (53) functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .

    SEMI            reduce using rule 53 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)


state 89

    (59) lambdaFilter -> LAMBDA lambdaElement . COL expressionStmt COMA iterationElement

    COL             shift and go to state 101


state 90

    (57) lambdaElement -> ID .
    (58) lambdaElement -> ID . OP_ID

    COL             reduce using rule 57 (lambdaElement -> ID .)
    OP_ID           shift and go to state 102


state 91

    (54) functionalStmt -> MAP LPAREN lambdaStmt RPAREN .

    SEMI            reduce using rule 54 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)


state 92

    (56) lambdaStmt -> LAMBDA lambdaElement . COL sumExpression COMA iterationElement

    COL             shift and go to state 103


state 93

    (55) functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .

    SEMI            reduce using rule 55 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)


state 94

    (61) outputStmt -> OUTPUT LPAREN declarationElement RPAREN .

    SEMI            reduce using rule 61 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)


state 95

    (10) list -> LSQUARE listElements RSQUARE .

    SEMI            reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    RPAREN          reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    COL             reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)


state 96

    (12) listElements -> NUMBER OP_NUMBER .

    RSQUARE         reduce using rule 12 (listElements -> NUMBER OP_NUMBER .)


state 97

    (14) listElements -> STRING OP_STRING .

    RSQUARE         reduce using rule 14 (listElements -> STRING OP_STRING .)


state 98

    (16) listElements -> BOOLEAN OP_BOOLEAN .

    RSQUARE         reduce using rule 16 (listElements -> BOOLEAN OP_BOOLEAN .)


state 99

    (28) conditionalStmt -> IF expressionStmt COL declarationList ELSE . COL declarationList

    COL             shift and go to state 104


state 100

    (24) iterationStmt -> FOR ID IN iterationElement COL . declarationList
    (1) declarationList -> . declarationList declaration
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (17) statement -> . expressionStmt SEMI
    (18) statement -> . conditionalStmt
    (19) statement -> . iterationStmt
    (20) statement -> . functionalStmt SEMI
    (21) statement -> . inputStmt SEMI
    (22) statement -> . outputStmt SEMI
    (23) statement -> . commentStmt
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (27) conditionalStmt -> . IF expressionStmt COL declarationList
    (28) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (24) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (53) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (54) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (55) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

    declarationList                shift and go to state 105
    declaration                    shift and go to state 2
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 101

    (59) lambdaFilter -> LAMBDA lambdaElement COL . expressionStmt COMA iterationElement
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 106
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 102

    (58) lambdaElement -> ID OP_ID .

    COL             reduce using rule 58 (lambdaElement -> ID OP_ID .)


state 103

    (56) lambdaStmt -> LAMBDA lambdaElement COL . sumExpression COMA iterationElement
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    sumExpression                  shift and go to state 107
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 104

    (28) conditionalStmt -> IF expressionStmt COL declarationList ELSE COL . declarationList
    (1) declarationList -> . declarationList declaration
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (17) statement -> . expressionStmt SEMI
    (18) statement -> . conditionalStmt
    (19) statement -> . iterationStmt
    (20) statement -> . functionalStmt SEMI
    (21) statement -> . inputStmt SEMI
    (22) statement -> . outputStmt SEMI
    (23) statement -> . commentStmt
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (27) conditionalStmt -> . IF expressionStmt COL declarationList
    (28) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (24) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (53) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (54) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (55) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 6
    declarationList                shift and go to state 108
    declaration                    shift and go to state 2
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 105

    (24) iterationStmt -> FOR ID IN iterationElement COL declarationList .
    (1) declarationList -> declarationList . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (17) statement -> . expressionStmt SEMI
    (18) statement -> . conditionalStmt
    (19) statement -> . iterationStmt
    (20) statement -> . functionalStmt SEMI
    (21) statement -> . inputStmt SEMI
    (22) statement -> . outputStmt SEMI
    (23) statement -> . commentStmt
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (27) conditionalStmt -> . IF expressionStmt COL declarationList
    (28) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (24) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (53) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (54) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (55) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FILTER resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for REDUCE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    $end            reduce using rule 24 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    ELSE            reduce using rule 24 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

  ! ID              [ reduce using rule 24 (iterationStmt -> FOR ID IN iterationElement COL declarationList .) ]
  ! IF              [ reduce using rule 24 (iterationStmt -> FOR ID IN iterationElement COL declarationList .) ]
  ! FOR             [ reduce using rule 24 (iterationStmt -> FOR ID IN iterationElement COL declarationList .) ]
  ! FILTER          [ reduce using rule 24 (iterationStmt -> FOR ID IN iterationElement COL declarationList .) ]
  ! MAP             [ reduce using rule 24 (iterationStmt -> FOR ID IN iterationElement COL declarationList .) ]
  ! REDUCE          [ reduce using rule 24 (iterationStmt -> FOR ID IN iterationElement COL declarationList .) ]
  ! INPUT           [ reduce using rule 24 (iterationStmt -> FOR ID IN iterationElement COL declarationList .) ]
  ! OUTPUT          [ reduce using rule 24 (iterationStmt -> FOR ID IN iterationElement COL declarationList .) ]
  ! COMMENT         [ reduce using rule 24 (iterationStmt -> FOR ID IN iterationElement COL declarationList .) ]
  ! NOT             [ reduce using rule 24 (iterationStmt -> FOR ID IN iterationElement COL declarationList .) ]
  ! NUMBER          [ reduce using rule 24 (iterationStmt -> FOR ID IN iterationElement COL declarationList .) ]

    declaration                    shift and go to state 29
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 106

    (59) lambdaFilter -> LAMBDA lambdaElement COL expressionStmt . COMA iterationElement
    (29) expressionStmt -> expressionStmt . OR andExpression

    COMA            shift and go to state 109
    OR              shift and go to state 33


state 107

    (56) lambdaStmt -> LAMBDA lambdaElement COL sumExpression . COMA iterationElement
    (43) sumExpression -> sumExpression . sumop term
    (45) sumop -> . PLUS
    (46) sumop -> . MINUS

    COMA            shift and go to state 110
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    sumop                          shift and go to state 48

state 108

    (28) conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .
    (1) declarationList -> declarationList . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (17) statement -> . expressionStmt SEMI
    (18) statement -> . conditionalStmt
    (19) statement -> . iterationStmt
    (20) statement -> . functionalStmt SEMI
    (21) statement -> . inputStmt SEMI
    (22) statement -> . outputStmt SEMI
    (23) statement -> . commentStmt
    (29) expressionStmt -> . expressionStmt OR andExpression
    (30) expressionStmt -> . andExpression
    (27) conditionalStmt -> . IF expressionStmt COL declarationList
    (28) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (24) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (53) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (54) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (55) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (60) inputStmt -> . INPUT LPAREN RPAREN
    (61) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (62) commentStmt -> . COMMENT
    (31) andExpression -> . andExpression AND unaryRelExpression
    (32) andExpression -> . unaryRelExpression
    (33) unaryRelExpression -> . NOT unaryRelExpression
    (34) unaryRelExpression -> . relExpression
    (35) relExpression -> . sumExpression relop sumExpression
    (36) relExpression -> . sumExpression
    (43) sumExpression -> . sumExpression sumop term
    (44) sumExpression -> . term
    (47) term -> . term mulop sumElement
    (48) term -> . sumElement
    (49) sumElement -> . ID
    (50) sumElement -> . NUMBER

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FILTER resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for REDUCE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    $end            reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    ELSE            reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

  ! ID              [ reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .) ]
  ! IF              [ reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .) ]
  ! FOR             [ reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .) ]
  ! FILTER          [ reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .) ]
  ! MAP             [ reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .) ]
  ! REDUCE          [ reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .) ]
  ! INPUT           [ reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .) ]
  ! OUTPUT          [ reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .) ]
  ! COMMENT         [ reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .) ]
  ! NOT             [ reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .) ]
  ! NUMBER          [ reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .) ]

    expressionStmt                 shift and go to state 6
    declaration                    shift and go to state 29
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 109

    (59) lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA . iterationElement
    (25) iterationElement -> . list
    (26) iterationElement -> . ID
    (10) list -> . LSQUARE listElements RSQUARE

    ID              shift and go to state 85
    LSQUARE         shift and go to state 65

    iterationElement               shift and go to state 111
    list                           shift and go to state 87

state 110

    (56) lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA . iterationElement
    (25) iterationElement -> . list
    (26) iterationElement -> . ID
    (10) list -> . LSQUARE listElements RSQUARE

    ID              shift and go to state 85
    LSQUARE         shift and go to state 65

    iterationElement               shift and go to state 112
    list                           shift and go to state 87

state 111

    (59) lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA iterationElement .

    RPAREN          reduce using rule 59 (lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA iterationElement .)


state 112

    (56) lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA iterationElement .

    RPAREN          reduce using rule 56 (lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA iterationElement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for FILTER in state 84 resolved as shift
WARNING: shift/reduce conflict for MAP in state 84 resolved as shift
WARNING: shift/reduce conflict for REDUCE in state 84 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 84 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 84 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 84 resolved as shift
WARNING: shift/reduce conflict for NOT in state 84 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for IF in state 105 resolved as shift
WARNING: shift/reduce conflict for FOR in state 105 resolved as shift
WARNING: shift/reduce conflict for FILTER in state 105 resolved as shift
WARNING: shift/reduce conflict for MAP in state 105 resolved as shift
WARNING: shift/reduce conflict for REDUCE in state 105 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 105 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 105 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 105 resolved as shift
WARNING: shift/reduce conflict for NOT in state 105 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 108 resolved as shift
WARNING: shift/reduce conflict for IF in state 108 resolved as shift
WARNING: shift/reduce conflict for FOR in state 108 resolved as shift
WARNING: shift/reduce conflict for FILTER in state 108 resolved as shift
WARNING: shift/reduce conflict for MAP in state 108 resolved as shift
WARNING: shift/reduce conflict for REDUCE in state 108 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 108 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 108 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 108 resolved as shift
WARNING: shift/reduce conflict for NOT in state 108 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 108 resolved as shift
