Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> declarationList
Rule 1     declarationList -> declaration declarationList
Rule 2     declarationList -> declaration
Rule 3     declaration -> varDeclaration SEMI
Rule 4     declaration -> statement
Rule 5     varDeclaration -> ID EQUALS declarationElement
Rule 6     declarationElement -> list
Rule 7     declarationElement -> sumExpression
Rule 8     declarationElement -> STRING
Rule 9     declarationElement -> BOOLEAN
Rule 10    declarationElement -> inputStmt
Rule 11    list -> LSQUARE listElements RSQUARE
Rule 12    listElements -> NUMBER
Rule 13    listElements -> NUMBER OP_NUMBER
Rule 14    listElements -> STRING
Rule 15    listElements -> STRING OP_STRING
Rule 16    listElements -> BOOLEAN
Rule 17    listElements -> BOOLEAN OP_BOOLEAN
Rule 18    statement -> expressionStmt SEMI
Rule 19    statement -> conditionalStmt
Rule 20    statement -> iterationStmt
Rule 21    statement -> functionalStmt SEMI
Rule 22    statement -> inputStmt SEMI
Rule 23    statement -> outputStmt SEMI
Rule 24    statement -> commentStmt
Rule 25    iterationStmt -> FOR ID IN iterationElement COL declarationList
Rule 26    iterationElement -> list
Rule 27    iterationElement -> ID
Rule 28    conditionalStmt -> IF expressionStmt COL declarationList
Rule 29    conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList
Rule 30    expressionStmt -> expressionStmt OR andExpression
Rule 31    expressionStmt -> andExpression
Rule 32    andExpression -> andExpression AND unaryRelExpression
Rule 33    andExpression -> unaryRelExpression
Rule 34    unaryRelExpression -> NOT unaryRelExpression
Rule 35    unaryRelExpression -> relExpression
Rule 36    relExpression -> sumExpression relop sumExpression
Rule 37    relExpression -> sumExpression
Rule 38    relop -> LE
Rule 39    relop -> LT
Rule 40    relop -> GT
Rule 41    relop -> GE
Rule 42    relop -> EQ
Rule 43    relop -> NEQ
Rule 44    sumExpression -> sumExpression sumop term
Rule 45    sumExpression -> term
Rule 46    sumop -> PLUS
Rule 47    sumop -> MINUS
Rule 48    term -> term mulop sumElement
Rule 49    term -> sumElement
Rule 50    sumElement -> ID
Rule 51    sumElement -> NUMBER
Rule 52    mulop -> PROD
Rule 53    mulop -> DIV
Rule 54    functionalStmt -> FILTER LPAREN lambdaFilter RPAREN
Rule 55    functionalStmt -> MAP LPAREN lambdaStmt RPAREN
Rule 56    functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN
Rule 57    lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA iterationElement
Rule 58    lambdaElement -> ID
Rule 59    lambdaElement -> ID OP_ID
Rule 60    lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA iterationElement
Rule 61    inputStmt -> INPUT LPAREN RPAREN
Rule 62    outputStmt -> OUTPUT LPAREN declarationElement RPAREN
Rule 63    commentStmt -> COMMENT

Terminals, with rules where they appear

AND                  : 32
BOOLEAN              : 9 16 17
COL                  : 25 28 29 29 57 60
COMA                 : 57 60
COMMENT              : 63
DIV                  : 53
ELSE                 : 29
EQ                   : 42
EQUALS               : 5
FILTER               : 54
FOR                  : 25
GE                   : 41
GT                   : 40
ID                   : 5 25 27 50 58 59
IF                   : 28 29
IN                   : 25
INPUT                : 61
LAMBDA               : 57 60
LE                   : 38
LPAREN               : 54 55 56 61 62
LSQUARE              : 11
LT                   : 39
MAP                  : 55
MINUS                : 47
NEQ                  : 43
NOT                  : 34
NUMBER               : 12 13 51
OP_BOOLEAN           : 17
OP_ID                : 59
OP_NUMBER            : 13
OP_STRING            : 15
OR                   : 30
OUTPUT               : 62
PLUS                 : 46
PROD                 : 52
REDUCE               : 56
RPAREN               : 54 55 56 61 62
RSQUARE              : 11
SEMI                 : 3 18 21 22 23
STRING               : 8 14 15
error                : 

Nonterminals, with rules where they appear

andExpression        : 30 31 32
commentStmt          : 24
conditionalStmt      : 19
declaration          : 1 2
declarationElement   : 5 62
declarationList      : 1 25 28 29 29 0
expressionStmt       : 18 28 29 30 60
functionalStmt       : 21
inputStmt            : 10 22
iterationElement     : 25 57 60
iterationStmt        : 20
lambdaElement        : 57 60
lambdaFilter         : 54
lambdaStmt           : 55 56
list                 : 6 26
listElements         : 11
mulop                : 48
outputStmt           : 23
relExpression        : 35
relop                : 36
statement            : 4
sumElement           : 48 49
sumExpression        : 7 36 36 37 44 57
sumop                : 44
term                 : 44 45 48
unaryRelExpression   : 32 33 34
varDeclaration       : 3

Parsing method: LALR

state 0

    (0) S' -> . declarationList
    (1) declarationList -> . declaration declarationList
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (18) statement -> . expressionStmt SEMI
    (19) statement -> . conditionalStmt
    (20) statement -> . iterationStmt
    (21) statement -> . functionalStmt SEMI
    (22) statement -> . inputStmt SEMI
    (23) statement -> . outputStmt SEMI
    (24) statement -> . commentStmt
    (30) expressionStmt -> . expressionStmt OR andExpression
    (31) expressionStmt -> . andExpression
    (28) conditionalStmt -> . IF expressionStmt COL declarationList
    (29) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (25) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (54) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (55) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (56) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (61) inputStmt -> . INPUT LPAREN RPAREN
    (62) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (63) commentStmt -> . COMMENT
    (32) andExpression -> . andExpression AND unaryRelExpression
    (33) andExpression -> . unaryRelExpression
    (34) unaryRelExpression -> . NOT unaryRelExpression
    (35) unaryRelExpression -> . relExpression
    (36) relExpression -> . sumExpression relop sumExpression
    (37) relExpression -> . sumExpression
    (44) sumExpression -> . sumExpression sumop term
    (45) sumExpression -> . term
    (48) term -> . term mulop sumElement
    (49) term -> . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

    declarationList                shift and go to state 1
    declaration                    shift and go to state 2
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 1

    (0) S' -> declarationList .



state 2

    (1) declarationList -> declaration . declarationList
    (2) declarationList -> declaration .
    (1) declarationList -> . declaration declarationList
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (18) statement -> . expressionStmt SEMI
    (19) statement -> . conditionalStmt
    (20) statement -> . iterationStmt
    (21) statement -> . functionalStmt SEMI
    (22) statement -> . inputStmt SEMI
    (23) statement -> . outputStmt SEMI
    (24) statement -> . commentStmt
    (30) expressionStmt -> . expressionStmt OR andExpression
    (31) expressionStmt -> . andExpression
    (28) conditionalStmt -> . IF expressionStmt COL declarationList
    (29) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (25) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (54) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (55) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (56) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (61) inputStmt -> . INPUT LPAREN RPAREN
    (62) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (63) commentStmt -> . COMMENT
    (32) andExpression -> . andExpression AND unaryRelExpression
    (33) andExpression -> . unaryRelExpression
    (34) unaryRelExpression -> . NOT unaryRelExpression
    (35) unaryRelExpression -> . relExpression
    (36) relExpression -> . sumExpression relop sumExpression
    (37) relExpression -> . sumExpression
    (44) sumExpression -> . sumExpression sumop term
    (45) sumExpression -> . term
    (48) term -> . term mulop sumElement
    (49) term -> . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FILTER resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for REDUCE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    $end            reduce using rule 2 (declarationList -> declaration .)
    ELSE            reduce using rule 2 (declarationList -> declaration .)
    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

  ! ID              [ reduce using rule 2 (declarationList -> declaration .) ]
  ! IF              [ reduce using rule 2 (declarationList -> declaration .) ]
  ! FOR             [ reduce using rule 2 (declarationList -> declaration .) ]
  ! FILTER          [ reduce using rule 2 (declarationList -> declaration .) ]
  ! MAP             [ reduce using rule 2 (declarationList -> declaration .) ]
  ! REDUCE          [ reduce using rule 2 (declarationList -> declaration .) ]
  ! INPUT           [ reduce using rule 2 (declarationList -> declaration .) ]
  ! OUTPUT          [ reduce using rule 2 (declarationList -> declaration .) ]
  ! COMMENT         [ reduce using rule 2 (declarationList -> declaration .) ]
  ! NOT             [ reduce using rule 2 (declarationList -> declaration .) ]
  ! NUMBER          [ reduce using rule 2 (declarationList -> declaration .) ]

    declaration                    shift and go to state 2
    declarationList                shift and go to state 29
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 3

    (3) declaration -> varDeclaration . SEMI

    SEMI            shift and go to state 30


state 4

    (4) declaration -> statement .

    ID              reduce using rule 4 (declaration -> statement .)
    IF              reduce using rule 4 (declaration -> statement .)
    FOR             reduce using rule 4 (declaration -> statement .)
    FILTER          reduce using rule 4 (declaration -> statement .)
    MAP             reduce using rule 4 (declaration -> statement .)
    REDUCE          reduce using rule 4 (declaration -> statement .)
    INPUT           reduce using rule 4 (declaration -> statement .)
    OUTPUT          reduce using rule 4 (declaration -> statement .)
    COMMENT         reduce using rule 4 (declaration -> statement .)
    NOT             reduce using rule 4 (declaration -> statement .)
    NUMBER          reduce using rule 4 (declaration -> statement .)
    $end            reduce using rule 4 (declaration -> statement .)
    ELSE            reduce using rule 4 (declaration -> statement .)


state 5

    (5) varDeclaration -> ID . EQUALS declarationElement
    (50) sumElement -> ID .

    EQUALS          shift and go to state 31
    PROD            reduce using rule 50 (sumElement -> ID .)
    DIV             reduce using rule 50 (sumElement -> ID .)
    LE              reduce using rule 50 (sumElement -> ID .)
    LT              reduce using rule 50 (sumElement -> ID .)
    GT              reduce using rule 50 (sumElement -> ID .)
    GE              reduce using rule 50 (sumElement -> ID .)
    EQ              reduce using rule 50 (sumElement -> ID .)
    NEQ             reduce using rule 50 (sumElement -> ID .)
    PLUS            reduce using rule 50 (sumElement -> ID .)
    MINUS           reduce using rule 50 (sumElement -> ID .)
    AND             reduce using rule 50 (sumElement -> ID .)
    SEMI            reduce using rule 50 (sumElement -> ID .)
    OR              reduce using rule 50 (sumElement -> ID .)


state 6

    (18) statement -> expressionStmt . SEMI
    (30) expressionStmt -> expressionStmt . OR andExpression

    SEMI            shift and go to state 32
    OR              shift and go to state 33


state 7

    (19) statement -> conditionalStmt .

    ID              reduce using rule 19 (statement -> conditionalStmt .)
    IF              reduce using rule 19 (statement -> conditionalStmt .)
    FOR             reduce using rule 19 (statement -> conditionalStmt .)
    FILTER          reduce using rule 19 (statement -> conditionalStmt .)
    MAP             reduce using rule 19 (statement -> conditionalStmt .)
    REDUCE          reduce using rule 19 (statement -> conditionalStmt .)
    INPUT           reduce using rule 19 (statement -> conditionalStmt .)
    OUTPUT          reduce using rule 19 (statement -> conditionalStmt .)
    COMMENT         reduce using rule 19 (statement -> conditionalStmt .)
    NOT             reduce using rule 19 (statement -> conditionalStmt .)
    NUMBER          reduce using rule 19 (statement -> conditionalStmt .)
    $end            reduce using rule 19 (statement -> conditionalStmt .)
    ELSE            reduce using rule 19 (statement -> conditionalStmt .)


state 8

    (20) statement -> iterationStmt .

    ID              reduce using rule 20 (statement -> iterationStmt .)
    IF              reduce using rule 20 (statement -> iterationStmt .)
    FOR             reduce using rule 20 (statement -> iterationStmt .)
    FILTER          reduce using rule 20 (statement -> iterationStmt .)
    MAP             reduce using rule 20 (statement -> iterationStmt .)
    REDUCE          reduce using rule 20 (statement -> iterationStmt .)
    INPUT           reduce using rule 20 (statement -> iterationStmt .)
    OUTPUT          reduce using rule 20 (statement -> iterationStmt .)
    COMMENT         reduce using rule 20 (statement -> iterationStmt .)
    NOT             reduce using rule 20 (statement -> iterationStmt .)
    NUMBER          reduce using rule 20 (statement -> iterationStmt .)
    $end            reduce using rule 20 (statement -> iterationStmt .)
    ELSE            reduce using rule 20 (statement -> iterationStmt .)


state 9

    (21) statement -> functionalStmt . SEMI

    SEMI            shift and go to state 34


state 10

    (22) statement -> inputStmt . SEMI

    SEMI            shift and go to state 35


state 11

    (23) statement -> outputStmt . SEMI

    SEMI            shift and go to state 36


state 12

    (24) statement -> commentStmt .

    ID              reduce using rule 24 (statement -> commentStmt .)
    IF              reduce using rule 24 (statement -> commentStmt .)
    FOR             reduce using rule 24 (statement -> commentStmt .)
    FILTER          reduce using rule 24 (statement -> commentStmt .)
    MAP             reduce using rule 24 (statement -> commentStmt .)
    REDUCE          reduce using rule 24 (statement -> commentStmt .)
    INPUT           reduce using rule 24 (statement -> commentStmt .)
    OUTPUT          reduce using rule 24 (statement -> commentStmt .)
    COMMENT         reduce using rule 24 (statement -> commentStmt .)
    NOT             reduce using rule 24 (statement -> commentStmt .)
    NUMBER          reduce using rule 24 (statement -> commentStmt .)
    $end            reduce using rule 24 (statement -> commentStmt .)
    ELSE            reduce using rule 24 (statement -> commentStmt .)


state 13

    (31) expressionStmt -> andExpression .
    (32) andExpression -> andExpression . AND unaryRelExpression

    SEMI            reduce using rule 31 (expressionStmt -> andExpression .)
    OR              reduce using rule 31 (expressionStmt -> andExpression .)
    COL             reduce using rule 31 (expressionStmt -> andExpression .)
    COMA            reduce using rule 31 (expressionStmt -> andExpression .)
    AND             shift and go to state 37


state 14

    (28) conditionalStmt -> IF . expressionStmt COL declarationList
    (29) conditionalStmt -> IF . expressionStmt COL declarationList ELSE COL declarationList
    (30) expressionStmt -> . expressionStmt OR andExpression
    (31) expressionStmt -> . andExpression
    (32) andExpression -> . andExpression AND unaryRelExpression
    (33) andExpression -> . unaryRelExpression
    (34) unaryRelExpression -> . NOT unaryRelExpression
    (35) unaryRelExpression -> . relExpression
    (36) relExpression -> . sumExpression relop sumExpression
    (37) relExpression -> . sumExpression
    (44) sumExpression -> . sumExpression sumop term
    (45) sumExpression -> . term
    (48) term -> . term mulop sumElement
    (49) term -> . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 38
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 15

    (25) iterationStmt -> FOR . ID IN iterationElement COL declarationList

    ID              shift and go to state 40


state 16

    (54) functionalStmt -> FILTER . LPAREN lambdaFilter RPAREN

    LPAREN          shift and go to state 41


state 17

    (55) functionalStmt -> MAP . LPAREN lambdaStmt RPAREN

    LPAREN          shift and go to state 42


state 18

    (56) functionalStmt -> REDUCE . LPAREN lambdaStmt RPAREN

    LPAREN          shift and go to state 43


state 19

    (61) inputStmt -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 44


state 20

    (62) outputStmt -> OUTPUT . LPAREN declarationElement RPAREN

    LPAREN          shift and go to state 45


state 21

    (63) commentStmt -> COMMENT .

    ID              reduce using rule 63 (commentStmt -> COMMENT .)
    IF              reduce using rule 63 (commentStmt -> COMMENT .)
    FOR             reduce using rule 63 (commentStmt -> COMMENT .)
    FILTER          reduce using rule 63 (commentStmt -> COMMENT .)
    MAP             reduce using rule 63 (commentStmt -> COMMENT .)
    REDUCE          reduce using rule 63 (commentStmt -> COMMENT .)
    INPUT           reduce using rule 63 (commentStmt -> COMMENT .)
    OUTPUT          reduce using rule 63 (commentStmt -> COMMENT .)
    COMMENT         reduce using rule 63 (commentStmt -> COMMENT .)
    NOT             reduce using rule 63 (commentStmt -> COMMENT .)
    NUMBER          reduce using rule 63 (commentStmt -> COMMENT .)
    $end            reduce using rule 63 (commentStmt -> COMMENT .)
    ELSE            reduce using rule 63 (commentStmt -> COMMENT .)


state 22

    (33) andExpression -> unaryRelExpression .

    AND             reduce using rule 33 (andExpression -> unaryRelExpression .)
    SEMI            reduce using rule 33 (andExpression -> unaryRelExpression .)
    OR              reduce using rule 33 (andExpression -> unaryRelExpression .)
    COL             reduce using rule 33 (andExpression -> unaryRelExpression .)
    COMA            reduce using rule 33 (andExpression -> unaryRelExpression .)


state 23

    (34) unaryRelExpression -> NOT . unaryRelExpression
    (34) unaryRelExpression -> . NOT unaryRelExpression
    (35) unaryRelExpression -> . relExpression
    (36) relExpression -> . sumExpression relop sumExpression
    (37) relExpression -> . sumExpression
    (44) sumExpression -> . sumExpression sumop term
    (45) sumExpression -> . term
    (48) term -> . term mulop sumElement
    (49) term -> . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    unaryRelExpression             shift and go to state 46
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 24

    (35) unaryRelExpression -> relExpression .

    AND             reduce using rule 35 (unaryRelExpression -> relExpression .)
    SEMI            reduce using rule 35 (unaryRelExpression -> relExpression .)
    OR              reduce using rule 35 (unaryRelExpression -> relExpression .)
    COL             reduce using rule 35 (unaryRelExpression -> relExpression .)
    COMA            reduce using rule 35 (unaryRelExpression -> relExpression .)


state 25

    (36) relExpression -> sumExpression . relop sumExpression
    (37) relExpression -> sumExpression .
    (44) sumExpression -> sumExpression . sumop term
    (38) relop -> . LE
    (39) relop -> . LT
    (40) relop -> . GT
    (41) relop -> . GE
    (42) relop -> . EQ
    (43) relop -> . NEQ
    (46) sumop -> . PLUS
    (47) sumop -> . MINUS

    AND             reduce using rule 37 (relExpression -> sumExpression .)
    SEMI            reduce using rule 37 (relExpression -> sumExpression .)
    OR              reduce using rule 37 (relExpression -> sumExpression .)
    COL             reduce using rule 37 (relExpression -> sumExpression .)
    COMA            reduce using rule 37 (relExpression -> sumExpression .)
    LE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    relop                          shift and go to state 47
    sumop                          shift and go to state 48

state 26

    (45) sumExpression -> term .
    (48) term -> term . mulop sumElement
    (52) mulop -> . PROD
    (53) mulop -> . DIV

    LE              reduce using rule 45 (sumExpression -> term .)
    LT              reduce using rule 45 (sumExpression -> term .)
    GT              reduce using rule 45 (sumExpression -> term .)
    GE              reduce using rule 45 (sumExpression -> term .)
    EQ              reduce using rule 45 (sumExpression -> term .)
    NEQ             reduce using rule 45 (sumExpression -> term .)
    PLUS            reduce using rule 45 (sumExpression -> term .)
    MINUS           reduce using rule 45 (sumExpression -> term .)
    AND             reduce using rule 45 (sumExpression -> term .)
    SEMI            reduce using rule 45 (sumExpression -> term .)
    OR              reduce using rule 45 (sumExpression -> term .)
    COL             reduce using rule 45 (sumExpression -> term .)
    COMA            reduce using rule 45 (sumExpression -> term .)
    RPAREN          reduce using rule 45 (sumExpression -> term .)
    PROD            shift and go to state 58
    DIV             shift and go to state 59

    mulop                          shift and go to state 57

state 27

    (49) term -> sumElement .

    PROD            reduce using rule 49 (term -> sumElement .)
    DIV             reduce using rule 49 (term -> sumElement .)
    LE              reduce using rule 49 (term -> sumElement .)
    LT              reduce using rule 49 (term -> sumElement .)
    GT              reduce using rule 49 (term -> sumElement .)
    GE              reduce using rule 49 (term -> sumElement .)
    EQ              reduce using rule 49 (term -> sumElement .)
    NEQ             reduce using rule 49 (term -> sumElement .)
    PLUS            reduce using rule 49 (term -> sumElement .)
    MINUS           reduce using rule 49 (term -> sumElement .)
    AND             reduce using rule 49 (term -> sumElement .)
    SEMI            reduce using rule 49 (term -> sumElement .)
    OR              reduce using rule 49 (term -> sumElement .)
    COL             reduce using rule 49 (term -> sumElement .)
    COMA            reduce using rule 49 (term -> sumElement .)
    RPAREN          reduce using rule 49 (term -> sumElement .)


state 28

    (51) sumElement -> NUMBER .

    PROD            reduce using rule 51 (sumElement -> NUMBER .)
    DIV             reduce using rule 51 (sumElement -> NUMBER .)
    LE              reduce using rule 51 (sumElement -> NUMBER .)
    LT              reduce using rule 51 (sumElement -> NUMBER .)
    GT              reduce using rule 51 (sumElement -> NUMBER .)
    GE              reduce using rule 51 (sumElement -> NUMBER .)
    EQ              reduce using rule 51 (sumElement -> NUMBER .)
    NEQ             reduce using rule 51 (sumElement -> NUMBER .)
    PLUS            reduce using rule 51 (sumElement -> NUMBER .)
    MINUS           reduce using rule 51 (sumElement -> NUMBER .)
    AND             reduce using rule 51 (sumElement -> NUMBER .)
    SEMI            reduce using rule 51 (sumElement -> NUMBER .)
    OR              reduce using rule 51 (sumElement -> NUMBER .)
    COL             reduce using rule 51 (sumElement -> NUMBER .)
    COMA            reduce using rule 51 (sumElement -> NUMBER .)
    RPAREN          reduce using rule 51 (sumElement -> NUMBER .)


state 29

    (1) declarationList -> declaration declarationList .

    $end            reduce using rule 1 (declarationList -> declaration declarationList .)
    ELSE            reduce using rule 1 (declarationList -> declaration declarationList .)
    ID              reduce using rule 1 (declarationList -> declaration declarationList .)
    IF              reduce using rule 1 (declarationList -> declaration declarationList .)
    FOR             reduce using rule 1 (declarationList -> declaration declarationList .)
    FILTER          reduce using rule 1 (declarationList -> declaration declarationList .)
    MAP             reduce using rule 1 (declarationList -> declaration declarationList .)
    REDUCE          reduce using rule 1 (declarationList -> declaration declarationList .)
    INPUT           reduce using rule 1 (declarationList -> declaration declarationList .)
    OUTPUT          reduce using rule 1 (declarationList -> declaration declarationList .)
    COMMENT         reduce using rule 1 (declarationList -> declaration declarationList .)
    NOT             reduce using rule 1 (declarationList -> declaration declarationList .)
    NUMBER          reduce using rule 1 (declarationList -> declaration declarationList .)


state 30

    (3) declaration -> varDeclaration SEMI .

    ID              reduce using rule 3 (declaration -> varDeclaration SEMI .)
    IF              reduce using rule 3 (declaration -> varDeclaration SEMI .)
    FOR             reduce using rule 3 (declaration -> varDeclaration SEMI .)
    FILTER          reduce using rule 3 (declaration -> varDeclaration SEMI .)
    MAP             reduce using rule 3 (declaration -> varDeclaration SEMI .)
    REDUCE          reduce using rule 3 (declaration -> varDeclaration SEMI .)
    INPUT           reduce using rule 3 (declaration -> varDeclaration SEMI .)
    OUTPUT          reduce using rule 3 (declaration -> varDeclaration SEMI .)
    COMMENT         reduce using rule 3 (declaration -> varDeclaration SEMI .)
    NOT             reduce using rule 3 (declaration -> varDeclaration SEMI .)
    NUMBER          reduce using rule 3 (declaration -> varDeclaration SEMI .)
    $end            reduce using rule 3 (declaration -> varDeclaration SEMI .)
    ELSE            reduce using rule 3 (declaration -> varDeclaration SEMI .)


state 31

    (5) varDeclaration -> ID EQUALS . declarationElement
    (6) declarationElement -> . list
    (7) declarationElement -> . sumExpression
    (8) declarationElement -> . STRING
    (9) declarationElement -> . BOOLEAN
    (10) declarationElement -> . inputStmt
    (11) list -> . LSQUARE listElements RSQUARE
    (44) sumExpression -> . sumExpression sumop term
    (45) sumExpression -> . term
    (61) inputStmt -> . INPUT LPAREN RPAREN
    (48) term -> . term mulop sumElement
    (49) term -> . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64
    LSQUARE         shift and go to state 66
    INPUT           shift and go to state 19
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    declarationElement             shift and go to state 60
    list                           shift and go to state 61
    sumExpression                  shift and go to state 62
    inputStmt                      shift and go to state 65
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 32

    (18) statement -> expressionStmt SEMI .

    ID              reduce using rule 18 (statement -> expressionStmt SEMI .)
    IF              reduce using rule 18 (statement -> expressionStmt SEMI .)
    FOR             reduce using rule 18 (statement -> expressionStmt SEMI .)
    FILTER          reduce using rule 18 (statement -> expressionStmt SEMI .)
    MAP             reduce using rule 18 (statement -> expressionStmt SEMI .)
    REDUCE          reduce using rule 18 (statement -> expressionStmt SEMI .)
    INPUT           reduce using rule 18 (statement -> expressionStmt SEMI .)
    OUTPUT          reduce using rule 18 (statement -> expressionStmt SEMI .)
    COMMENT         reduce using rule 18 (statement -> expressionStmt SEMI .)
    NOT             reduce using rule 18 (statement -> expressionStmt SEMI .)
    NUMBER          reduce using rule 18 (statement -> expressionStmt SEMI .)
    $end            reduce using rule 18 (statement -> expressionStmt SEMI .)
    ELSE            reduce using rule 18 (statement -> expressionStmt SEMI .)


state 33

    (30) expressionStmt -> expressionStmt OR . andExpression
    (32) andExpression -> . andExpression AND unaryRelExpression
    (33) andExpression -> . unaryRelExpression
    (34) unaryRelExpression -> . NOT unaryRelExpression
    (35) unaryRelExpression -> . relExpression
    (36) relExpression -> . sumExpression relop sumExpression
    (37) relExpression -> . sumExpression
    (44) sumExpression -> . sumExpression sumop term
    (45) sumExpression -> . term
    (48) term -> . term mulop sumElement
    (49) term -> . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    andExpression                  shift and go to state 67
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 34

    (21) statement -> functionalStmt SEMI .

    ID              reduce using rule 21 (statement -> functionalStmt SEMI .)
    IF              reduce using rule 21 (statement -> functionalStmt SEMI .)
    FOR             reduce using rule 21 (statement -> functionalStmt SEMI .)
    FILTER          reduce using rule 21 (statement -> functionalStmt SEMI .)
    MAP             reduce using rule 21 (statement -> functionalStmt SEMI .)
    REDUCE          reduce using rule 21 (statement -> functionalStmt SEMI .)
    INPUT           reduce using rule 21 (statement -> functionalStmt SEMI .)
    OUTPUT          reduce using rule 21 (statement -> functionalStmt SEMI .)
    COMMENT         reduce using rule 21 (statement -> functionalStmt SEMI .)
    NOT             reduce using rule 21 (statement -> functionalStmt SEMI .)
    NUMBER          reduce using rule 21 (statement -> functionalStmt SEMI .)
    $end            reduce using rule 21 (statement -> functionalStmt SEMI .)
    ELSE            reduce using rule 21 (statement -> functionalStmt SEMI .)


state 35

    (22) statement -> inputStmt SEMI .

    ID              reduce using rule 22 (statement -> inputStmt SEMI .)
    IF              reduce using rule 22 (statement -> inputStmt SEMI .)
    FOR             reduce using rule 22 (statement -> inputStmt SEMI .)
    FILTER          reduce using rule 22 (statement -> inputStmt SEMI .)
    MAP             reduce using rule 22 (statement -> inputStmt SEMI .)
    REDUCE          reduce using rule 22 (statement -> inputStmt SEMI .)
    INPUT           reduce using rule 22 (statement -> inputStmt SEMI .)
    OUTPUT          reduce using rule 22 (statement -> inputStmt SEMI .)
    COMMENT         reduce using rule 22 (statement -> inputStmt SEMI .)
    NOT             reduce using rule 22 (statement -> inputStmt SEMI .)
    NUMBER          reduce using rule 22 (statement -> inputStmt SEMI .)
    $end            reduce using rule 22 (statement -> inputStmt SEMI .)
    ELSE            reduce using rule 22 (statement -> inputStmt SEMI .)


state 36

    (23) statement -> outputStmt SEMI .

    ID              reduce using rule 23 (statement -> outputStmt SEMI .)
    IF              reduce using rule 23 (statement -> outputStmt SEMI .)
    FOR             reduce using rule 23 (statement -> outputStmt SEMI .)
    FILTER          reduce using rule 23 (statement -> outputStmt SEMI .)
    MAP             reduce using rule 23 (statement -> outputStmt SEMI .)
    REDUCE          reduce using rule 23 (statement -> outputStmt SEMI .)
    INPUT           reduce using rule 23 (statement -> outputStmt SEMI .)
    OUTPUT          reduce using rule 23 (statement -> outputStmt SEMI .)
    COMMENT         reduce using rule 23 (statement -> outputStmt SEMI .)
    NOT             reduce using rule 23 (statement -> outputStmt SEMI .)
    NUMBER          reduce using rule 23 (statement -> outputStmt SEMI .)
    $end            reduce using rule 23 (statement -> outputStmt SEMI .)
    ELSE            reduce using rule 23 (statement -> outputStmt SEMI .)


state 37

    (32) andExpression -> andExpression AND . unaryRelExpression
    (34) unaryRelExpression -> . NOT unaryRelExpression
    (35) unaryRelExpression -> . relExpression
    (36) relExpression -> . sumExpression relop sumExpression
    (37) relExpression -> . sumExpression
    (44) sumExpression -> . sumExpression sumop term
    (45) sumExpression -> . term
    (48) term -> . term mulop sumElement
    (49) term -> . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    unaryRelExpression             shift and go to state 68
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 38

    (28) conditionalStmt -> IF expressionStmt . COL declarationList
    (29) conditionalStmt -> IF expressionStmt . COL declarationList ELSE COL declarationList
    (30) expressionStmt -> expressionStmt . OR andExpression

    COL             shift and go to state 69
    OR              shift and go to state 33


state 39

    (50) sumElement -> ID .

    PROD            reduce using rule 50 (sumElement -> ID .)
    DIV             reduce using rule 50 (sumElement -> ID .)
    LE              reduce using rule 50 (sumElement -> ID .)
    LT              reduce using rule 50 (sumElement -> ID .)
    GT              reduce using rule 50 (sumElement -> ID .)
    GE              reduce using rule 50 (sumElement -> ID .)
    EQ              reduce using rule 50 (sumElement -> ID .)
    NEQ             reduce using rule 50 (sumElement -> ID .)
    PLUS            reduce using rule 50 (sumElement -> ID .)
    MINUS           reduce using rule 50 (sumElement -> ID .)
    AND             reduce using rule 50 (sumElement -> ID .)
    COL             reduce using rule 50 (sumElement -> ID .)
    OR              reduce using rule 50 (sumElement -> ID .)
    SEMI            reduce using rule 50 (sumElement -> ID .)
    COMA            reduce using rule 50 (sumElement -> ID .)
    RPAREN          reduce using rule 50 (sumElement -> ID .)


state 40

    (25) iterationStmt -> FOR ID . IN iterationElement COL declarationList

    IN              shift and go to state 70


state 41

    (54) functionalStmt -> FILTER LPAREN . lambdaFilter RPAREN
    (60) lambdaFilter -> . LAMBDA lambdaElement COL expressionStmt COMA iterationElement

    LAMBDA          shift and go to state 72

    lambdaFilter                   shift and go to state 71

state 42

    (55) functionalStmt -> MAP LPAREN . lambdaStmt RPAREN
    (57) lambdaStmt -> . LAMBDA lambdaElement COL sumExpression COMA iterationElement

    LAMBDA          shift and go to state 74

    lambdaStmt                     shift and go to state 73

state 43

    (56) functionalStmt -> REDUCE LPAREN . lambdaStmt RPAREN
    (57) lambdaStmt -> . LAMBDA lambdaElement COL sumExpression COMA iterationElement

    LAMBDA          shift and go to state 74

    lambdaStmt                     shift and go to state 75

state 44

    (61) inputStmt -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 76


state 45

    (62) outputStmt -> OUTPUT LPAREN . declarationElement RPAREN
    (6) declarationElement -> . list
    (7) declarationElement -> . sumExpression
    (8) declarationElement -> . STRING
    (9) declarationElement -> . BOOLEAN
    (10) declarationElement -> . inputStmt
    (11) list -> . LSQUARE listElements RSQUARE
    (44) sumExpression -> . sumExpression sumop term
    (45) sumExpression -> . term
    (61) inputStmt -> . INPUT LPAREN RPAREN
    (48) term -> . term mulop sumElement
    (49) term -> . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64
    LSQUARE         shift and go to state 66
    INPUT           shift and go to state 19
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    declarationElement             shift and go to state 77
    list                           shift and go to state 61
    sumExpression                  shift and go to state 62
    inputStmt                      shift and go to state 65
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 46

    (34) unaryRelExpression -> NOT unaryRelExpression .

    AND             reduce using rule 34 (unaryRelExpression -> NOT unaryRelExpression .)
    SEMI            reduce using rule 34 (unaryRelExpression -> NOT unaryRelExpression .)
    OR              reduce using rule 34 (unaryRelExpression -> NOT unaryRelExpression .)
    COL             reduce using rule 34 (unaryRelExpression -> NOT unaryRelExpression .)
    COMA            reduce using rule 34 (unaryRelExpression -> NOT unaryRelExpression .)


state 47

    (36) relExpression -> sumExpression relop . sumExpression
    (44) sumExpression -> . sumExpression sumop term
    (45) sumExpression -> . term
    (48) term -> . term mulop sumElement
    (49) term -> . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    sumExpression                  shift and go to state 78
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 48

    (44) sumExpression -> sumExpression sumop . term
    (48) term -> . term mulop sumElement
    (49) term -> . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    term                           shift and go to state 79
    sumElement                     shift and go to state 27

state 49

    (38) relop -> LE .

    ID              reduce using rule 38 (relop -> LE .)
    NUMBER          reduce using rule 38 (relop -> LE .)


state 50

    (39) relop -> LT .

    ID              reduce using rule 39 (relop -> LT .)
    NUMBER          reduce using rule 39 (relop -> LT .)


state 51

    (40) relop -> GT .

    ID              reduce using rule 40 (relop -> GT .)
    NUMBER          reduce using rule 40 (relop -> GT .)


state 52

    (41) relop -> GE .

    ID              reduce using rule 41 (relop -> GE .)
    NUMBER          reduce using rule 41 (relop -> GE .)


state 53

    (42) relop -> EQ .

    ID              reduce using rule 42 (relop -> EQ .)
    NUMBER          reduce using rule 42 (relop -> EQ .)


state 54

    (43) relop -> NEQ .

    ID              reduce using rule 43 (relop -> NEQ .)
    NUMBER          reduce using rule 43 (relop -> NEQ .)


state 55

    (46) sumop -> PLUS .

    ID              reduce using rule 46 (sumop -> PLUS .)
    NUMBER          reduce using rule 46 (sumop -> PLUS .)


state 56

    (47) sumop -> MINUS .

    ID              reduce using rule 47 (sumop -> MINUS .)
    NUMBER          reduce using rule 47 (sumop -> MINUS .)


state 57

    (48) term -> term mulop . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    sumElement                     shift and go to state 80

state 58

    (52) mulop -> PROD .

    ID              reduce using rule 52 (mulop -> PROD .)
    NUMBER          reduce using rule 52 (mulop -> PROD .)


state 59

    (53) mulop -> DIV .

    ID              reduce using rule 53 (mulop -> DIV .)
    NUMBER          reduce using rule 53 (mulop -> DIV .)


state 60

    (5) varDeclaration -> ID EQUALS declarationElement .

    SEMI            reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)


state 61

    (6) declarationElement -> list .

    SEMI            reduce using rule 6 (declarationElement -> list .)
    RPAREN          reduce using rule 6 (declarationElement -> list .)


state 62

    (7) declarationElement -> sumExpression .
    (44) sumExpression -> sumExpression . sumop term
    (46) sumop -> . PLUS
    (47) sumop -> . MINUS

    SEMI            reduce using rule 7 (declarationElement -> sumExpression .)
    RPAREN          reduce using rule 7 (declarationElement -> sumExpression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    sumop                          shift and go to state 48

state 63

    (8) declarationElement -> STRING .

    SEMI            reduce using rule 8 (declarationElement -> STRING .)
    RPAREN          reduce using rule 8 (declarationElement -> STRING .)


state 64

    (9) declarationElement -> BOOLEAN .

    SEMI            reduce using rule 9 (declarationElement -> BOOLEAN .)
    RPAREN          reduce using rule 9 (declarationElement -> BOOLEAN .)


state 65

    (10) declarationElement -> inputStmt .

    SEMI            reduce using rule 10 (declarationElement -> inputStmt .)
    RPAREN          reduce using rule 10 (declarationElement -> inputStmt .)


state 66

    (11) list -> LSQUARE . listElements RSQUARE
    (12) listElements -> . NUMBER
    (13) listElements -> . NUMBER OP_NUMBER
    (14) listElements -> . STRING
    (15) listElements -> . STRING OP_STRING
    (16) listElements -> . BOOLEAN
    (17) listElements -> . BOOLEAN OP_BOOLEAN

    NUMBER          shift and go to state 82
    STRING          shift and go to state 83
    BOOLEAN         shift and go to state 84

    listElements                   shift and go to state 81

state 67

    (30) expressionStmt -> expressionStmt OR andExpression .
    (32) andExpression -> andExpression . AND unaryRelExpression

    SEMI            reduce using rule 30 (expressionStmt -> expressionStmt OR andExpression .)
    OR              reduce using rule 30 (expressionStmt -> expressionStmt OR andExpression .)
    COL             reduce using rule 30 (expressionStmt -> expressionStmt OR andExpression .)
    COMA            reduce using rule 30 (expressionStmt -> expressionStmt OR andExpression .)
    AND             shift and go to state 37


state 68

    (32) andExpression -> andExpression AND unaryRelExpression .

    AND             reduce using rule 32 (andExpression -> andExpression AND unaryRelExpression .)
    SEMI            reduce using rule 32 (andExpression -> andExpression AND unaryRelExpression .)
    OR              reduce using rule 32 (andExpression -> andExpression AND unaryRelExpression .)
    COL             reduce using rule 32 (andExpression -> andExpression AND unaryRelExpression .)
    COMA            reduce using rule 32 (andExpression -> andExpression AND unaryRelExpression .)


state 69

    (28) conditionalStmt -> IF expressionStmt COL . declarationList
    (29) conditionalStmt -> IF expressionStmt COL . declarationList ELSE COL declarationList
    (1) declarationList -> . declaration declarationList
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (18) statement -> . expressionStmt SEMI
    (19) statement -> . conditionalStmt
    (20) statement -> . iterationStmt
    (21) statement -> . functionalStmt SEMI
    (22) statement -> . inputStmt SEMI
    (23) statement -> . outputStmt SEMI
    (24) statement -> . commentStmt
    (30) expressionStmt -> . expressionStmt OR andExpression
    (31) expressionStmt -> . andExpression
    (28) conditionalStmt -> . IF expressionStmt COL declarationList
    (29) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (25) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (54) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (55) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (56) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (61) inputStmt -> . INPUT LPAREN RPAREN
    (62) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (63) commentStmt -> . COMMENT
    (32) andExpression -> . andExpression AND unaryRelExpression
    (33) andExpression -> . unaryRelExpression
    (34) unaryRelExpression -> . NOT unaryRelExpression
    (35) unaryRelExpression -> . relExpression
    (36) relExpression -> . sumExpression relop sumExpression
    (37) relExpression -> . sumExpression
    (44) sumExpression -> . sumExpression sumop term
    (45) sumExpression -> . term
    (48) term -> . term mulop sumElement
    (49) term -> . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 6
    declarationList                shift and go to state 85
    declaration                    shift and go to state 2
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 70

    (25) iterationStmt -> FOR ID IN . iterationElement COL declarationList
    (26) iterationElement -> . list
    (27) iterationElement -> . ID
    (11) list -> . LSQUARE listElements RSQUARE

    ID              shift and go to state 86
    LSQUARE         shift and go to state 66

    iterationElement               shift and go to state 87
    list                           shift and go to state 88

state 71

    (54) functionalStmt -> FILTER LPAREN lambdaFilter . RPAREN

    RPAREN          shift and go to state 89


state 72

    (60) lambdaFilter -> LAMBDA . lambdaElement COL expressionStmt COMA iterationElement
    (58) lambdaElement -> . ID
    (59) lambdaElement -> . ID OP_ID

    ID              shift and go to state 91

    lambdaElement                  shift and go to state 90

state 73

    (55) functionalStmt -> MAP LPAREN lambdaStmt . RPAREN

    RPAREN          shift and go to state 92


state 74

    (57) lambdaStmt -> LAMBDA . lambdaElement COL sumExpression COMA iterationElement
    (58) lambdaElement -> . ID
    (59) lambdaElement -> . ID OP_ID

    ID              shift and go to state 91

    lambdaElement                  shift and go to state 93

state 75

    (56) functionalStmt -> REDUCE LPAREN lambdaStmt . RPAREN

    RPAREN          shift and go to state 94


state 76

    (61) inputStmt -> INPUT LPAREN RPAREN .

    SEMI            reduce using rule 61 (inputStmt -> INPUT LPAREN RPAREN .)
    RPAREN          reduce using rule 61 (inputStmt -> INPUT LPAREN RPAREN .)


state 77

    (62) outputStmt -> OUTPUT LPAREN declarationElement . RPAREN

    RPAREN          shift and go to state 95


state 78

    (36) relExpression -> sumExpression relop sumExpression .
    (44) sumExpression -> sumExpression . sumop term
    (46) sumop -> . PLUS
    (47) sumop -> . MINUS

    AND             reduce using rule 36 (relExpression -> sumExpression relop sumExpression .)
    SEMI            reduce using rule 36 (relExpression -> sumExpression relop sumExpression .)
    OR              reduce using rule 36 (relExpression -> sumExpression relop sumExpression .)
    COL             reduce using rule 36 (relExpression -> sumExpression relop sumExpression .)
    COMA            reduce using rule 36 (relExpression -> sumExpression relop sumExpression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    sumop                          shift and go to state 48

state 79

    (44) sumExpression -> sumExpression sumop term .
    (48) term -> term . mulop sumElement
    (52) mulop -> . PROD
    (53) mulop -> . DIV

    LE              reduce using rule 44 (sumExpression -> sumExpression sumop term .)
    LT              reduce using rule 44 (sumExpression -> sumExpression sumop term .)
    GT              reduce using rule 44 (sumExpression -> sumExpression sumop term .)
    GE              reduce using rule 44 (sumExpression -> sumExpression sumop term .)
    EQ              reduce using rule 44 (sumExpression -> sumExpression sumop term .)
    NEQ             reduce using rule 44 (sumExpression -> sumExpression sumop term .)
    PLUS            reduce using rule 44 (sumExpression -> sumExpression sumop term .)
    MINUS           reduce using rule 44 (sumExpression -> sumExpression sumop term .)
    AND             reduce using rule 44 (sumExpression -> sumExpression sumop term .)
    SEMI            reduce using rule 44 (sumExpression -> sumExpression sumop term .)
    OR              reduce using rule 44 (sumExpression -> sumExpression sumop term .)
    COL             reduce using rule 44 (sumExpression -> sumExpression sumop term .)
    COMA            reduce using rule 44 (sumExpression -> sumExpression sumop term .)
    RPAREN          reduce using rule 44 (sumExpression -> sumExpression sumop term .)
    PROD            shift and go to state 58
    DIV             shift and go to state 59

    mulop                          shift and go to state 57

state 80

    (48) term -> term mulop sumElement .

    PROD            reduce using rule 48 (term -> term mulop sumElement .)
    DIV             reduce using rule 48 (term -> term mulop sumElement .)
    LE              reduce using rule 48 (term -> term mulop sumElement .)
    LT              reduce using rule 48 (term -> term mulop sumElement .)
    GT              reduce using rule 48 (term -> term mulop sumElement .)
    GE              reduce using rule 48 (term -> term mulop sumElement .)
    EQ              reduce using rule 48 (term -> term mulop sumElement .)
    NEQ             reduce using rule 48 (term -> term mulop sumElement .)
    PLUS            reduce using rule 48 (term -> term mulop sumElement .)
    MINUS           reduce using rule 48 (term -> term mulop sumElement .)
    AND             reduce using rule 48 (term -> term mulop sumElement .)
    SEMI            reduce using rule 48 (term -> term mulop sumElement .)
    OR              reduce using rule 48 (term -> term mulop sumElement .)
    COL             reduce using rule 48 (term -> term mulop sumElement .)
    COMA            reduce using rule 48 (term -> term mulop sumElement .)
    RPAREN          reduce using rule 48 (term -> term mulop sumElement .)


state 81

    (11) list -> LSQUARE listElements . RSQUARE

    RSQUARE         shift and go to state 96


state 82

    (12) listElements -> NUMBER .
    (13) listElements -> NUMBER . OP_NUMBER

    RSQUARE         reduce using rule 12 (listElements -> NUMBER .)
    OP_NUMBER       shift and go to state 97


state 83

    (14) listElements -> STRING .
    (15) listElements -> STRING . OP_STRING

    RSQUARE         reduce using rule 14 (listElements -> STRING .)
    OP_STRING       shift and go to state 98


state 84

    (16) listElements -> BOOLEAN .
    (17) listElements -> BOOLEAN . OP_BOOLEAN

    RSQUARE         reduce using rule 16 (listElements -> BOOLEAN .)
    OP_BOOLEAN      shift and go to state 99


state 85

    (28) conditionalStmt -> IF expressionStmt COL declarationList .
    (29) conditionalStmt -> IF expressionStmt COL declarationList . ELSE COL declarationList

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList .)
    IF              reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList .)
    FOR             reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList .)
    FILTER          reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList .)
    MAP             reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList .)
    REDUCE          reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList .)
    INPUT           reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList .)
    OUTPUT          reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList .)
    COMMENT         reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList .)
    NOT             reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList .)
    NUMBER          reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList .)
    $end            reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList .)
    ELSE            shift and go to state 100

  ! ELSE            [ reduce using rule 28 (conditionalStmt -> IF expressionStmt COL declarationList .) ]


state 86

    (27) iterationElement -> ID .

    COL             reduce using rule 27 (iterationElement -> ID .)
    RPAREN          reduce using rule 27 (iterationElement -> ID .)


state 87

    (25) iterationStmt -> FOR ID IN iterationElement . COL declarationList

    COL             shift and go to state 101


state 88

    (26) iterationElement -> list .

    COL             reduce using rule 26 (iterationElement -> list .)
    RPAREN          reduce using rule 26 (iterationElement -> list .)


state 89

    (54) functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .

    SEMI            reduce using rule 54 (functionalStmt -> FILTER LPAREN lambdaFilter RPAREN .)


state 90

    (60) lambdaFilter -> LAMBDA lambdaElement . COL expressionStmt COMA iterationElement

    COL             shift and go to state 102


state 91

    (58) lambdaElement -> ID .
    (59) lambdaElement -> ID . OP_ID

    COL             reduce using rule 58 (lambdaElement -> ID .)
    OP_ID           shift and go to state 103


state 92

    (55) functionalStmt -> MAP LPAREN lambdaStmt RPAREN .

    SEMI            reduce using rule 55 (functionalStmt -> MAP LPAREN lambdaStmt RPAREN .)


state 93

    (57) lambdaStmt -> LAMBDA lambdaElement . COL sumExpression COMA iterationElement

    COL             shift and go to state 104


state 94

    (56) functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .

    SEMI            reduce using rule 56 (functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN .)


state 95

    (62) outputStmt -> OUTPUT LPAREN declarationElement RPAREN .

    SEMI            reduce using rule 62 (outputStmt -> OUTPUT LPAREN declarationElement RPAREN .)


state 96

    (11) list -> LSQUARE listElements RSQUARE .

    SEMI            reduce using rule 11 (list -> LSQUARE listElements RSQUARE .)
    RPAREN          reduce using rule 11 (list -> LSQUARE listElements RSQUARE .)
    COL             reduce using rule 11 (list -> LSQUARE listElements RSQUARE .)


state 97

    (13) listElements -> NUMBER OP_NUMBER .

    RSQUARE         reduce using rule 13 (listElements -> NUMBER OP_NUMBER .)


state 98

    (15) listElements -> STRING OP_STRING .

    RSQUARE         reduce using rule 15 (listElements -> STRING OP_STRING .)


state 99

    (17) listElements -> BOOLEAN OP_BOOLEAN .

    RSQUARE         reduce using rule 17 (listElements -> BOOLEAN OP_BOOLEAN .)


state 100

    (29) conditionalStmt -> IF expressionStmt COL declarationList ELSE . COL declarationList

    COL             shift and go to state 105


state 101

    (25) iterationStmt -> FOR ID IN iterationElement COL . declarationList
    (1) declarationList -> . declaration declarationList
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (18) statement -> . expressionStmt SEMI
    (19) statement -> . conditionalStmt
    (20) statement -> . iterationStmt
    (21) statement -> . functionalStmt SEMI
    (22) statement -> . inputStmt SEMI
    (23) statement -> . outputStmt SEMI
    (24) statement -> . commentStmt
    (30) expressionStmt -> . expressionStmt OR andExpression
    (31) expressionStmt -> . andExpression
    (28) conditionalStmt -> . IF expressionStmt COL declarationList
    (29) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (25) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (54) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (55) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (56) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (61) inputStmt -> . INPUT LPAREN RPAREN
    (62) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (63) commentStmt -> . COMMENT
    (32) andExpression -> . andExpression AND unaryRelExpression
    (33) andExpression -> . unaryRelExpression
    (34) unaryRelExpression -> . NOT unaryRelExpression
    (35) unaryRelExpression -> . relExpression
    (36) relExpression -> . sumExpression relop sumExpression
    (37) relExpression -> . sumExpression
    (44) sumExpression -> . sumExpression sumop term
    (45) sumExpression -> . term
    (48) term -> . term mulop sumElement
    (49) term -> . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

    declarationList                shift and go to state 106
    declaration                    shift and go to state 2
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 102

    (60) lambdaFilter -> LAMBDA lambdaElement COL . expressionStmt COMA iterationElement
    (30) expressionStmt -> . expressionStmt OR andExpression
    (31) expressionStmt -> . andExpression
    (32) andExpression -> . andExpression AND unaryRelExpression
    (33) andExpression -> . unaryRelExpression
    (34) unaryRelExpression -> . NOT unaryRelExpression
    (35) unaryRelExpression -> . relExpression
    (36) relExpression -> . sumExpression relop sumExpression
    (37) relExpression -> . sumExpression
    (44) sumExpression -> . sumExpression sumop term
    (45) sumExpression -> . term
    (48) term -> . term mulop sumElement
    (49) term -> . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

    NOT             shift and go to state 23
    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 107
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 103

    (59) lambdaElement -> ID OP_ID .

    COL             reduce using rule 59 (lambdaElement -> ID OP_ID .)


state 104

    (57) lambdaStmt -> LAMBDA lambdaElement COL . sumExpression COMA iterationElement
    (44) sumExpression -> . sumExpression sumop term
    (45) sumExpression -> . term
    (48) term -> . term mulop sumElement
    (49) term -> . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

    ID              shift and go to state 39
    NUMBER          shift and go to state 28

    sumExpression                  shift and go to state 108
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 105

    (29) conditionalStmt -> IF expressionStmt COL declarationList ELSE COL . declarationList
    (1) declarationList -> . declaration declarationList
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration SEMI
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (18) statement -> . expressionStmt SEMI
    (19) statement -> . conditionalStmt
    (20) statement -> . iterationStmt
    (21) statement -> . functionalStmt SEMI
    (22) statement -> . inputStmt SEMI
    (23) statement -> . outputStmt SEMI
    (24) statement -> . commentStmt
    (30) expressionStmt -> . expressionStmt OR andExpression
    (31) expressionStmt -> . andExpression
    (28) conditionalStmt -> . IF expressionStmt COL declarationList
    (29) conditionalStmt -> . IF expressionStmt COL declarationList ELSE COL declarationList
    (25) iterationStmt -> . FOR ID IN iterationElement COL declarationList
    (54) functionalStmt -> . FILTER LPAREN lambdaFilter RPAREN
    (55) functionalStmt -> . MAP LPAREN lambdaStmt RPAREN
    (56) functionalStmt -> . REDUCE LPAREN lambdaStmt RPAREN
    (61) inputStmt -> . INPUT LPAREN RPAREN
    (62) outputStmt -> . OUTPUT LPAREN declarationElement RPAREN
    (63) commentStmt -> . COMMENT
    (32) andExpression -> . andExpression AND unaryRelExpression
    (33) andExpression -> . unaryRelExpression
    (34) unaryRelExpression -> . NOT unaryRelExpression
    (35) unaryRelExpression -> . relExpression
    (36) relExpression -> . sumExpression relop sumExpression
    (37) relExpression -> . sumExpression
    (44) sumExpression -> . sumExpression sumop term
    (45) sumExpression -> . term
    (48) term -> . term mulop sumElement
    (49) term -> . sumElement
    (50) sumElement -> . ID
    (51) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FILTER          shift and go to state 16
    MAP             shift and go to state 17
    REDUCE          shift and go to state 18
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    COMMENT         shift and go to state 21
    NOT             shift and go to state 23
    NUMBER          shift and go to state 28

    expressionStmt                 shift and go to state 6
    declarationList                shift and go to state 109
    declaration                    shift and go to state 2
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    functionalStmt                 shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentStmt                    shift and go to state 12
    andExpression                  shift and go to state 13
    unaryRelExpression             shift and go to state 22
    relExpression                  shift and go to state 24
    sumExpression                  shift and go to state 25
    term                           shift and go to state 26
    sumElement                     shift and go to state 27

state 106

    (25) iterationStmt -> FOR ID IN iterationElement COL declarationList .

    ID              reduce using rule 25 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    IF              reduce using rule 25 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    FOR             reduce using rule 25 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    FILTER          reduce using rule 25 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    MAP             reduce using rule 25 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    REDUCE          reduce using rule 25 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    INPUT           reduce using rule 25 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    OUTPUT          reduce using rule 25 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    COMMENT         reduce using rule 25 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    NOT             reduce using rule 25 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    NUMBER          reduce using rule 25 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    $end            reduce using rule 25 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)
    ELSE            reduce using rule 25 (iterationStmt -> FOR ID IN iterationElement COL declarationList .)


state 107

    (60) lambdaFilter -> LAMBDA lambdaElement COL expressionStmt . COMA iterationElement
    (30) expressionStmt -> expressionStmt . OR andExpression

    COMA            shift and go to state 110
    OR              shift and go to state 33


state 108

    (57) lambdaStmt -> LAMBDA lambdaElement COL sumExpression . COMA iterationElement
    (44) sumExpression -> sumExpression . sumop term
    (46) sumop -> . PLUS
    (47) sumop -> . MINUS

    COMA            shift and go to state 111
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    sumop                          shift and go to state 48

state 109

    (29) conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .

    ID              reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    IF              reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    FOR             reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    FILTER          reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    MAP             reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    REDUCE          reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    INPUT           reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    OUTPUT          reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    COMMENT         reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    NOT             reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    NUMBER          reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    $end            reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)
    ELSE            reduce using rule 29 (conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList .)


state 110

    (60) lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA . iterationElement
    (26) iterationElement -> . list
    (27) iterationElement -> . ID
    (11) list -> . LSQUARE listElements RSQUARE

    ID              shift and go to state 86
    LSQUARE         shift and go to state 66

    iterationElement               shift and go to state 112
    list                           shift and go to state 88

state 111

    (57) lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA . iterationElement
    (26) iterationElement -> . list
    (27) iterationElement -> . ID
    (11) list -> . LSQUARE listElements RSQUARE

    ID              shift and go to state 86
    LSQUARE         shift and go to state 66

    iterationElement               shift and go to state 113
    list                           shift and go to state 88

state 112

    (60) lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA iterationElement .

    RPAREN          reduce using rule 60 (lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA iterationElement .)


state 113

    (57) lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA iterationElement .

    RPAREN          reduce using rule 57 (lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA iterationElement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for FILTER in state 2 resolved as shift
WARNING: shift/reduce conflict for MAP in state 2 resolved as shift
WARNING: shift/reduce conflict for REDUCE in state 2 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 2 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 2 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 2 resolved as shift
WARNING: shift/reduce conflict for NOT in state 2 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 2 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 85 resolved as shift
