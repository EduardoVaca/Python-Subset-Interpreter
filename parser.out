Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    LPAREN
    RPAREN
    COMA
    LAMBDA
    MAP
    REDUCE
    FILTER
    INPUT
    OUTPUT

Grammar

Rule 0     S' -> declarationList
Rule 1     declarationList -> declarationList declaration
Rule 2     declarationList -> declaration
Rule 3     declaration -> varDeclaration
Rule 4     declaration -> statement
Rule 5     varDeclaration -> ID EQUALS declarationElement
Rule 6     declarationElement -> list
Rule 7     declarationElement -> STRING
Rule 8     declarationElement -> NUMBER
Rule 9     declarationElement -> BOOLEAN
Rule 10    list -> LSQUARE listElements RSQUARE
Rule 11    listElements -> NUMBER
Rule 12    listElements -> NUMBER OP_NUMBER
Rule 13    listElements -> STRING
Rule 14    listElements -> STRING OP_STRING
Rule 15    listElements -> BOOLEAN
Rule 16    listElements -> BOOLEAN OP_BOOLEAN
Rule 17    statement -> expressionStmt
Rule 18    statement -> conditionalStmt SEMI
Rule 19    statement -> iterationStmt SEMI
Rule 20    iterationStmt -> FOR ID IN iterationElement COL statement
Rule 21    iterationElement -> ID
Rule 22    conditionalStmt -> IF expressionStmt COL statement
Rule 23    conditionalStmt -> IF expressionStmt COL statement ELSE COL statement
Rule 24    expressionStmt -> expressionStmt OR andExpression
Rule 25    expressionStmt -> andExpression
Rule 26    andExpression -> andExpression AND unaryRelExpression
Rule 27    andExpression -> unaryRelExpression
Rule 28    unaryRelExpression -> NOT unaryRelExpression
Rule 29    unaryRelExpression -> relExpression
Rule 30    relExpression -> sumExpression relop sumExpression
Rule 31    relExpression -> sumExpression
Rule 32    relop -> LE
Rule 33    relop -> LT
Rule 34    relop -> GT
Rule 35    relop -> GE
Rule 36    relop -> EQ
Rule 37    relop -> NEQ
Rule 38    sumExpression -> sumExpression sumop term
Rule 39    sumExpression -> term
Rule 40    sumop -> PLUS
Rule 41    sumop -> MINUS
Rule 42    term -> term mulop sumElement
Rule 43    term -> sumElement
Rule 44    sumElement -> ID
Rule 45    sumElement -> NUMBER
Rule 46    mulop -> PROD
Rule 47    mulop -> DIV

Terminals, with rules where they appear

AND                  : 26
BOOLEAN              : 9 15 16
COL                  : 20 22 23 23
COMA                 : 
COMMENT              : 
DIV                  : 47
ELSE                 : 23
EQ                   : 36
EQUALS               : 5
FILTER               : 
FOR                  : 20
GE                   : 35
GT                   : 34
ID                   : 5 20 21 44
IF                   : 22 23
IN                   : 20
INPUT                : 
LAMBDA               : 
LE                   : 32
LPAREN               : 
LSQUARE              : 10
LT                   : 33
MAP                  : 
MINUS                : 41
NEQ                  : 37
NOT                  : 28
NUMBER               : 8 11 12 45
OP_BOOLEAN           : 16
OP_NUMBER            : 12
OP_STRING            : 14
OR                   : 24
OUTPUT               : 
PLUS                 : 40
PROD                 : 46
REDUCE               : 
RPAREN               : 
RSQUARE              : 10
SEMI                 : 18 19
STRING               : 7 13 14
error                : 

Nonterminals, with rules where they appear

andExpression        : 24 25 26
conditionalStmt      : 18
declaration          : 1 2
declarationElement   : 5
declarationList      : 1 0
expressionStmt       : 17 22 23 24
iterationElement     : 20
iterationStmt        : 19
list                 : 6
listElements         : 10
mulop                : 42
relExpression        : 29
relop                : 30
statement            : 4 20 22 23 23
sumElement           : 42 43
sumExpression        : 30 30 31 38
sumop                : 38
term                 : 38 39 42
unaryRelExpression   : 26 27 28
varDeclaration       : 3

Parsing method: LALR

state 0

    (0) S' -> . declarationList
    (1) declarationList -> . declarationList declaration
    (2) declarationList -> . declaration
    (3) declaration -> . varDeclaration
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (17) statement -> . expressionStmt
    (18) statement -> . conditionalStmt SEMI
    (19) statement -> . iterationStmt SEMI
    (24) expressionStmt -> . expressionStmt OR andExpression
    (25) expressionStmt -> . andExpression
    (22) conditionalStmt -> . IF expressionStmt COL statement
    (23) conditionalStmt -> . IF expressionStmt COL statement ELSE COL statement
    (20) iterationStmt -> . FOR ID IN iterationElement COL statement
    (26) andExpression -> . andExpression AND unaryRelExpression
    (27) andExpression -> . unaryRelExpression
    (28) unaryRelExpression -> . NOT unaryRelExpression
    (29) unaryRelExpression -> . relExpression
    (30) relExpression -> . sumExpression relop sumExpression
    (31) relExpression -> . sumExpression
    (38) sumExpression -> . sumExpression sumop term
    (39) sumExpression -> . term
    (42) term -> . term mulop sumElement
    (43) term -> . sumElement
    (44) sumElement -> . ID
    (45) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 10
    FOR             shift and go to state 11
    NOT             shift and go to state 13
    NUMBER          shift and go to state 18

    declarationList                shift and go to state 1
    declaration                    shift and go to state 2
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    andExpression                  shift and go to state 9
    unaryRelExpression             shift and go to state 12
    relExpression                  shift and go to state 14
    sumExpression                  shift and go to state 15
    term                           shift and go to state 16
    sumElement                     shift and go to state 17

state 1

    (0) S' -> declarationList .
    (1) declarationList -> declarationList . declaration
    (3) declaration -> . varDeclaration
    (4) declaration -> . statement
    (5) varDeclaration -> . ID EQUALS declarationElement
    (17) statement -> . expressionStmt
    (18) statement -> . conditionalStmt SEMI
    (19) statement -> . iterationStmt SEMI
    (24) expressionStmt -> . expressionStmt OR andExpression
    (25) expressionStmt -> . andExpression
    (22) conditionalStmt -> . IF expressionStmt COL statement
    (23) conditionalStmt -> . IF expressionStmt COL statement ELSE COL statement
    (20) iterationStmt -> . FOR ID IN iterationElement COL statement
    (26) andExpression -> . andExpression AND unaryRelExpression
    (27) andExpression -> . unaryRelExpression
    (28) unaryRelExpression -> . NOT unaryRelExpression
    (29) unaryRelExpression -> . relExpression
    (30) relExpression -> . sumExpression relop sumExpression
    (31) relExpression -> . sumExpression
    (38) sumExpression -> . sumExpression sumop term
    (39) sumExpression -> . term
    (42) term -> . term mulop sumElement
    (43) term -> . sumElement
    (44) sumElement -> . ID
    (45) sumElement -> . NUMBER

    ID              shift and go to state 5
    IF              shift and go to state 10
    FOR             shift and go to state 11
    NOT             shift and go to state 13
    NUMBER          shift and go to state 18

    declaration                    shift and go to state 19
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 4
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    andExpression                  shift and go to state 9
    unaryRelExpression             shift and go to state 12
    relExpression                  shift and go to state 14
    sumExpression                  shift and go to state 15
    term                           shift and go to state 16
    sumElement                     shift and go to state 17

state 2

    (2) declarationList -> declaration .

    ID              reduce using rule 2 (declarationList -> declaration .)
    IF              reduce using rule 2 (declarationList -> declaration .)
    FOR             reduce using rule 2 (declarationList -> declaration .)
    NOT             reduce using rule 2 (declarationList -> declaration .)
    NUMBER          reduce using rule 2 (declarationList -> declaration .)
    $end            reduce using rule 2 (declarationList -> declaration .)


state 3

    (3) declaration -> varDeclaration .

    ID              reduce using rule 3 (declaration -> varDeclaration .)
    IF              reduce using rule 3 (declaration -> varDeclaration .)
    FOR             reduce using rule 3 (declaration -> varDeclaration .)
    NOT             reduce using rule 3 (declaration -> varDeclaration .)
    NUMBER          reduce using rule 3 (declaration -> varDeclaration .)
    $end            reduce using rule 3 (declaration -> varDeclaration .)


state 4

    (4) declaration -> statement .

    ID              reduce using rule 4 (declaration -> statement .)
    IF              reduce using rule 4 (declaration -> statement .)
    FOR             reduce using rule 4 (declaration -> statement .)
    NOT             reduce using rule 4 (declaration -> statement .)
    NUMBER          reduce using rule 4 (declaration -> statement .)
    $end            reduce using rule 4 (declaration -> statement .)


state 5

    (5) varDeclaration -> ID . EQUALS declarationElement
    (44) sumElement -> ID .

    EQUALS          shift and go to state 20
    PROD            reduce using rule 44 (sumElement -> ID .)
    DIV             reduce using rule 44 (sumElement -> ID .)
    LE              reduce using rule 44 (sumElement -> ID .)
    LT              reduce using rule 44 (sumElement -> ID .)
    GT              reduce using rule 44 (sumElement -> ID .)
    GE              reduce using rule 44 (sumElement -> ID .)
    EQ              reduce using rule 44 (sumElement -> ID .)
    NEQ             reduce using rule 44 (sumElement -> ID .)
    PLUS            reduce using rule 44 (sumElement -> ID .)
    MINUS           reduce using rule 44 (sumElement -> ID .)
    AND             reduce using rule 44 (sumElement -> ID .)
    OR              reduce using rule 44 (sumElement -> ID .)
    ID              reduce using rule 44 (sumElement -> ID .)
    IF              reduce using rule 44 (sumElement -> ID .)
    FOR             reduce using rule 44 (sumElement -> ID .)
    NOT             reduce using rule 44 (sumElement -> ID .)
    NUMBER          reduce using rule 44 (sumElement -> ID .)
    $end            reduce using rule 44 (sumElement -> ID .)


state 6

    (17) statement -> expressionStmt .
    (24) expressionStmt -> expressionStmt . OR andExpression

    ID              reduce using rule 17 (statement -> expressionStmt .)
    IF              reduce using rule 17 (statement -> expressionStmt .)
    FOR             reduce using rule 17 (statement -> expressionStmt .)
    NOT             reduce using rule 17 (statement -> expressionStmt .)
    NUMBER          reduce using rule 17 (statement -> expressionStmt .)
    $end            reduce using rule 17 (statement -> expressionStmt .)
    ELSE            reduce using rule 17 (statement -> expressionStmt .)
    SEMI            reduce using rule 17 (statement -> expressionStmt .)
    OR              shift and go to state 21


state 7

    (18) statement -> conditionalStmt . SEMI

    SEMI            shift and go to state 22


state 8

    (19) statement -> iterationStmt . SEMI

    SEMI            shift and go to state 23


state 9

    (25) expressionStmt -> andExpression .
    (26) andExpression -> andExpression . AND unaryRelExpression

    OR              reduce using rule 25 (expressionStmt -> andExpression .)
    ID              reduce using rule 25 (expressionStmt -> andExpression .)
    IF              reduce using rule 25 (expressionStmt -> andExpression .)
    FOR             reduce using rule 25 (expressionStmt -> andExpression .)
    NOT             reduce using rule 25 (expressionStmt -> andExpression .)
    NUMBER          reduce using rule 25 (expressionStmt -> andExpression .)
    $end            reduce using rule 25 (expressionStmt -> andExpression .)
    COL             reduce using rule 25 (expressionStmt -> andExpression .)
    ELSE            reduce using rule 25 (expressionStmt -> andExpression .)
    SEMI            reduce using rule 25 (expressionStmt -> andExpression .)
    AND             shift and go to state 24


state 10

    (22) conditionalStmt -> IF . expressionStmt COL statement
    (23) conditionalStmt -> IF . expressionStmt COL statement ELSE COL statement
    (24) expressionStmt -> . expressionStmt OR andExpression
    (25) expressionStmt -> . andExpression
    (26) andExpression -> . andExpression AND unaryRelExpression
    (27) andExpression -> . unaryRelExpression
    (28) unaryRelExpression -> . NOT unaryRelExpression
    (29) unaryRelExpression -> . relExpression
    (30) relExpression -> . sumExpression relop sumExpression
    (31) relExpression -> . sumExpression
    (38) sumExpression -> . sumExpression sumop term
    (39) sumExpression -> . term
    (42) term -> . term mulop sumElement
    (43) term -> . sumElement
    (44) sumElement -> . ID
    (45) sumElement -> . NUMBER

    NOT             shift and go to state 13
    ID              shift and go to state 26
    NUMBER          shift and go to state 18

    expressionStmt                 shift and go to state 25
    andExpression                  shift and go to state 9
    unaryRelExpression             shift and go to state 12
    relExpression                  shift and go to state 14
    sumExpression                  shift and go to state 15
    term                           shift and go to state 16
    sumElement                     shift and go to state 17

state 11

    (20) iterationStmt -> FOR . ID IN iterationElement COL statement

    ID              shift and go to state 27


state 12

    (27) andExpression -> unaryRelExpression .

    AND             reduce using rule 27 (andExpression -> unaryRelExpression .)
    OR              reduce using rule 27 (andExpression -> unaryRelExpression .)
    ID              reduce using rule 27 (andExpression -> unaryRelExpression .)
    IF              reduce using rule 27 (andExpression -> unaryRelExpression .)
    FOR             reduce using rule 27 (andExpression -> unaryRelExpression .)
    NOT             reduce using rule 27 (andExpression -> unaryRelExpression .)
    NUMBER          reduce using rule 27 (andExpression -> unaryRelExpression .)
    $end            reduce using rule 27 (andExpression -> unaryRelExpression .)
    COL             reduce using rule 27 (andExpression -> unaryRelExpression .)
    ELSE            reduce using rule 27 (andExpression -> unaryRelExpression .)
    SEMI            reduce using rule 27 (andExpression -> unaryRelExpression .)


state 13

    (28) unaryRelExpression -> NOT . unaryRelExpression
    (28) unaryRelExpression -> . NOT unaryRelExpression
    (29) unaryRelExpression -> . relExpression
    (30) relExpression -> . sumExpression relop sumExpression
    (31) relExpression -> . sumExpression
    (38) sumExpression -> . sumExpression sumop term
    (39) sumExpression -> . term
    (42) term -> . term mulop sumElement
    (43) term -> . sumElement
    (44) sumElement -> . ID
    (45) sumElement -> . NUMBER

    NOT             shift and go to state 13
    ID              shift and go to state 26
    NUMBER          shift and go to state 18

    unaryRelExpression             shift and go to state 28
    relExpression                  shift and go to state 14
    sumExpression                  shift and go to state 15
    term                           shift and go to state 16
    sumElement                     shift and go to state 17

state 14

    (29) unaryRelExpression -> relExpression .

    AND             reduce using rule 29 (unaryRelExpression -> relExpression .)
    OR              reduce using rule 29 (unaryRelExpression -> relExpression .)
    ID              reduce using rule 29 (unaryRelExpression -> relExpression .)
    IF              reduce using rule 29 (unaryRelExpression -> relExpression .)
    FOR             reduce using rule 29 (unaryRelExpression -> relExpression .)
    NOT             reduce using rule 29 (unaryRelExpression -> relExpression .)
    NUMBER          reduce using rule 29 (unaryRelExpression -> relExpression .)
    $end            reduce using rule 29 (unaryRelExpression -> relExpression .)
    COL             reduce using rule 29 (unaryRelExpression -> relExpression .)
    ELSE            reduce using rule 29 (unaryRelExpression -> relExpression .)
    SEMI            reduce using rule 29 (unaryRelExpression -> relExpression .)


state 15

    (30) relExpression -> sumExpression . relop sumExpression
    (31) relExpression -> sumExpression .
    (38) sumExpression -> sumExpression . sumop term
    (32) relop -> . LE
    (33) relop -> . LT
    (34) relop -> . GT
    (35) relop -> . GE
    (36) relop -> . EQ
    (37) relop -> . NEQ
    (40) sumop -> . PLUS
    (41) sumop -> . MINUS

    AND             reduce using rule 31 (relExpression -> sumExpression .)
    OR              reduce using rule 31 (relExpression -> sumExpression .)
    ID              reduce using rule 31 (relExpression -> sumExpression .)
    IF              reduce using rule 31 (relExpression -> sumExpression .)
    FOR             reduce using rule 31 (relExpression -> sumExpression .)
    NOT             reduce using rule 31 (relExpression -> sumExpression .)
    NUMBER          reduce using rule 31 (relExpression -> sumExpression .)
    $end            reduce using rule 31 (relExpression -> sumExpression .)
    COL             reduce using rule 31 (relExpression -> sumExpression .)
    ELSE            reduce using rule 31 (relExpression -> sumExpression .)
    SEMI            reduce using rule 31 (relExpression -> sumExpression .)
    LE              shift and go to state 31
    LT              shift and go to state 32
    GT              shift and go to state 33
    GE              shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38

    relop                          shift and go to state 29
    sumop                          shift and go to state 30

state 16

    (39) sumExpression -> term .
    (42) term -> term . mulop sumElement
    (46) mulop -> . PROD
    (47) mulop -> . DIV

    LE              reduce using rule 39 (sumExpression -> term .)
    LT              reduce using rule 39 (sumExpression -> term .)
    GT              reduce using rule 39 (sumExpression -> term .)
    GE              reduce using rule 39 (sumExpression -> term .)
    EQ              reduce using rule 39 (sumExpression -> term .)
    NEQ             reduce using rule 39 (sumExpression -> term .)
    PLUS            reduce using rule 39 (sumExpression -> term .)
    MINUS           reduce using rule 39 (sumExpression -> term .)
    AND             reduce using rule 39 (sumExpression -> term .)
    OR              reduce using rule 39 (sumExpression -> term .)
    ID              reduce using rule 39 (sumExpression -> term .)
    IF              reduce using rule 39 (sumExpression -> term .)
    FOR             reduce using rule 39 (sumExpression -> term .)
    NOT             reduce using rule 39 (sumExpression -> term .)
    NUMBER          reduce using rule 39 (sumExpression -> term .)
    $end            reduce using rule 39 (sumExpression -> term .)
    COL             reduce using rule 39 (sumExpression -> term .)
    ELSE            reduce using rule 39 (sumExpression -> term .)
    SEMI            reduce using rule 39 (sumExpression -> term .)
    PROD            shift and go to state 40
    DIV             shift and go to state 41

    mulop                          shift and go to state 39

state 17

    (43) term -> sumElement .

    PROD            reduce using rule 43 (term -> sumElement .)
    DIV             reduce using rule 43 (term -> sumElement .)
    LE              reduce using rule 43 (term -> sumElement .)
    LT              reduce using rule 43 (term -> sumElement .)
    GT              reduce using rule 43 (term -> sumElement .)
    GE              reduce using rule 43 (term -> sumElement .)
    EQ              reduce using rule 43 (term -> sumElement .)
    NEQ             reduce using rule 43 (term -> sumElement .)
    PLUS            reduce using rule 43 (term -> sumElement .)
    MINUS           reduce using rule 43 (term -> sumElement .)
    AND             reduce using rule 43 (term -> sumElement .)
    OR              reduce using rule 43 (term -> sumElement .)
    ID              reduce using rule 43 (term -> sumElement .)
    IF              reduce using rule 43 (term -> sumElement .)
    FOR             reduce using rule 43 (term -> sumElement .)
    NOT             reduce using rule 43 (term -> sumElement .)
    NUMBER          reduce using rule 43 (term -> sumElement .)
    $end            reduce using rule 43 (term -> sumElement .)
    COL             reduce using rule 43 (term -> sumElement .)
    ELSE            reduce using rule 43 (term -> sumElement .)
    SEMI            reduce using rule 43 (term -> sumElement .)


state 18

    (45) sumElement -> NUMBER .

    PROD            reduce using rule 45 (sumElement -> NUMBER .)
    DIV             reduce using rule 45 (sumElement -> NUMBER .)
    LE              reduce using rule 45 (sumElement -> NUMBER .)
    LT              reduce using rule 45 (sumElement -> NUMBER .)
    GT              reduce using rule 45 (sumElement -> NUMBER .)
    GE              reduce using rule 45 (sumElement -> NUMBER .)
    EQ              reduce using rule 45 (sumElement -> NUMBER .)
    NEQ             reduce using rule 45 (sumElement -> NUMBER .)
    PLUS            reduce using rule 45 (sumElement -> NUMBER .)
    MINUS           reduce using rule 45 (sumElement -> NUMBER .)
    AND             reduce using rule 45 (sumElement -> NUMBER .)
    OR              reduce using rule 45 (sumElement -> NUMBER .)
    ID              reduce using rule 45 (sumElement -> NUMBER .)
    IF              reduce using rule 45 (sumElement -> NUMBER .)
    FOR             reduce using rule 45 (sumElement -> NUMBER .)
    NOT             reduce using rule 45 (sumElement -> NUMBER .)
    NUMBER          reduce using rule 45 (sumElement -> NUMBER .)
    $end            reduce using rule 45 (sumElement -> NUMBER .)
    COL             reduce using rule 45 (sumElement -> NUMBER .)
    ELSE            reduce using rule 45 (sumElement -> NUMBER .)
    SEMI            reduce using rule 45 (sumElement -> NUMBER .)


state 19

    (1) declarationList -> declarationList declaration .

    ID              reduce using rule 1 (declarationList -> declarationList declaration .)
    IF              reduce using rule 1 (declarationList -> declarationList declaration .)
    FOR             reduce using rule 1 (declarationList -> declarationList declaration .)
    NOT             reduce using rule 1 (declarationList -> declarationList declaration .)
    NUMBER          reduce using rule 1 (declarationList -> declarationList declaration .)
    $end            reduce using rule 1 (declarationList -> declarationList declaration .)


state 20

    (5) varDeclaration -> ID EQUALS . declarationElement
    (6) declarationElement -> . list
    (7) declarationElement -> . STRING
    (8) declarationElement -> . NUMBER
    (9) declarationElement -> . BOOLEAN
    (10) list -> . LSQUARE listElements RSQUARE

    STRING          shift and go to state 44
    NUMBER          shift and go to state 45
    BOOLEAN         shift and go to state 46
    LSQUARE         shift and go to state 47

    declarationElement             shift and go to state 42
    list                           shift and go to state 43

state 21

    (24) expressionStmt -> expressionStmt OR . andExpression
    (26) andExpression -> . andExpression AND unaryRelExpression
    (27) andExpression -> . unaryRelExpression
    (28) unaryRelExpression -> . NOT unaryRelExpression
    (29) unaryRelExpression -> . relExpression
    (30) relExpression -> . sumExpression relop sumExpression
    (31) relExpression -> . sumExpression
    (38) sumExpression -> . sumExpression sumop term
    (39) sumExpression -> . term
    (42) term -> . term mulop sumElement
    (43) term -> . sumElement
    (44) sumElement -> . ID
    (45) sumElement -> . NUMBER

    NOT             shift and go to state 13
    ID              shift and go to state 26
    NUMBER          shift and go to state 18

    andExpression                  shift and go to state 48
    unaryRelExpression             shift and go to state 12
    relExpression                  shift and go to state 14
    sumExpression                  shift and go to state 15
    term                           shift and go to state 16
    sumElement                     shift and go to state 17

state 22

    (18) statement -> conditionalStmt SEMI .

    ID              reduce using rule 18 (statement -> conditionalStmt SEMI .)
    IF              reduce using rule 18 (statement -> conditionalStmt SEMI .)
    FOR             reduce using rule 18 (statement -> conditionalStmt SEMI .)
    NOT             reduce using rule 18 (statement -> conditionalStmt SEMI .)
    NUMBER          reduce using rule 18 (statement -> conditionalStmt SEMI .)
    $end            reduce using rule 18 (statement -> conditionalStmt SEMI .)
    ELSE            reduce using rule 18 (statement -> conditionalStmt SEMI .)
    SEMI            reduce using rule 18 (statement -> conditionalStmt SEMI .)


state 23

    (19) statement -> iterationStmt SEMI .

    ID              reduce using rule 19 (statement -> iterationStmt SEMI .)
    IF              reduce using rule 19 (statement -> iterationStmt SEMI .)
    FOR             reduce using rule 19 (statement -> iterationStmt SEMI .)
    NOT             reduce using rule 19 (statement -> iterationStmt SEMI .)
    NUMBER          reduce using rule 19 (statement -> iterationStmt SEMI .)
    $end            reduce using rule 19 (statement -> iterationStmt SEMI .)
    ELSE            reduce using rule 19 (statement -> iterationStmt SEMI .)
    SEMI            reduce using rule 19 (statement -> iterationStmt SEMI .)


state 24

    (26) andExpression -> andExpression AND . unaryRelExpression
    (28) unaryRelExpression -> . NOT unaryRelExpression
    (29) unaryRelExpression -> . relExpression
    (30) relExpression -> . sumExpression relop sumExpression
    (31) relExpression -> . sumExpression
    (38) sumExpression -> . sumExpression sumop term
    (39) sumExpression -> . term
    (42) term -> . term mulop sumElement
    (43) term -> . sumElement
    (44) sumElement -> . ID
    (45) sumElement -> . NUMBER

    NOT             shift and go to state 13
    ID              shift and go to state 26
    NUMBER          shift and go to state 18

    unaryRelExpression             shift and go to state 49
    relExpression                  shift and go to state 14
    sumExpression                  shift and go to state 15
    term                           shift and go to state 16
    sumElement                     shift and go to state 17

state 25

    (22) conditionalStmt -> IF expressionStmt . COL statement
    (23) conditionalStmt -> IF expressionStmt . COL statement ELSE COL statement
    (24) expressionStmt -> expressionStmt . OR andExpression

    COL             shift and go to state 50
    OR              shift and go to state 21


state 26

    (44) sumElement -> ID .

    PROD            reduce using rule 44 (sumElement -> ID .)
    DIV             reduce using rule 44 (sumElement -> ID .)
    LE              reduce using rule 44 (sumElement -> ID .)
    LT              reduce using rule 44 (sumElement -> ID .)
    GT              reduce using rule 44 (sumElement -> ID .)
    GE              reduce using rule 44 (sumElement -> ID .)
    EQ              reduce using rule 44 (sumElement -> ID .)
    NEQ             reduce using rule 44 (sumElement -> ID .)
    PLUS            reduce using rule 44 (sumElement -> ID .)
    MINUS           reduce using rule 44 (sumElement -> ID .)
    AND             reduce using rule 44 (sumElement -> ID .)
    COL             reduce using rule 44 (sumElement -> ID .)
    OR              reduce using rule 44 (sumElement -> ID .)
    ID              reduce using rule 44 (sumElement -> ID .)
    IF              reduce using rule 44 (sumElement -> ID .)
    FOR             reduce using rule 44 (sumElement -> ID .)
    NOT             reduce using rule 44 (sumElement -> ID .)
    NUMBER          reduce using rule 44 (sumElement -> ID .)
    $end            reduce using rule 44 (sumElement -> ID .)
    ELSE            reduce using rule 44 (sumElement -> ID .)
    SEMI            reduce using rule 44 (sumElement -> ID .)


state 27

    (20) iterationStmt -> FOR ID . IN iterationElement COL statement

    IN              shift and go to state 51


state 28

    (28) unaryRelExpression -> NOT unaryRelExpression .

    AND             reduce using rule 28 (unaryRelExpression -> NOT unaryRelExpression .)
    OR              reduce using rule 28 (unaryRelExpression -> NOT unaryRelExpression .)
    ID              reduce using rule 28 (unaryRelExpression -> NOT unaryRelExpression .)
    IF              reduce using rule 28 (unaryRelExpression -> NOT unaryRelExpression .)
    FOR             reduce using rule 28 (unaryRelExpression -> NOT unaryRelExpression .)
    NOT             reduce using rule 28 (unaryRelExpression -> NOT unaryRelExpression .)
    NUMBER          reduce using rule 28 (unaryRelExpression -> NOT unaryRelExpression .)
    $end            reduce using rule 28 (unaryRelExpression -> NOT unaryRelExpression .)
    COL             reduce using rule 28 (unaryRelExpression -> NOT unaryRelExpression .)
    ELSE            reduce using rule 28 (unaryRelExpression -> NOT unaryRelExpression .)
    SEMI            reduce using rule 28 (unaryRelExpression -> NOT unaryRelExpression .)


state 29

    (30) relExpression -> sumExpression relop . sumExpression
    (38) sumExpression -> . sumExpression sumop term
    (39) sumExpression -> . term
    (42) term -> . term mulop sumElement
    (43) term -> . sumElement
    (44) sumElement -> . ID
    (45) sumElement -> . NUMBER

    ID              shift and go to state 26
    NUMBER          shift and go to state 18

    sumExpression                  shift and go to state 52
    term                           shift and go to state 16
    sumElement                     shift and go to state 17

state 30

    (38) sumExpression -> sumExpression sumop . term
    (42) term -> . term mulop sumElement
    (43) term -> . sumElement
    (44) sumElement -> . ID
    (45) sumElement -> . NUMBER

    ID              shift and go to state 26
    NUMBER          shift and go to state 18

    term                           shift and go to state 53
    sumElement                     shift and go to state 17

state 31

    (32) relop -> LE .

    ID              reduce using rule 32 (relop -> LE .)
    NUMBER          reduce using rule 32 (relop -> LE .)


state 32

    (33) relop -> LT .

    ID              reduce using rule 33 (relop -> LT .)
    NUMBER          reduce using rule 33 (relop -> LT .)


state 33

    (34) relop -> GT .

    ID              reduce using rule 34 (relop -> GT .)
    NUMBER          reduce using rule 34 (relop -> GT .)


state 34

    (35) relop -> GE .

    ID              reduce using rule 35 (relop -> GE .)
    NUMBER          reduce using rule 35 (relop -> GE .)


state 35

    (36) relop -> EQ .

    ID              reduce using rule 36 (relop -> EQ .)
    NUMBER          reduce using rule 36 (relop -> EQ .)


state 36

    (37) relop -> NEQ .

    ID              reduce using rule 37 (relop -> NEQ .)
    NUMBER          reduce using rule 37 (relop -> NEQ .)


state 37

    (40) sumop -> PLUS .

    ID              reduce using rule 40 (sumop -> PLUS .)
    NUMBER          reduce using rule 40 (sumop -> PLUS .)


state 38

    (41) sumop -> MINUS .

    ID              reduce using rule 41 (sumop -> MINUS .)
    NUMBER          reduce using rule 41 (sumop -> MINUS .)


state 39

    (42) term -> term mulop . sumElement
    (44) sumElement -> . ID
    (45) sumElement -> . NUMBER

    ID              shift and go to state 26
    NUMBER          shift and go to state 18

    sumElement                     shift and go to state 54

state 40

    (46) mulop -> PROD .

    ID              reduce using rule 46 (mulop -> PROD .)
    NUMBER          reduce using rule 46 (mulop -> PROD .)


state 41

    (47) mulop -> DIV .

    ID              reduce using rule 47 (mulop -> DIV .)
    NUMBER          reduce using rule 47 (mulop -> DIV .)


state 42

    (5) varDeclaration -> ID EQUALS declarationElement .

    ID              reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    IF              reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    FOR             reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    NOT             reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    NUMBER          reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)
    $end            reduce using rule 5 (varDeclaration -> ID EQUALS declarationElement .)


state 43

    (6) declarationElement -> list .

    ID              reduce using rule 6 (declarationElement -> list .)
    IF              reduce using rule 6 (declarationElement -> list .)
    FOR             reduce using rule 6 (declarationElement -> list .)
    NOT             reduce using rule 6 (declarationElement -> list .)
    NUMBER          reduce using rule 6 (declarationElement -> list .)
    $end            reduce using rule 6 (declarationElement -> list .)


state 44

    (7) declarationElement -> STRING .

    ID              reduce using rule 7 (declarationElement -> STRING .)
    IF              reduce using rule 7 (declarationElement -> STRING .)
    FOR             reduce using rule 7 (declarationElement -> STRING .)
    NOT             reduce using rule 7 (declarationElement -> STRING .)
    NUMBER          reduce using rule 7 (declarationElement -> STRING .)
    $end            reduce using rule 7 (declarationElement -> STRING .)


state 45

    (8) declarationElement -> NUMBER .

    ID              reduce using rule 8 (declarationElement -> NUMBER .)
    IF              reduce using rule 8 (declarationElement -> NUMBER .)
    FOR             reduce using rule 8 (declarationElement -> NUMBER .)
    NOT             reduce using rule 8 (declarationElement -> NUMBER .)
    NUMBER          reduce using rule 8 (declarationElement -> NUMBER .)
    $end            reduce using rule 8 (declarationElement -> NUMBER .)


state 46

    (9) declarationElement -> BOOLEAN .

    ID              reduce using rule 9 (declarationElement -> BOOLEAN .)
    IF              reduce using rule 9 (declarationElement -> BOOLEAN .)
    FOR             reduce using rule 9 (declarationElement -> BOOLEAN .)
    NOT             reduce using rule 9 (declarationElement -> BOOLEAN .)
    NUMBER          reduce using rule 9 (declarationElement -> BOOLEAN .)
    $end            reduce using rule 9 (declarationElement -> BOOLEAN .)


state 47

    (10) list -> LSQUARE . listElements RSQUARE
    (11) listElements -> . NUMBER
    (12) listElements -> . NUMBER OP_NUMBER
    (13) listElements -> . STRING
    (14) listElements -> . STRING OP_STRING
    (15) listElements -> . BOOLEAN
    (16) listElements -> . BOOLEAN OP_BOOLEAN

    NUMBER          shift and go to state 56
    STRING          shift and go to state 57
    BOOLEAN         shift and go to state 58

    listElements                   shift and go to state 55

state 48

    (24) expressionStmt -> expressionStmt OR andExpression .
    (26) andExpression -> andExpression . AND unaryRelExpression

    OR              reduce using rule 24 (expressionStmt -> expressionStmt OR andExpression .)
    ID              reduce using rule 24 (expressionStmt -> expressionStmt OR andExpression .)
    IF              reduce using rule 24 (expressionStmt -> expressionStmt OR andExpression .)
    FOR             reduce using rule 24 (expressionStmt -> expressionStmt OR andExpression .)
    NOT             reduce using rule 24 (expressionStmt -> expressionStmt OR andExpression .)
    NUMBER          reduce using rule 24 (expressionStmt -> expressionStmt OR andExpression .)
    $end            reduce using rule 24 (expressionStmt -> expressionStmt OR andExpression .)
    COL             reduce using rule 24 (expressionStmt -> expressionStmt OR andExpression .)
    ELSE            reduce using rule 24 (expressionStmt -> expressionStmt OR andExpression .)
    SEMI            reduce using rule 24 (expressionStmt -> expressionStmt OR andExpression .)
    AND             shift and go to state 24


state 49

    (26) andExpression -> andExpression AND unaryRelExpression .

    AND             reduce using rule 26 (andExpression -> andExpression AND unaryRelExpression .)
    OR              reduce using rule 26 (andExpression -> andExpression AND unaryRelExpression .)
    ID              reduce using rule 26 (andExpression -> andExpression AND unaryRelExpression .)
    IF              reduce using rule 26 (andExpression -> andExpression AND unaryRelExpression .)
    FOR             reduce using rule 26 (andExpression -> andExpression AND unaryRelExpression .)
    NOT             reduce using rule 26 (andExpression -> andExpression AND unaryRelExpression .)
    NUMBER          reduce using rule 26 (andExpression -> andExpression AND unaryRelExpression .)
    $end            reduce using rule 26 (andExpression -> andExpression AND unaryRelExpression .)
    COL             reduce using rule 26 (andExpression -> andExpression AND unaryRelExpression .)
    ELSE            reduce using rule 26 (andExpression -> andExpression AND unaryRelExpression .)
    SEMI            reduce using rule 26 (andExpression -> andExpression AND unaryRelExpression .)


state 50

    (22) conditionalStmt -> IF expressionStmt COL . statement
    (23) conditionalStmt -> IF expressionStmt COL . statement ELSE COL statement
    (17) statement -> . expressionStmt
    (18) statement -> . conditionalStmt SEMI
    (19) statement -> . iterationStmt SEMI
    (24) expressionStmt -> . expressionStmt OR andExpression
    (25) expressionStmt -> . andExpression
    (22) conditionalStmt -> . IF expressionStmt COL statement
    (23) conditionalStmt -> . IF expressionStmt COL statement ELSE COL statement
    (20) iterationStmt -> . FOR ID IN iterationElement COL statement
    (26) andExpression -> . andExpression AND unaryRelExpression
    (27) andExpression -> . unaryRelExpression
    (28) unaryRelExpression -> . NOT unaryRelExpression
    (29) unaryRelExpression -> . relExpression
    (30) relExpression -> . sumExpression relop sumExpression
    (31) relExpression -> . sumExpression
    (38) sumExpression -> . sumExpression sumop term
    (39) sumExpression -> . term
    (42) term -> . term mulop sumElement
    (43) term -> . sumElement
    (44) sumElement -> . ID
    (45) sumElement -> . NUMBER

    IF              shift and go to state 10
    FOR             shift and go to state 11
    NOT             shift and go to state 13
    ID              shift and go to state 26
    NUMBER          shift and go to state 18

    expressionStmt                 shift and go to state 6
    statement                      shift and go to state 59
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    andExpression                  shift and go to state 9
    unaryRelExpression             shift and go to state 12
    relExpression                  shift and go to state 14
    sumExpression                  shift and go to state 15
    term                           shift and go to state 16
    sumElement                     shift and go to state 17

state 51

    (20) iterationStmt -> FOR ID IN . iterationElement COL statement
    (21) iterationElement -> . ID

    ID              shift and go to state 60

    iterationElement               shift and go to state 61

state 52

    (30) relExpression -> sumExpression relop sumExpression .
    (38) sumExpression -> sumExpression . sumop term
    (40) sumop -> . PLUS
    (41) sumop -> . MINUS

    AND             reduce using rule 30 (relExpression -> sumExpression relop sumExpression .)
    OR              reduce using rule 30 (relExpression -> sumExpression relop sumExpression .)
    ID              reduce using rule 30 (relExpression -> sumExpression relop sumExpression .)
    IF              reduce using rule 30 (relExpression -> sumExpression relop sumExpression .)
    FOR             reduce using rule 30 (relExpression -> sumExpression relop sumExpression .)
    NOT             reduce using rule 30 (relExpression -> sumExpression relop sumExpression .)
    NUMBER          reduce using rule 30 (relExpression -> sumExpression relop sumExpression .)
    $end            reduce using rule 30 (relExpression -> sumExpression relop sumExpression .)
    COL             reduce using rule 30 (relExpression -> sumExpression relop sumExpression .)
    ELSE            reduce using rule 30 (relExpression -> sumExpression relop sumExpression .)
    SEMI            reduce using rule 30 (relExpression -> sumExpression relop sumExpression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38

    sumop                          shift and go to state 30

state 53

    (38) sumExpression -> sumExpression sumop term .
    (42) term -> term . mulop sumElement
    (46) mulop -> . PROD
    (47) mulop -> . DIV

    LE              reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    LT              reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    GT              reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    GE              reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    EQ              reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    NEQ             reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    PLUS            reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    MINUS           reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    AND             reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    OR              reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    ID              reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    IF              reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    FOR             reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    NOT             reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    NUMBER          reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    $end            reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    COL             reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    ELSE            reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    SEMI            reduce using rule 38 (sumExpression -> sumExpression sumop term .)
    PROD            shift and go to state 40
    DIV             shift and go to state 41

    mulop                          shift and go to state 39

state 54

    (42) term -> term mulop sumElement .

    PROD            reduce using rule 42 (term -> term mulop sumElement .)
    DIV             reduce using rule 42 (term -> term mulop sumElement .)
    LE              reduce using rule 42 (term -> term mulop sumElement .)
    LT              reduce using rule 42 (term -> term mulop sumElement .)
    GT              reduce using rule 42 (term -> term mulop sumElement .)
    GE              reduce using rule 42 (term -> term mulop sumElement .)
    EQ              reduce using rule 42 (term -> term mulop sumElement .)
    NEQ             reduce using rule 42 (term -> term mulop sumElement .)
    PLUS            reduce using rule 42 (term -> term mulop sumElement .)
    MINUS           reduce using rule 42 (term -> term mulop sumElement .)
    AND             reduce using rule 42 (term -> term mulop sumElement .)
    OR              reduce using rule 42 (term -> term mulop sumElement .)
    ID              reduce using rule 42 (term -> term mulop sumElement .)
    IF              reduce using rule 42 (term -> term mulop sumElement .)
    FOR             reduce using rule 42 (term -> term mulop sumElement .)
    NOT             reduce using rule 42 (term -> term mulop sumElement .)
    NUMBER          reduce using rule 42 (term -> term mulop sumElement .)
    $end            reduce using rule 42 (term -> term mulop sumElement .)
    COL             reduce using rule 42 (term -> term mulop sumElement .)
    ELSE            reduce using rule 42 (term -> term mulop sumElement .)
    SEMI            reduce using rule 42 (term -> term mulop sumElement .)


state 55

    (10) list -> LSQUARE listElements . RSQUARE

    RSQUARE         shift and go to state 62


state 56

    (11) listElements -> NUMBER .
    (12) listElements -> NUMBER . OP_NUMBER

    RSQUARE         reduce using rule 11 (listElements -> NUMBER .)
    OP_NUMBER       shift and go to state 63


state 57

    (13) listElements -> STRING .
    (14) listElements -> STRING . OP_STRING

    RSQUARE         reduce using rule 13 (listElements -> STRING .)
    OP_STRING       shift and go to state 64


state 58

    (15) listElements -> BOOLEAN .
    (16) listElements -> BOOLEAN . OP_BOOLEAN

    RSQUARE         reduce using rule 15 (listElements -> BOOLEAN .)
    OP_BOOLEAN      shift and go to state 65


state 59

    (22) conditionalStmt -> IF expressionStmt COL statement .
    (23) conditionalStmt -> IF expressionStmt COL statement . ELSE COL statement

    SEMI            reduce using rule 22 (conditionalStmt -> IF expressionStmt COL statement .)
    ELSE            shift and go to state 66


state 60

    (21) iterationElement -> ID .

    COL             reduce using rule 21 (iterationElement -> ID .)


state 61

    (20) iterationStmt -> FOR ID IN iterationElement . COL statement

    COL             shift and go to state 67


state 62

    (10) list -> LSQUARE listElements RSQUARE .

    ID              reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    IF              reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    FOR             reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    NOT             reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    NUMBER          reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)
    $end            reduce using rule 10 (list -> LSQUARE listElements RSQUARE .)


state 63

    (12) listElements -> NUMBER OP_NUMBER .

    RSQUARE         reduce using rule 12 (listElements -> NUMBER OP_NUMBER .)


state 64

    (14) listElements -> STRING OP_STRING .

    RSQUARE         reduce using rule 14 (listElements -> STRING OP_STRING .)


state 65

    (16) listElements -> BOOLEAN OP_BOOLEAN .

    RSQUARE         reduce using rule 16 (listElements -> BOOLEAN OP_BOOLEAN .)


state 66

    (23) conditionalStmt -> IF expressionStmt COL statement ELSE . COL statement

    COL             shift and go to state 68


state 67

    (20) iterationStmt -> FOR ID IN iterationElement COL . statement
    (17) statement -> . expressionStmt
    (18) statement -> . conditionalStmt SEMI
    (19) statement -> . iterationStmt SEMI
    (24) expressionStmt -> . expressionStmt OR andExpression
    (25) expressionStmt -> . andExpression
    (22) conditionalStmt -> . IF expressionStmt COL statement
    (23) conditionalStmt -> . IF expressionStmt COL statement ELSE COL statement
    (20) iterationStmt -> . FOR ID IN iterationElement COL statement
    (26) andExpression -> . andExpression AND unaryRelExpression
    (27) andExpression -> . unaryRelExpression
    (28) unaryRelExpression -> . NOT unaryRelExpression
    (29) unaryRelExpression -> . relExpression
    (30) relExpression -> . sumExpression relop sumExpression
    (31) relExpression -> . sumExpression
    (38) sumExpression -> . sumExpression sumop term
    (39) sumExpression -> . term
    (42) term -> . term mulop sumElement
    (43) term -> . sumElement
    (44) sumElement -> . ID
    (45) sumElement -> . NUMBER

    IF              shift and go to state 10
    FOR             shift and go to state 11
    NOT             shift and go to state 13
    ID              shift and go to state 26
    NUMBER          shift and go to state 18

    statement                      shift and go to state 69
    expressionStmt                 shift and go to state 6
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    andExpression                  shift and go to state 9
    unaryRelExpression             shift and go to state 12
    relExpression                  shift and go to state 14
    sumExpression                  shift and go to state 15
    term                           shift and go to state 16
    sumElement                     shift and go to state 17

state 68

    (23) conditionalStmt -> IF expressionStmt COL statement ELSE COL . statement
    (17) statement -> . expressionStmt
    (18) statement -> . conditionalStmt SEMI
    (19) statement -> . iterationStmt SEMI
    (24) expressionStmt -> . expressionStmt OR andExpression
    (25) expressionStmt -> . andExpression
    (22) conditionalStmt -> . IF expressionStmt COL statement
    (23) conditionalStmt -> . IF expressionStmt COL statement ELSE COL statement
    (20) iterationStmt -> . FOR ID IN iterationElement COL statement
    (26) andExpression -> . andExpression AND unaryRelExpression
    (27) andExpression -> . unaryRelExpression
    (28) unaryRelExpression -> . NOT unaryRelExpression
    (29) unaryRelExpression -> . relExpression
    (30) relExpression -> . sumExpression relop sumExpression
    (31) relExpression -> . sumExpression
    (38) sumExpression -> . sumExpression sumop term
    (39) sumExpression -> . term
    (42) term -> . term mulop sumElement
    (43) term -> . sumElement
    (44) sumElement -> . ID
    (45) sumElement -> . NUMBER

    IF              shift and go to state 10
    FOR             shift and go to state 11
    NOT             shift and go to state 13
    ID              shift and go to state 26
    NUMBER          shift and go to state 18

    expressionStmt                 shift and go to state 6
    statement                      shift and go to state 70
    conditionalStmt                shift and go to state 7
    iterationStmt                  shift and go to state 8
    andExpression                  shift and go to state 9
    unaryRelExpression             shift and go to state 12
    relExpression                  shift and go to state 14
    sumExpression                  shift and go to state 15
    term                           shift and go to state 16
    sumElement                     shift and go to state 17

state 69

    (20) iterationStmt -> FOR ID IN iterationElement COL statement .

    SEMI            reduce using rule 20 (iterationStmt -> FOR ID IN iterationElement COL statement .)


state 70

    (23) conditionalStmt -> IF expressionStmt COL statement ELSE COL statement .

    SEMI            reduce using rule 23 (conditionalStmt -> IF expressionStmt COL statement ELSE COL statement .)

