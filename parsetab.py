
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMENT STRING OP_STRING OP_NUMBER BOOLEAN OP_BOOLEAN EQ NEQ GT GE LT LE PLUS MINUS PROD DIV EQUALS LPAREN RPAREN LSQUARE RSQUARE ID NUMBER COL SEMI IF ELSE FOR IN AND OR NOT LAMBDA MAP REDUCE FILTER INPUT OUTPUTdeclarationList  : declaration declarationList\n                        | declarationdeclaration  : varDeclaration SEMI\n                    | statementvarDeclaration   : ID EQUALS declarationElementdeclarationElement   : list\n                            | sumExpression\n                            | STRING                        \n                            | BOOLEAN\n                            | inputStmt\n                            | functionalStmtlist   : LSQUARE listElements RSQUARElistElements : NUMBER\n                    | NUMBER OP_NUMBER\n                    | STRING\n                    | STRING OP_STRING\n                    | BOOLEAN\n                    | BOOLEAN OP_BOOLEANstatement    : expressionStmt SEMI\n                    | conditionalStmt\n                    | iterationStmt\n                    | functionalStmt SEMI\n                    | inputStmt SEMI\n                    | outputStmt SEMI\n                    | commentStmtiterationStmt    : FOR ID IN iterationElement COL declarationListiterationElement : list\n                        | IDconditionalStmt  : IF expressionStmt COL declarationList\n                        | IF expressionStmt COL declarationList ELSE COL declarationListexpressionStmt   : expressionStmt OR andExpression\n                        | andExpressionandExpression    : andExpression AND unaryRelExpression\n                        | unaryRelExpressionunaryRelExpression   : NOT unaryRelExpression\n                            | relExpressionrelExpression    : sumExpression relop sumExpression\n                        | sumExpressionrelop    : LE\n                | LT\n                | GT\n                | GE\n                | EQ\n                | NEQsumExpression    : sumExpression sumop term\n                        | termsumop    : PLUS\n                | MINUSterm : term mulop sumElement\n            | sumElementsumElement   : ID\n                    | NUMBERmulop    : PROD\n                | DIVfunctionalStmt   : FILTER LPAREN lambdaFilter RPAREN\n                        | MAP LPAREN lambdaMap RPAREN\n                        | REDUCE LPAREN lambdaReduce RPARENlambdaMap   : LAMBDA COL sumExpressionlambdaReduce : LAMBDA COL relExpressionlambdaFilter : LAMBDA COL relExpressioninputStmt  : INPUT LPAREN RPARENoutputStmt : OUTPUT LPAREN declarationElement RPARENcommentStmt    : COMMENT'
    
_lr_action_items = {'ID':([0,2,4,7,8,12,14,15,21,23,29,30,31,32,33,34,35,36,37,45,47,48,49,50,51,52,53,54,55,56,57,58,59,70,71,87,92,94,96,103,107,108,109,],[5,5,-4,-20,-21,-25,39,40,-63,39,-1,-3,39,-19,39,-22,-23,-24,39,39,39,39,-39,-40,-41,-42,-43,-44,-47,-48,39,-53,-54,5,88,-29,39,39,39,5,5,-26,-30,]),'IF':([0,2,4,7,8,12,21,29,30,32,34,35,36,70,87,103,107,108,109,],[14,14,-4,-20,-21,-25,-63,-1,-3,-19,-22,-23,-24,14,-29,14,14,-26,-30,]),'FOR':([0,2,4,7,8,12,21,29,30,32,34,35,36,70,87,103,107,108,109,],[15,15,-4,-20,-21,-25,-63,-1,-3,-19,-22,-23,-24,15,-29,15,15,-26,-30,]),'FILTER':([0,2,4,7,8,12,21,29,30,31,32,34,35,36,45,70,87,103,107,108,109,],[16,16,-4,-20,-21,-25,-63,-1,-3,16,-19,-22,-23,-24,16,16,-29,16,16,-26,-30,]),'MAP':([0,2,4,7,8,12,21,29,30,31,32,34,35,36,45,70,87,103,107,108,109,],[17,17,-4,-20,-21,-25,-63,-1,-3,17,-19,-22,-23,-24,17,17,-29,17,17,-26,-30,]),'REDUCE':([0,2,4,7,8,12,21,29,30,31,32,34,35,36,45,70,87,103,107,108,109,],[18,18,-4,-20,-21,-25,-63,-1,-3,18,-19,-22,-23,-24,18,18,-29,18,18,-26,-30,]),'INPUT':([0,2,4,7,8,12,21,29,30,31,32,34,35,36,45,70,87,103,107,108,109,],[19,19,-4,-20,-21,-25,-63,-1,-3,19,-19,-22,-23,-24,19,19,-29,19,19,-26,-30,]),'OUTPUT':([0,2,4,7,8,12,21,29,30,32,34,35,36,70,87,103,107,108,109,],[20,20,-4,-20,-21,-25,-63,-1,-3,-19,-22,-23,-24,20,-29,20,20,-26,-30,]),'COMMENT':([0,2,4,7,8,12,21,29,30,32,34,35,36,70,87,103,107,108,109,],[21,21,-4,-20,-21,-25,-63,-1,-3,-19,-22,-23,-24,21,-29,21,21,-26,-30,]),'NOT':([0,2,4,7,8,12,14,21,23,29,30,32,33,34,35,36,37,70,87,103,107,108,109,],[23,23,-4,-20,-21,-25,23,-63,23,-1,-3,-19,23,-22,-23,-24,23,23,-29,23,23,-26,-30,]),'NUMBER':([0,2,4,7,8,12,14,21,23,29,30,31,32,33,34,35,36,37,45,47,48,49,50,51,52,53,54,55,56,57,58,59,67,70,87,92,94,96,103,107,108,109,],[28,28,-4,-20,-21,-25,28,-63,28,-1,-3,28,-19,28,-22,-23,-24,28,28,28,28,-39,-40,-41,-42,-43,-44,-47,-48,28,-53,-54,84,28,-29,28,28,28,28,28,-26,-30,]),'$end':([1,2,4,7,8,12,21,29,30,32,34,35,36,87,108,109,],[0,-2,-4,-20,-21,-25,-63,-1,-3,-19,-22,-23,-24,-29,-26,-30,]),'ELSE':([2,4,7,8,12,21,29,30,32,34,35,36,87,108,109,],[-2,-4,-20,-21,-25,-63,-1,-3,-19,-22,-23,-24,102,-26,-30,]),'SEMI':([3,5,6,9,10,11,13,22,24,25,26,27,28,39,46,60,61,62,63,64,65,66,68,69,78,80,81,82,91,93,95,97,98,],[30,-51,32,34,35,36,-32,-34,-36,-38,-46,-50,-52,-51,-35,-5,-6,-7,-8,-9,-10,-11,-31,-33,-61,-37,-45,-49,-55,-56,-57,-62,-12,]),'EQUALS':([5,],[31,]),'PROD':([5,26,27,28,39,81,82,],[-51,58,-50,-52,-51,58,-49,]),'DIV':([5,26,27,28,39,81,82,],[-51,59,-50,-52,-51,59,-49,]),'LE':([5,25,26,27,28,39,81,82,],[-51,49,-46,-50,-52,-51,-45,-49,]),'LT':([5,25,26,27,28,39,81,82,],[-51,50,-46,-50,-52,-51,-45,-49,]),'GT':([5,25,26,27,28,39,81,82,],[-51,51,-46,-50,-52,-51,-45,-49,]),'GE':([5,25,26,27,28,39,81,82,],[-51,52,-46,-50,-52,-51,-45,-49,]),'EQ':([5,25,26,27,28,39,81,82,],[-51,53,-46,-50,-52,-51,-45,-49,]),'NEQ':([5,25,26,27,28,39,81,82,],[-51,54,-46,-50,-52,-51,-45,-49,]),'PLUS':([5,25,26,27,28,39,62,80,81,82,105,],[-51,55,-46,-50,-52,-51,55,55,-45,-49,55,]),'MINUS':([5,25,26,27,28,39,62,80,81,82,105,],[-51,56,-46,-50,-52,-51,56,56,-45,-49,56,]),'AND':([5,13,22,24,25,26,27,28,39,46,68,69,80,81,82,],[-51,37,-34,-36,-38,-46,-50,-52,-51,-35,37,-33,-37,-45,-49,]),'OR':([5,6,13,22,24,25,26,27,28,38,39,46,68,69,80,81,82,],[-51,33,-32,-34,-36,-38,-46,-50,-52,33,-51,-35,-31,-33,-37,-45,-49,]),'COL':([13,22,24,25,26,27,28,38,39,46,68,69,73,75,77,80,81,82,88,89,90,98,102,],[-32,-34,-36,-38,-46,-50,-52,70,-51,-35,-31,-33,92,94,96,-37,-45,-49,-28,103,-27,-12,107,]),'LPAREN':([16,17,18,19,20,],[41,42,43,44,45,]),'RPAREN':([25,26,27,28,39,44,61,62,63,64,65,66,72,74,76,78,79,80,81,82,91,93,95,98,104,105,106,],[-38,-46,-50,-52,-51,78,-6,-7,-8,-9,-10,-11,91,93,95,-61,97,-37,-45,-49,-55,-56,-57,-12,-60,-58,-59,]),'STRING':([31,45,67,],[63,63,85,]),'BOOLEAN':([31,45,67,],[64,64,86,]),'LSQUARE':([31,45,71,],[67,67,67,]),'IN':([40,],[71,]),'LAMBDA':([41,42,43,],[73,75,77,]),'RSQUARE':([83,84,85,86,99,100,101,],[98,-13,-15,-17,-14,-16,-18,]),'OP_NUMBER':([84,],[99,]),'OP_STRING':([85,],[100,]),'OP_BOOLEAN':([86,],[101,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declarationList':([0,2,70,103,107,],[1,29,87,108,109,]),'declaration':([0,2,70,103,107,],[2,2,2,2,2,]),'varDeclaration':([0,2,70,103,107,],[3,3,3,3,3,]),'statement':([0,2,70,103,107,],[4,4,4,4,4,]),'expressionStmt':([0,2,14,70,103,107,],[6,6,38,6,6,6,]),'conditionalStmt':([0,2,70,103,107,],[7,7,7,7,7,]),'iterationStmt':([0,2,70,103,107,],[8,8,8,8,8,]),'functionalStmt':([0,2,31,45,70,103,107,],[9,9,66,66,9,9,9,]),'inputStmt':([0,2,31,45,70,103,107,],[10,10,65,65,10,10,10,]),'outputStmt':([0,2,70,103,107,],[11,11,11,11,11,]),'commentStmt':([0,2,70,103,107,],[12,12,12,12,12,]),'andExpression':([0,2,14,33,70,103,107,],[13,13,13,68,13,13,13,]),'unaryRelExpression':([0,2,14,23,33,37,70,103,107,],[22,22,22,46,22,69,22,22,22,]),'relExpression':([0,2,14,23,33,37,70,92,96,103,107,],[24,24,24,24,24,24,24,104,106,24,24,]),'sumExpression':([0,2,14,23,31,33,37,45,47,70,92,94,96,103,107,],[25,25,25,25,62,25,25,62,80,25,25,105,25,25,25,]),'term':([0,2,14,23,31,33,37,45,47,48,70,92,94,96,103,107,],[26,26,26,26,26,26,26,26,26,81,26,26,26,26,26,26,]),'sumElement':([0,2,14,23,31,33,37,45,47,48,57,70,92,94,96,103,107,],[27,27,27,27,27,27,27,27,27,27,82,27,27,27,27,27,27,]),'relop':([25,],[47,]),'sumop':([25,62,80,105,],[48,48,48,48,]),'mulop':([26,81,],[57,57,]),'declarationElement':([31,45,],[60,79,]),'list':([31,45,71,],[61,61,90,]),'lambdaFilter':([41,],[72,]),'lambdaMap':([42,],[74,]),'lambdaReduce':([43,],[76,]),'listElements':([67,],[83,]),'iterationElement':([71,],[89,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declarationList","S'",1,None,None,None),
  ('declarationList -> declaration declarationList','declarationList',2,'p_declarationList','interpreter.py',158),
  ('declarationList -> declaration','declarationList',1,'p_declarationList','interpreter.py',159),
  ('declaration -> varDeclaration SEMI','declaration',2,'p_declaration','interpreter.py',164),
  ('declaration -> statement','declaration',1,'p_declaration','interpreter.py',165),
  ('varDeclaration -> ID EQUALS declarationElement','varDeclaration',3,'p_varDeclaration','interpreter.py',170),
  ('declarationElement -> list','declarationElement',1,'p_declarationElement','interpreter.py',175),
  ('declarationElement -> sumExpression','declarationElement',1,'p_declarationElement','interpreter.py',176),
  ('declarationElement -> STRING','declarationElement',1,'p_declarationElement','interpreter.py',177),
  ('declarationElement -> BOOLEAN','declarationElement',1,'p_declarationElement','interpreter.py',178),
  ('declarationElement -> inputStmt','declarationElement',1,'p_declarationElement','interpreter.py',179),
  ('declarationElement -> functionalStmt','declarationElement',1,'p_declarationElement','interpreter.py',180),
  ('list -> LSQUARE listElements RSQUARE','list',3,'p_list','interpreter.py',185),
  ('listElements -> NUMBER','listElements',1,'p_listElements','interpreter.py',190),
  ('listElements -> NUMBER OP_NUMBER','listElements',2,'p_listElements','interpreter.py',191),
  ('listElements -> STRING','listElements',1,'p_listElements','interpreter.py',192),
  ('listElements -> STRING OP_STRING','listElements',2,'p_listElements','interpreter.py',193),
  ('listElements -> BOOLEAN','listElements',1,'p_listElements','interpreter.py',194),
  ('listElements -> BOOLEAN OP_BOOLEAN','listElements',2,'p_listElements','interpreter.py',195),
  ('statement -> expressionStmt SEMI','statement',2,'p_statement','interpreter.py',212),
  ('statement -> conditionalStmt','statement',1,'p_statement','interpreter.py',213),
  ('statement -> iterationStmt','statement',1,'p_statement','interpreter.py',214),
  ('statement -> functionalStmt SEMI','statement',2,'p_statement','interpreter.py',215),
  ('statement -> inputStmt SEMI','statement',2,'p_statement','interpreter.py',216),
  ('statement -> outputStmt SEMI','statement',2,'p_statement','interpreter.py',217),
  ('statement -> commentStmt','statement',1,'p_statement','interpreter.py',218),
  ('iterationStmt -> FOR ID IN iterationElement COL declarationList','iterationStmt',6,'p_iterationStmt','interpreter.py',223),
  ('iterationElement -> list','iterationElement',1,'p_iterationElement','interpreter.py',228),
  ('iterationElement -> ID','iterationElement',1,'p_iterationElement','interpreter.py',229),
  ('conditionalStmt -> IF expressionStmt COL declarationList','conditionalStmt',4,'p_conditionalStmt','interpreter.py',234),
  ('conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList','conditionalStmt',7,'p_conditionalStmt','interpreter.py',235),
  ('expressionStmt -> expressionStmt OR andExpression','expressionStmt',3,'p_expressionStmt','interpreter.py',240),
  ('expressionStmt -> andExpression','expressionStmt',1,'p_expressionStmt','interpreter.py',241),
  ('andExpression -> andExpression AND unaryRelExpression','andExpression',3,'p_andExpression','interpreter.py',246),
  ('andExpression -> unaryRelExpression','andExpression',1,'p_andExpression','interpreter.py',247),
  ('unaryRelExpression -> NOT unaryRelExpression','unaryRelExpression',2,'p_unaryRelExpression','interpreter.py',252),
  ('unaryRelExpression -> relExpression','unaryRelExpression',1,'p_unaryRelExpression','interpreter.py',253),
  ('relExpression -> sumExpression relop sumExpression','relExpression',3,'p_relExpression','interpreter.py',258),
  ('relExpression -> sumExpression','relExpression',1,'p_relExpression','interpreter.py',259),
  ('relop -> LE','relop',1,'p_relop','interpreter.py',282),
  ('relop -> LT','relop',1,'p_relop','interpreter.py',283),
  ('relop -> GT','relop',1,'p_relop','interpreter.py',284),
  ('relop -> GE','relop',1,'p_relop','interpreter.py',285),
  ('relop -> EQ','relop',1,'p_relop','interpreter.py',286),
  ('relop -> NEQ','relop',1,'p_relop','interpreter.py',287),
  ('sumExpression -> sumExpression sumop term','sumExpression',3,'p_sumExpression','interpreter.py',292),
  ('sumExpression -> term','sumExpression',1,'p_sumExpression','interpreter.py',293),
  ('sumop -> PLUS','sumop',1,'p_sumop','interpreter.py',307),
  ('sumop -> MINUS','sumop',1,'p_sumop','interpreter.py',308),
  ('term -> term mulop sumElement','term',3,'p_term','interpreter.py',313),
  ('term -> sumElement','term',1,'p_term','interpreter.py',314),
  ('sumElement -> ID','sumElement',1,'p_sumElement','interpreter.py',328),
  ('sumElement -> NUMBER','sumElement',1,'p_sumElement','interpreter.py',329),
  ('mulop -> PROD','mulop',1,'p_mulop','interpreter.py',342),
  ('mulop -> DIV','mulop',1,'p_mulop','interpreter.py',343),
  ('functionalStmt -> FILTER LPAREN lambdaFilter RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',348),
  ('functionalStmt -> MAP LPAREN lambdaMap RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',349),
  ('functionalStmt -> REDUCE LPAREN lambdaReduce RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',350),
  ('lambdaMap -> LAMBDA COL sumExpression','lambdaMap',3,'p_lambdaMap','interpreter.py',355),
  ('lambdaReduce -> LAMBDA COL relExpression','lambdaReduce',3,'p_lambdaReduce','interpreter.py',360),
  ('lambdaFilter -> LAMBDA COL relExpression','lambdaFilter',3,'p_lambdaFilter','interpreter.py',365),
  ('inputStmt -> INPUT LPAREN RPAREN','inputStmt',3,'p_inputStmt','interpreter.py',370),
  ('outputStmt -> OUTPUT LPAREN declarationElement RPAREN','outputStmt',4,'p_outputStmt','interpreter.py',375),
  ('commentStmt -> COMMENT','commentStmt',1,'p_commentStmt','interpreter.py',379),
]
