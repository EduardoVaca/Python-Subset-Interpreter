
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMENT STRING OP_STRING OP_NUMBER BOOLEAN OP_BOOLEAN EQ NEQ GT GE LT LE PLUS MINUS PROD DIV EQUALS LPAREN RPAREN LSQUARE RSQUARE COMA ID OP_ID NUMBER COL SEMI IF ELSE FOR IN AND OR NOT LAMBDA MAP REDUCE FILTER INPUT OUTPUTdeclarationList  : declarationList declaration\n                        | declarationdeclaration  : varDeclaration SEMI\n                    | statementvarDeclaration   : ID EQUALS declarationElementdeclarationElement   : sumExpression\n                            | STRING                        \n                            | BOOLEANlist   : LSQUARE listElements RSQUARElistElements : NUMBER\n                    | NUMBER OP_NUMBER\n                    | STRING\n                    | STRING OP_STRING\n                    | BOOLEAN\n                    | BOOLEAN OP_BOOLEANstatement    : expressionStmt SEMI\n                    | conditionalStmt\n                    | iterationStmt\n                    | functionalStmt SEMI\n                    | inputStmt SEMI\n                    | outputStmt SEMI\n                    | commentStmtiterationStmt    : FOR ID IN iterationElement COL declarationListiterationElement : list\n                        | IDconditionalStmt  : IF expressionStmt COL declarationList\n                        | IF expressionStmt COL declarationList ELSE COL declarationListexpressionStmt   : expressionStmt OR andExpression\n                        | andExpressionandExpression    : andExpression AND unaryRelExpression\n                        | unaryRelExpressionunaryRelExpression   : NOT unaryRelExpression\n                            | relExpressionrelExpression    : sumExpression relop sumExpression\n                        | sumExpressionrelop    : LE\n                | LT\n                | GT\n                | GE\n                | EQ\n                | NEQsumExpression    : sumExpression sumop term\n                        | termsumop    : PLUS\n                | MINUSterm : term mulop sumElement\n            | sumElementsumElement   : ID\n                    | NUMBERmulop    : PROD\n                | DIVfunctionalStmt   : FILTER LPAREN lambdaFilter RPAREN\n                        | MAP LPAREN lambdaStmt RPAREN\n                        | REDUCE LPAREN lambdaStmt RPARENlambdaStmt   : LAMBDA lambdaElement COL sumExpression COMA iterationElementlambdaElement    : ID\n                        | ID OP_IDlambdaFilter : LAMBDA lambdaElement COL expressionStmt COMA iterationElementinputStmt  : INPUT LPAREN RPARENoutputStmt : OUTPUT LPAREN declarationElement RPARENcommentStmt    : COMMENT'
    
_lr_action_items = {'ID':([0,1,2,4,7,8,12,14,15,21,23,29,30,31,32,33,34,35,36,37,45,47,48,49,50,51,52,53,54,55,56,57,58,59,66,67,69,71,78,91,96,98,99,100,107,108,109,],[5,5,-2,-4,-17,-18,-22,39,40,-61,39,-1,-3,39,-16,39,-19,-20,-21,39,39,39,39,-36,-37,-38,-39,-40,-41,-44,-45,39,-50,-51,5,79,85,85,5,5,39,39,5,5,5,79,79,]),'IF':([0,1,2,4,7,8,12,21,29,30,32,34,35,36,66,78,91,99,100,107,],[14,14,-2,-4,-17,-18,-22,-61,-1,-3,-16,-19,-20,-21,14,14,14,14,14,14,]),'FOR':([0,1,2,4,7,8,12,21,29,30,32,34,35,36,66,78,91,99,100,107,],[15,15,-2,-4,-17,-18,-22,-61,-1,-3,-16,-19,-20,-21,15,15,15,15,15,15,]),'FILTER':([0,1,2,4,7,8,12,21,29,30,32,34,35,36,66,78,91,99,100,107,],[16,16,-2,-4,-17,-18,-22,-61,-1,-3,-16,-19,-20,-21,16,16,16,16,16,16,]),'MAP':([0,1,2,4,7,8,12,21,29,30,32,34,35,36,66,78,91,99,100,107,],[17,17,-2,-4,-17,-18,-22,-61,-1,-3,-16,-19,-20,-21,17,17,17,17,17,17,]),'REDUCE':([0,1,2,4,7,8,12,21,29,30,32,34,35,36,66,78,91,99,100,107,],[18,18,-2,-4,-17,-18,-22,-61,-1,-3,-16,-19,-20,-21,18,18,18,18,18,18,]),'INPUT':([0,1,2,4,7,8,12,21,29,30,32,34,35,36,66,78,91,99,100,107,],[19,19,-2,-4,-17,-18,-22,-61,-1,-3,-16,-19,-20,-21,19,19,19,19,19,19,]),'OUTPUT':([0,1,2,4,7,8,12,21,29,30,32,34,35,36,66,78,91,99,100,107,],[20,20,-2,-4,-17,-18,-22,-61,-1,-3,-16,-19,-20,-21,20,20,20,20,20,20,]),'COMMENT':([0,1,2,4,7,8,12,21,29,30,32,34,35,36,66,78,91,99,100,107,],[21,21,-2,-4,-17,-18,-22,-61,-1,-3,-16,-19,-20,-21,21,21,21,21,21,21,]),'NOT':([0,1,2,4,7,8,12,14,21,23,29,30,32,33,34,35,36,37,66,78,91,96,99,100,107,],[23,23,-2,-4,-17,-18,-22,23,-61,23,-1,-3,-16,23,-19,-20,-21,23,23,23,23,23,23,23,23,]),'NUMBER':([0,1,2,4,7,8,12,14,21,23,29,30,31,32,33,34,35,36,37,45,47,48,49,50,51,52,53,54,55,56,57,58,59,66,78,82,91,96,98,99,100,107,],[28,28,-2,-4,-17,-18,-22,28,-61,28,-1,-3,28,-16,28,-19,-20,-21,28,28,28,28,-36,-37,-38,-39,-40,-41,-44,-45,28,-50,-51,28,28,93,28,28,28,28,28,28,]),'$end':([1,2,4,7,8,12,21,29,30,32,34,35,36,78,100,107,],[0,-2,-4,-17,-18,-22,-61,-1,-3,-16,-19,-20,-21,-26,-23,-27,]),'ELSE':([2,4,7,8,12,21,29,30,32,34,35,36,78,100,107,],[-2,-4,-17,-18,-22,-61,-1,-3,-16,-19,-20,-21,90,-23,-27,]),'SEMI':([3,5,6,9,10,11,13,22,24,25,26,27,28,39,46,60,61,62,63,64,65,73,75,76,77,83,86,88,89,],[30,-48,32,34,35,36,-29,-31,-33,-35,-43,-47,-49,-48,-32,-5,-6,-7,-8,-28,-30,-59,-34,-42,-46,-52,-53,-54,-60,]),'EQUALS':([5,],[31,]),'PROD':([5,26,27,28,39,76,77,],[-48,58,-47,-49,-48,58,-46,]),'DIV':([5,26,27,28,39,76,77,],[-48,59,-47,-49,-48,59,-46,]),'LE':([5,25,26,27,28,39,76,77,],[-48,49,-43,-47,-49,-48,-42,-46,]),'LT':([5,25,26,27,28,39,76,77,],[-48,50,-43,-47,-49,-48,-42,-46,]),'GT':([5,25,26,27,28,39,76,77,],[-48,51,-43,-47,-49,-48,-42,-46,]),'GE':([5,25,26,27,28,39,76,77,],[-48,52,-43,-47,-49,-48,-42,-46,]),'EQ':([5,25,26,27,28,39,76,77,],[-48,53,-43,-47,-49,-48,-42,-46,]),'NEQ':([5,25,26,27,28,39,76,77,],[-48,54,-43,-47,-49,-48,-42,-46,]),'PLUS':([5,25,26,27,28,39,61,75,76,77,106,],[-48,55,-43,-47,-49,-48,55,55,-42,-46,55,]),'MINUS':([5,25,26,27,28,39,61,75,76,77,106,],[-48,56,-43,-47,-49,-48,56,56,-42,-46,56,]),'AND':([5,13,22,24,25,26,27,28,39,46,64,65,75,76,77,],[-48,37,-31,-33,-35,-43,-47,-49,-48,-32,37,-30,-34,-42,-46,]),'OR':([5,6,13,22,24,25,26,27,28,38,39,46,64,65,75,76,77,105,],[-48,33,-29,-31,-33,-35,-43,-47,-49,33,-48,-32,-28,-30,-34,-42,-46,33,]),'COL':([13,22,24,25,26,27,28,38,39,46,64,65,75,76,77,79,80,81,84,85,87,90,97,101,],[-29,-31,-33,-35,-43,-47,-49,66,-48,-32,-28,-30,-34,-42,-46,-25,91,-24,96,-56,98,99,-57,-9,]),'COMA':([13,22,24,25,26,27,28,39,46,64,65,75,76,77,105,106,],[-29,-31,-33,-35,-43,-47,-49,-48,-32,-28,-30,-34,-42,-46,108,109,]),'LPAREN':([16,17,18,19,20,],[41,42,43,44,45,]),'RPAREN':([26,27,28,39,44,61,62,63,68,70,72,74,76,77,79,81,101,110,111,],[-43,-47,-49,-48,73,-6,-7,-8,83,86,88,89,-42,-46,-25,-24,-9,-58,-55,]),'STRING':([31,45,82,],[62,62,94,]),'BOOLEAN':([31,45,82,],[63,63,95,]),'IN':([40,],[67,]),'LAMBDA':([41,42,43,],[69,71,71,]),'LSQUARE':([67,108,109,],[82,82,82,]),'OP_ID':([85,],[97,]),'RSQUARE':([92,93,94,95,102,103,104,],[101,-10,-12,-14,-11,-13,-15,]),'OP_NUMBER':([93,],[102,]),'OP_STRING':([94,],[103,]),'OP_BOOLEAN':([95,],[104,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declarationList':([0,66,91,99,],[1,78,100,107,]),'declaration':([0,1,66,78,91,99,100,107,],[2,29,2,29,2,2,29,29,]),'varDeclaration':([0,1,66,78,91,99,100,107,],[3,3,3,3,3,3,3,3,]),'statement':([0,1,66,78,91,99,100,107,],[4,4,4,4,4,4,4,4,]),'expressionStmt':([0,1,14,66,78,91,96,99,100,107,],[6,6,38,6,6,6,105,6,6,6,]),'conditionalStmt':([0,1,66,78,91,99,100,107,],[7,7,7,7,7,7,7,7,]),'iterationStmt':([0,1,66,78,91,99,100,107,],[8,8,8,8,8,8,8,8,]),'functionalStmt':([0,1,66,78,91,99,100,107,],[9,9,9,9,9,9,9,9,]),'inputStmt':([0,1,66,78,91,99,100,107,],[10,10,10,10,10,10,10,10,]),'outputStmt':([0,1,66,78,91,99,100,107,],[11,11,11,11,11,11,11,11,]),'commentStmt':([0,1,66,78,91,99,100,107,],[12,12,12,12,12,12,12,12,]),'andExpression':([0,1,14,33,66,78,91,96,99,100,107,],[13,13,13,64,13,13,13,13,13,13,13,]),'unaryRelExpression':([0,1,14,23,33,37,66,78,91,96,99,100,107,],[22,22,22,46,22,65,22,22,22,22,22,22,22,]),'relExpression':([0,1,14,23,33,37,66,78,91,96,99,100,107,],[24,24,24,24,24,24,24,24,24,24,24,24,24,]),'sumExpression':([0,1,14,23,31,33,37,45,47,66,78,91,96,98,99,100,107,],[25,25,25,25,61,25,25,61,75,25,25,25,25,106,25,25,25,]),'term':([0,1,14,23,31,33,37,45,47,48,66,78,91,96,98,99,100,107,],[26,26,26,26,26,26,26,26,26,76,26,26,26,26,26,26,26,26,]),'sumElement':([0,1,14,23,31,33,37,45,47,48,57,66,78,91,96,98,99,100,107,],[27,27,27,27,27,27,27,27,27,27,77,27,27,27,27,27,27,27,27,]),'relop':([25,],[47,]),'sumop':([25,61,75,106,],[48,48,48,48,]),'mulop':([26,76,],[57,57,]),'declarationElement':([31,45,],[60,74,]),'lambdaFilter':([41,],[68,]),'lambdaStmt':([42,43,],[70,72,]),'iterationElement':([67,108,109,],[80,110,111,]),'list':([67,108,109,],[81,81,81,]),'lambdaElement':([69,71,],[84,87,]),'listElements':([82,],[92,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declarationList","S'",1,None,None,None),
  ('declarationList -> declarationList declaration','declarationList',2,'p_declarationList','interpreter.py',122),
  ('declarationList -> declaration','declarationList',1,'p_declarationList','interpreter.py',123),
  ('declaration -> varDeclaration SEMI','declaration',2,'p_declaration','interpreter.py',128),
  ('declaration -> statement','declaration',1,'p_declaration','interpreter.py',129),
  ('varDeclaration -> ID EQUALS declarationElement','varDeclaration',3,'p_varDeclaration','interpreter.py',134),
  ('declarationElement -> sumExpression','declarationElement',1,'p_declarationElement','interpreter.py',139),
  ('declarationElement -> STRING','declarationElement',1,'p_declarationElement','interpreter.py',140),
  ('declarationElement -> BOOLEAN','declarationElement',1,'p_declarationElement','interpreter.py',141),
  ('list -> LSQUARE listElements RSQUARE','list',3,'p_list','interpreter.py',146),
  ('listElements -> NUMBER','listElements',1,'p_listElements','interpreter.py',151),
  ('listElements -> NUMBER OP_NUMBER','listElements',2,'p_listElements','interpreter.py',152),
  ('listElements -> STRING','listElements',1,'p_listElements','interpreter.py',153),
  ('listElements -> STRING OP_STRING','listElements',2,'p_listElements','interpreter.py',154),
  ('listElements -> BOOLEAN','listElements',1,'p_listElements','interpreter.py',155),
  ('listElements -> BOOLEAN OP_BOOLEAN','listElements',2,'p_listElements','interpreter.py',156),
  ('statement -> expressionStmt SEMI','statement',2,'p_statement','interpreter.py',161),
  ('statement -> conditionalStmt','statement',1,'p_statement','interpreter.py',162),
  ('statement -> iterationStmt','statement',1,'p_statement','interpreter.py',163),
  ('statement -> functionalStmt SEMI','statement',2,'p_statement','interpreter.py',164),
  ('statement -> inputStmt SEMI','statement',2,'p_statement','interpreter.py',165),
  ('statement -> outputStmt SEMI','statement',2,'p_statement','interpreter.py',166),
  ('statement -> commentStmt','statement',1,'p_statement','interpreter.py',167),
  ('iterationStmt -> FOR ID IN iterationElement COL declarationList','iterationStmt',6,'p_iterationStmt','interpreter.py',172),
  ('iterationElement -> list','iterationElement',1,'p_iterationElement','interpreter.py',177),
  ('iterationElement -> ID','iterationElement',1,'p_iterationElement','interpreter.py',178),
  ('conditionalStmt -> IF expressionStmt COL declarationList','conditionalStmt',4,'p_conditionalStmt','interpreter.py',183),
  ('conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList','conditionalStmt',7,'p_conditionalStmt','interpreter.py',184),
  ('expressionStmt -> expressionStmt OR andExpression','expressionStmt',3,'p_expressionStmt','interpreter.py',189),
  ('expressionStmt -> andExpression','expressionStmt',1,'p_expressionStmt','interpreter.py',190),
  ('andExpression -> andExpression AND unaryRelExpression','andExpression',3,'p_andExpression','interpreter.py',195),
  ('andExpression -> unaryRelExpression','andExpression',1,'p_andExpression','interpreter.py',196),
  ('unaryRelExpression -> NOT unaryRelExpression','unaryRelExpression',2,'p_unaryRelExpression','interpreter.py',201),
  ('unaryRelExpression -> relExpression','unaryRelExpression',1,'p_unaryRelExpression','interpreter.py',202),
  ('relExpression -> sumExpression relop sumExpression','relExpression',3,'p_relExpression','interpreter.py',207),
  ('relExpression -> sumExpression','relExpression',1,'p_relExpression','interpreter.py',208),
  ('relop -> LE','relop',1,'p_relop','interpreter.py',213),
  ('relop -> LT','relop',1,'p_relop','interpreter.py',214),
  ('relop -> GT','relop',1,'p_relop','interpreter.py',215),
  ('relop -> GE','relop',1,'p_relop','interpreter.py',216),
  ('relop -> EQ','relop',1,'p_relop','interpreter.py',217),
  ('relop -> NEQ','relop',1,'p_relop','interpreter.py',218),
  ('sumExpression -> sumExpression sumop term','sumExpression',3,'p_sumExpression','interpreter.py',223),
  ('sumExpression -> term','sumExpression',1,'p_sumExpression','interpreter.py',224),
  ('sumop -> PLUS','sumop',1,'p_sumop','interpreter.py',229),
  ('sumop -> MINUS','sumop',1,'p_sumop','interpreter.py',230),
  ('term -> term mulop sumElement','term',3,'p_term','interpreter.py',235),
  ('term -> sumElement','term',1,'p_term','interpreter.py',236),
  ('sumElement -> ID','sumElement',1,'p_sumElement','interpreter.py',241),
  ('sumElement -> NUMBER','sumElement',1,'p_sumElement','interpreter.py',242),
  ('mulop -> PROD','mulop',1,'p_mulop','interpreter.py',247),
  ('mulop -> DIV','mulop',1,'p_mulop','interpreter.py',248),
  ('functionalStmt -> FILTER LPAREN lambdaFilter RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',253),
  ('functionalStmt -> MAP LPAREN lambdaStmt RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',254),
  ('functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',255),
  ('lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA iterationElement','lambdaStmt',6,'p_lambdaStmt','interpreter.py',260),
  ('lambdaElement -> ID','lambdaElement',1,'p_lambdaElement','interpreter.py',264),
  ('lambdaElement -> ID OP_ID','lambdaElement',2,'p_lambdaElement','interpreter.py',265),
  ('lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA iterationElement','lambdaFilter',6,'p_lambdaFilter','interpreter.py',270),
  ('inputStmt -> INPUT LPAREN RPAREN','inputStmt',3,'p_inputStmt','interpreter.py',275),
  ('outputStmt -> OUTPUT LPAREN declarationElement RPAREN','outputStmt',4,'p_outputStmt','interpreter.py',280),
  ('commentStmt -> COMMENT','commentStmt',1,'p_commentStmt','interpreter.py',284),
]
