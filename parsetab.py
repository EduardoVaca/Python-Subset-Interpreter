
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMENT STRING OP_STRING OP_NUMBER BOOLEAN OP_BOOLEAN EQ NEQ GT GE LT LE PLUS MINUS PROD DIV EQUALS LPAREN RPAREN LSQUARE RSQUARE COMA ID OP_ID NUMBER COL SEMI IF ELSE FOR IN AND OR NOT LAMBDA MAP REDUCE FILTER INPUT OUTPUTdeclarationList  : declarationList declaration\n                        | declarationdeclaration  : varDeclaration\n                    | statementvarDeclaration   : ID EQUALS declarationElementdeclarationElement   : list\n                            | STRING\n                            | NUMBER\n                            | BOOLEANlist   : LSQUARE listElements RSQUARElistElements : NUMBER\n                    | NUMBER OP_NUMBER\n                    | STRING\n                    | STRING OP_STRING\n                    | BOOLEAN\n                    | BOOLEAN OP_BOOLEANstatement    : expressionStmt\n                    | conditionalStmt SEMI\n                    | iterationStmt SEMI\n                    | functionalStmt\n                    | inputStmt\n                    | outputStmtiterationStmt    : FOR ID IN iterationElement COL statementiterationElement : list\n                        | IDconditionalStmt  : IF expressionStmt COL statement\n                        | IF expressionStmt COL statement ELSE COL statementexpressionStmt   : expressionStmt OR andExpression\n                        | andExpressionandExpression    : andExpression AND unaryRelExpression\n                        | unaryRelExpressionunaryRelExpression   : NOT unaryRelExpression\n                            | relExpressionrelExpression    : sumExpression relop sumExpression\n                        | sumExpressionrelop    : LE\n                | LT\n                | GT\n                | GE\n                | EQ\n                | NEQsumExpression    : sumExpression sumop term\n                        | termsumop    : PLUS\n                | MINUSterm : term mulop sumElement\n            | sumElementsumElement   : ID\n                    | NUMBERmulop    : PROD\n                | DIVfunctionalStmt   : FILTER LPAREN lambdaFilter RPAREN\n                        | MAP LPAREN lambdaStmt RPAREN\n                        | REDUCE LPAREN lambdaStmt RPARENlambdaStmt   : LAMBDA lambdaElement COL sumExpression COMA iterationElementlambdaElement    : ID\n                        | ID OP_IDlambdaFilter : LAMBDA lambdaElement COL expressionStmt COMA iterationElementinputStmt  : INPUT LPAREN RPARENoutputStmt : OUTPUT LPAREN declarationElement RPAREN'
    
_lr_action_items = {'ID':([0,1,2,3,4,5,6,9,10,11,12,13,14,20,21,22,23,24,25,26,27,29,30,31,32,34,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,63,64,66,68,70,72,73,74,83,86,88,89,90,95,96,98,99,104,105,],[5,5,-2,-3,-4,-48,-17,-20,-21,-22,-29,34,35,-31,34,-33,-35,-43,-47,-49,-1,34,-18,-19,34,-48,-32,34,34,-36,-37,-38,-39,-40,-41,-44,-45,34,-50,-51,-5,-6,-7,-8,-9,-28,-30,34,80,85,85,-59,-34,-42,-46,-52,-53,-54,-60,-10,34,34,34,34,80,80,]),'IF':([0,1,2,3,4,5,6,9,10,11,12,20,22,23,24,25,26,27,30,31,34,41,55,56,57,58,59,61,62,63,70,72,73,74,83,86,88,89,90,95,99,],[13,13,-2,-3,-4,-48,-17,-20,-21,-22,-29,-31,-33,-35,-43,-47,-49,-1,-18,-19,-48,-32,-5,-6,-7,-8,-9,-28,-30,13,-59,-34,-42,-46,-52,-53,-54,-60,-10,13,13,]),'FOR':([0,1,2,3,4,5,6,9,10,11,12,20,22,23,24,25,26,27,30,31,34,41,55,56,57,58,59,61,62,63,70,72,73,74,83,86,88,89,90,95,99,],[14,14,-2,-3,-4,-48,-17,-20,-21,-22,-29,-31,-33,-35,-43,-47,-49,-1,-18,-19,-48,-32,-5,-6,-7,-8,-9,-28,-30,14,-59,-34,-42,-46,-52,-53,-54,-60,-10,14,14,]),'FILTER':([0,1,2,3,4,5,6,9,10,11,12,20,22,23,24,25,26,27,30,31,34,41,55,56,57,58,59,61,62,63,70,72,73,74,83,86,88,89,90,95,99,],[15,15,-2,-3,-4,-48,-17,-20,-21,-22,-29,-31,-33,-35,-43,-47,-49,-1,-18,-19,-48,-32,-5,-6,-7,-8,-9,-28,-30,15,-59,-34,-42,-46,-52,-53,-54,-60,-10,15,15,]),'MAP':([0,1,2,3,4,5,6,9,10,11,12,20,22,23,24,25,26,27,30,31,34,41,55,56,57,58,59,61,62,63,70,72,73,74,83,86,88,89,90,95,99,],[16,16,-2,-3,-4,-48,-17,-20,-21,-22,-29,-31,-33,-35,-43,-47,-49,-1,-18,-19,-48,-32,-5,-6,-7,-8,-9,-28,-30,16,-59,-34,-42,-46,-52,-53,-54,-60,-10,16,16,]),'REDUCE':([0,1,2,3,4,5,6,9,10,11,12,20,22,23,24,25,26,27,30,31,34,41,55,56,57,58,59,61,62,63,70,72,73,74,83,86,88,89,90,95,99,],[17,17,-2,-3,-4,-48,-17,-20,-21,-22,-29,-31,-33,-35,-43,-47,-49,-1,-18,-19,-48,-32,-5,-6,-7,-8,-9,-28,-30,17,-59,-34,-42,-46,-52,-53,-54,-60,-10,17,17,]),'INPUT':([0,1,2,3,4,5,6,9,10,11,12,20,22,23,24,25,26,27,30,31,34,41,55,56,57,58,59,61,62,63,70,72,73,74,83,86,88,89,90,95,99,],[18,18,-2,-3,-4,-48,-17,-20,-21,-22,-29,-31,-33,-35,-43,-47,-49,-1,-18,-19,-48,-32,-5,-6,-7,-8,-9,-28,-30,18,-59,-34,-42,-46,-52,-53,-54,-60,-10,18,18,]),'OUTPUT':([0,1,2,3,4,5,6,9,10,11,12,20,22,23,24,25,26,27,30,31,34,41,55,56,57,58,59,61,62,63,70,72,73,74,83,86,88,89,90,95,99,],[19,19,-2,-3,-4,-48,-17,-20,-21,-22,-29,-31,-33,-35,-43,-47,-49,-1,-18,-19,-48,-32,-5,-6,-7,-8,-9,-28,-30,19,-59,-34,-42,-46,-52,-53,-54,-60,-10,19,19,]),'NOT':([0,1,2,3,4,5,6,9,10,11,12,13,20,21,22,23,24,25,26,27,29,30,31,32,34,41,55,56,57,58,59,61,62,63,70,72,73,74,83,86,88,89,90,95,96,99,],[21,21,-2,-3,-4,-48,-17,-20,-21,-22,-29,21,-31,21,-33,-35,-43,-47,-49,-1,21,-18,-19,21,-48,-32,-5,-6,-7,-8,-9,-28,-30,21,-59,-34,-42,-46,-52,-53,-54,-60,-10,21,21,21,]),'NUMBER':([0,1,2,3,4,5,6,9,10,11,12,13,20,21,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,70,72,73,74,83,86,88,89,90,95,96,98,99,],[26,26,-2,-3,-4,-48,-17,-20,-21,-22,-29,26,-31,26,-33,-35,-43,-47,-49,-1,58,26,-18,-19,26,-48,58,-32,26,26,-36,-37,-38,-39,-40,-41,-44,-45,26,-50,-51,-5,-6,-7,-8,-9,76,-28,-30,26,-59,-34,-42,-46,-52,-53,-54,-60,-10,26,26,26,26,]),'$end':([1,2,3,4,5,6,9,10,11,12,20,22,23,24,25,26,27,30,31,34,41,55,56,57,58,59,61,62,70,72,73,74,83,86,88,89,90,],[0,-2,-3,-4,-48,-17,-20,-21,-22,-29,-31,-33,-35,-43,-47,-49,-1,-18,-19,-48,-32,-5,-6,-7,-8,-9,-28,-30,-59,-34,-42,-46,-52,-53,-54,-60,-10,]),'EQUALS':([5,],[28,]),'PROD':([5,24,25,26,34,73,74,],[-48,53,-47,-49,-48,53,-46,]),'DIV':([5,24,25,26,34,73,74,],[-48,54,-47,-49,-48,54,-46,]),'LE':([5,23,24,25,26,34,73,74,],[-48,44,-43,-47,-49,-48,-42,-46,]),'LT':([5,23,24,25,26,34,73,74,],[-48,45,-43,-47,-49,-48,-42,-46,]),'GT':([5,23,24,25,26,34,73,74,],[-48,46,-43,-47,-49,-48,-42,-46,]),'GE':([5,23,24,25,26,34,73,74,],[-48,47,-43,-47,-49,-48,-42,-46,]),'EQ':([5,23,24,25,26,34,73,74,],[-48,48,-43,-47,-49,-48,-42,-46,]),'NEQ':([5,23,24,25,26,34,73,74,],[-48,49,-43,-47,-49,-48,-42,-46,]),'PLUS':([5,23,24,25,26,34,72,73,74,102,],[-48,50,-43,-47,-49,-48,50,-42,-46,50,]),'MINUS':([5,23,24,25,26,34,72,73,74,102,],[-48,51,-43,-47,-49,-48,51,-42,-46,51,]),'AND':([5,12,20,22,23,24,25,26,34,41,61,62,72,73,74,],[-48,32,-31,-33,-35,-43,-47,-49,-48,-32,32,-30,-34,-42,-46,]),'OR':([5,6,12,20,22,23,24,25,26,33,34,41,61,62,72,73,74,101,],[-48,29,-29,-31,-33,-35,-43,-47,-49,29,-48,-32,-28,-30,-34,-42,-46,29,]),'ELSE':([6,9,10,11,12,20,22,23,24,25,26,30,31,34,41,61,62,70,72,73,74,79,83,86,88,89,],[-17,-20,-21,-22,-29,-31,-33,-35,-43,-47,-49,-18,-19,-48,-32,-28,-30,-59,-34,-42,-46,94,-52,-53,-54,-60,]),'SEMI':([6,7,8,9,10,11,12,20,22,23,24,25,26,30,31,34,41,61,62,70,72,73,74,79,83,86,88,89,100,103,],[-17,30,31,-20,-21,-22,-29,-31,-33,-35,-43,-47,-49,-18,-19,-48,-32,-28,-30,-59,-34,-42,-46,-26,-52,-53,-54,-60,-23,-27,]),'COL':([12,20,22,23,24,25,26,33,34,41,61,62,72,73,74,80,81,82,84,85,87,90,94,97,],[-29,-31,-33,-35,-43,-47,-49,63,-48,-32,-28,-30,-34,-42,-46,-25,95,-24,96,-56,98,-10,99,-57,]),'COMA':([12,20,22,23,24,25,26,34,41,61,62,72,73,74,101,102,],[-29,-31,-33,-35,-43,-47,-49,-48,-32,-28,-30,-34,-42,-46,104,105,]),'LPAREN':([15,16,17,18,19,],[36,37,38,39,40,]),'STRING':([28,40,60,],[57,57,77,]),'BOOLEAN':([28,40,60,],[59,59,78,]),'LSQUARE':([28,40,64,104,105,],[60,60,60,60,60,]),'IN':([35,],[64,]),'LAMBDA':([36,37,38,],[66,68,68,]),'RPAREN':([39,56,57,58,59,65,67,69,71,80,82,90,106,107,],[70,-6,-7,-8,-9,83,86,88,89,-25,-24,-10,-58,-55,]),'RSQUARE':([75,76,77,78,91,92,93,],[90,-11,-13,-15,-12,-14,-16,]),'OP_NUMBER':([76,],[91,]),'OP_STRING':([77,],[92,]),'OP_BOOLEAN':([78,],[93,]),'OP_ID':([85,],[97,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declarationList':([0,],[1,]),'declaration':([0,1,],[2,27,]),'varDeclaration':([0,1,],[3,3,]),'statement':([0,1,63,95,99,],[4,4,79,100,103,]),'expressionStmt':([0,1,13,63,95,96,99,],[6,6,33,6,6,101,6,]),'conditionalStmt':([0,1,63,95,99,],[7,7,7,7,7,]),'iterationStmt':([0,1,63,95,99,],[8,8,8,8,8,]),'functionalStmt':([0,1,63,95,99,],[9,9,9,9,9,]),'inputStmt':([0,1,63,95,99,],[10,10,10,10,10,]),'outputStmt':([0,1,63,95,99,],[11,11,11,11,11,]),'andExpression':([0,1,13,29,63,95,96,99,],[12,12,12,61,12,12,12,12,]),'unaryRelExpression':([0,1,13,21,29,32,63,95,96,99,],[20,20,20,41,20,62,20,20,20,20,]),'relExpression':([0,1,13,21,29,32,63,95,96,99,],[22,22,22,22,22,22,22,22,22,22,]),'sumExpression':([0,1,13,21,29,32,42,63,95,96,98,99,],[23,23,23,23,23,23,72,23,23,23,102,23,]),'term':([0,1,13,21,29,32,42,43,63,95,96,98,99,],[24,24,24,24,24,24,24,73,24,24,24,24,24,]),'sumElement':([0,1,13,21,29,32,42,43,52,63,95,96,98,99,],[25,25,25,25,25,25,25,25,74,25,25,25,25,25,]),'relop':([23,],[42,]),'sumop':([23,72,102,],[43,43,43,]),'mulop':([24,73,],[52,52,]),'declarationElement':([28,40,],[55,71,]),'list':([28,40,64,104,105,],[56,56,82,82,82,]),'lambdaFilter':([36,],[65,]),'lambdaStmt':([37,38,],[67,69,]),'listElements':([60,],[75,]),'iterationElement':([64,104,105,],[81,106,107,]),'lambdaElement':([66,68,],[84,87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declarationList","S'",1,None,None,None),
  ('declarationList -> declarationList declaration','declarationList',2,'p_declarationList','interpreter.py',122),
  ('declarationList -> declaration','declarationList',1,'p_declarationList','interpreter.py',123),
  ('declaration -> varDeclaration','declaration',1,'p_declaration','interpreter.py',128),
  ('declaration -> statement','declaration',1,'p_declaration','interpreter.py',129),
  ('varDeclaration -> ID EQUALS declarationElement','varDeclaration',3,'p_varDeclaration','interpreter.py',134),
  ('declarationElement -> list','declarationElement',1,'p_declarationElement','interpreter.py',139),
  ('declarationElement -> STRING','declarationElement',1,'p_declarationElement','interpreter.py',140),
  ('declarationElement -> NUMBER','declarationElement',1,'p_declarationElement','interpreter.py',141),
  ('declarationElement -> BOOLEAN','declarationElement',1,'p_declarationElement','interpreter.py',142),
  ('list -> LSQUARE listElements RSQUARE','list',3,'p_list','interpreter.py',147),
  ('listElements -> NUMBER','listElements',1,'p_listElements','interpreter.py',152),
  ('listElements -> NUMBER OP_NUMBER','listElements',2,'p_listElements','interpreter.py',153),
  ('listElements -> STRING','listElements',1,'p_listElements','interpreter.py',154),
  ('listElements -> STRING OP_STRING','listElements',2,'p_listElements','interpreter.py',155),
  ('listElements -> BOOLEAN','listElements',1,'p_listElements','interpreter.py',156),
  ('listElements -> BOOLEAN OP_BOOLEAN','listElements',2,'p_listElements','interpreter.py',157),
  ('statement -> expressionStmt','statement',1,'p_statement','interpreter.py',162),
  ('statement -> conditionalStmt SEMI','statement',2,'p_statement','interpreter.py',163),
  ('statement -> iterationStmt SEMI','statement',2,'p_statement','interpreter.py',164),
  ('statement -> functionalStmt','statement',1,'p_statement','interpreter.py',165),
  ('statement -> inputStmt','statement',1,'p_statement','interpreter.py',166),
  ('statement -> outputStmt','statement',1,'p_statement','interpreter.py',167),
  ('iterationStmt -> FOR ID IN iterationElement COL statement','iterationStmt',6,'p_iterationStmt','interpreter.py',172),
  ('iterationElement -> list','iterationElement',1,'p_iterationElement','interpreter.py',177),
  ('iterationElement -> ID','iterationElement',1,'p_iterationElement','interpreter.py',178),
  ('conditionalStmt -> IF expressionStmt COL statement','conditionalStmt',4,'p_conditionalStmt','interpreter.py',183),
  ('conditionalStmt -> IF expressionStmt COL statement ELSE COL statement','conditionalStmt',7,'p_conditionalStmt','interpreter.py',184),
  ('expressionStmt -> expressionStmt OR andExpression','expressionStmt',3,'p_expressionStmt','interpreter.py',189),
  ('expressionStmt -> andExpression','expressionStmt',1,'p_expressionStmt','interpreter.py',190),
  ('andExpression -> andExpression AND unaryRelExpression','andExpression',3,'p_andExpression','interpreter.py',195),
  ('andExpression -> unaryRelExpression','andExpression',1,'p_andExpression','interpreter.py',196),
  ('unaryRelExpression -> NOT unaryRelExpression','unaryRelExpression',2,'p_unaryRelExpression','interpreter.py',201),
  ('unaryRelExpression -> relExpression','unaryRelExpression',1,'p_unaryRelExpression','interpreter.py',202),
  ('relExpression -> sumExpression relop sumExpression','relExpression',3,'p_relExpression','interpreter.py',207),
  ('relExpression -> sumExpression','relExpression',1,'p_relExpression','interpreter.py',208),
  ('relop -> LE','relop',1,'p_relop','interpreter.py',213),
  ('relop -> LT','relop',1,'p_relop','interpreter.py',214),
  ('relop -> GT','relop',1,'p_relop','interpreter.py',215),
  ('relop -> GE','relop',1,'p_relop','interpreter.py',216),
  ('relop -> EQ','relop',1,'p_relop','interpreter.py',217),
  ('relop -> NEQ','relop',1,'p_relop','interpreter.py',218),
  ('sumExpression -> sumExpression sumop term','sumExpression',3,'p_sumExpression','interpreter.py',223),
  ('sumExpression -> term','sumExpression',1,'p_sumExpression','interpreter.py',224),
  ('sumop -> PLUS','sumop',1,'p_sumop','interpreter.py',229),
  ('sumop -> MINUS','sumop',1,'p_sumop','interpreter.py',230),
  ('term -> term mulop sumElement','term',3,'p_term','interpreter.py',235),
  ('term -> sumElement','term',1,'p_term','interpreter.py',236),
  ('sumElement -> ID','sumElement',1,'p_sumElement','interpreter.py',241),
  ('sumElement -> NUMBER','sumElement',1,'p_sumElement','interpreter.py',242),
  ('mulop -> PROD','mulop',1,'p_mulop','interpreter.py',247),
  ('mulop -> DIV','mulop',1,'p_mulop','interpreter.py',248),
  ('functionalStmt -> FILTER LPAREN lambdaFilter RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',253),
  ('functionalStmt -> MAP LPAREN lambdaStmt RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',254),
  ('functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',255),
  ('lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA iterationElement','lambdaStmt',6,'p_lambdaStmt','interpreter.py',260),
  ('lambdaElement -> ID','lambdaElement',1,'p_lambdaElement','interpreter.py',264),
  ('lambdaElement -> ID OP_ID','lambdaElement',2,'p_lambdaElement','interpreter.py',265),
  ('lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA iterationElement','lambdaFilter',6,'p_lambdaFilter','interpreter.py',270),
  ('inputStmt -> INPUT LPAREN RPAREN','inputStmt',3,'p_inputStmt','interpreter.py',275),
  ('outputStmt -> OUTPUT LPAREN declarationElement RPAREN','outputStmt',4,'p_outputStmt','interpreter.py',280),
]
