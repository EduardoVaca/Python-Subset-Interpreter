
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMENT STRING OP_STRING OP_NUMBER BOOLEAN OP_BOOLEAN EQ NEQ GT GE LT LE PLUS MINUS PROD DIV EQUALS LPAREN RPAREN LSQUARE RSQUARE COMA ID OP_ID NUMBER COL SEMI IF ELSE FOR IN AND OR NOT LAMBDA MAP REDUCE FILTER INPUT OUTPUTdeclarationList  : declaration declarationList\n                        | declarationdeclaration  : varDeclaration SEMI\n                    | statementvarDeclaration   : ID EQUALS declarationElementdeclarationElement   : list\n                            | sumExpression\n                            | STRING                        \n                            | BOOLEAN\n                            | inputStmt\n                            | functionalStmtlist   : LSQUARE listElements RSQUARElistElements : NUMBER\n                    | NUMBER OP_NUMBER\n                    | STRING\n                    | STRING OP_STRING\n                    | BOOLEAN\n                    | BOOLEAN OP_BOOLEANstatement    : expressionStmt SEMI\n                    | conditionalStmt\n                    | iterationStmt\n                    | functionalStmt SEMI\n                    | inputStmt SEMI\n                    | outputStmt SEMI\n                    | commentStmtiterationStmt    : FOR ID IN iterationElement COL declarationListiterationElement : list\n                        | IDconditionalStmt  : IF expressionStmt COL declarationList\n                        | IF expressionStmt COL declarationList ELSE COL declarationListexpressionStmt   : expressionStmt OR andExpression\n                        | andExpressionandExpression    : andExpression AND unaryRelExpression\n                        | unaryRelExpressionunaryRelExpression   : NOT unaryRelExpression\n                            | relExpressionrelExpression    : sumExpression relop sumExpression\n                        | sumExpressionrelop    : LE\n                | LT\n                | GT\n                | GE\n                | EQ\n                | NEQsumExpression    : sumExpression sumop term\n                        | termsumop    : PLUS\n                | MINUSterm : term mulop sumElement\n            | sumElementsumElement   : ID\n                    | NUMBERmulop    : PROD\n                | DIVfunctionalStmt   : FILTER LPAREN lambdaFilter RPAREN\n                        | MAP LPAREN lambdaStmt RPAREN\n                        | REDUCE LPAREN lambdaStmt RPARENlambdaStmt   : LAMBDA lambdaElement COL sumExpression COMA iterationElementlambdaElement    : ID\n                        | ID OP_IDlambdaFilter : LAMBDA lambdaElement COL expressionStmt COMA iterationElementinputStmt  : INPUT LPAREN RPARENoutputStmt : OUTPUT LPAREN declarationElement RPARENcommentStmt    : COMMENT'
    
_lr_action_items = {'ID':([0,2,4,7,8,12,14,15,21,23,29,30,31,32,33,34,35,36,37,45,47,48,49,50,51,52,53,54,55,56,57,58,59,70,71,73,75,86,102,103,105,106,107,110,111,112,],[5,5,-4,-20,-21,-25,39,40,-64,39,-1,-3,39,-19,39,-22,-23,-24,39,39,39,39,-39,-40,-41,-42,-43,-44,-47,-48,39,-53,-54,5,87,92,92,-29,5,39,39,5,-26,-30,87,87,]),'IF':([0,2,4,7,8,12,21,29,30,32,34,35,36,70,86,102,106,107,110,],[14,14,-4,-20,-21,-25,-64,-1,-3,-19,-22,-23,-24,14,-29,14,14,-26,-30,]),'FOR':([0,2,4,7,8,12,21,29,30,32,34,35,36,70,86,102,106,107,110,],[15,15,-4,-20,-21,-25,-64,-1,-3,-19,-22,-23,-24,15,-29,15,15,-26,-30,]),'FILTER':([0,2,4,7,8,12,21,29,30,31,32,34,35,36,45,70,86,102,106,107,110,],[16,16,-4,-20,-21,-25,-64,-1,-3,16,-19,-22,-23,-24,16,16,-29,16,16,-26,-30,]),'MAP':([0,2,4,7,8,12,21,29,30,31,32,34,35,36,45,70,86,102,106,107,110,],[17,17,-4,-20,-21,-25,-64,-1,-3,17,-19,-22,-23,-24,17,17,-29,17,17,-26,-30,]),'REDUCE':([0,2,4,7,8,12,21,29,30,31,32,34,35,36,45,70,86,102,106,107,110,],[18,18,-4,-20,-21,-25,-64,-1,-3,18,-19,-22,-23,-24,18,18,-29,18,18,-26,-30,]),'INPUT':([0,2,4,7,8,12,21,29,30,31,32,34,35,36,45,70,86,102,106,107,110,],[19,19,-4,-20,-21,-25,-64,-1,-3,19,-19,-22,-23,-24,19,19,-29,19,19,-26,-30,]),'OUTPUT':([0,2,4,7,8,12,21,29,30,32,34,35,36,70,86,102,106,107,110,],[20,20,-4,-20,-21,-25,-64,-1,-3,-19,-22,-23,-24,20,-29,20,20,-26,-30,]),'COMMENT':([0,2,4,7,8,12,21,29,30,32,34,35,36,70,86,102,106,107,110,],[21,21,-4,-20,-21,-25,-64,-1,-3,-19,-22,-23,-24,21,-29,21,21,-26,-30,]),'NOT':([0,2,4,7,8,12,14,21,23,29,30,32,33,34,35,36,37,70,86,102,103,106,107,110,],[23,23,-4,-20,-21,-25,23,-64,23,-1,-3,-19,23,-22,-23,-24,23,23,-29,23,23,23,-26,-30,]),'NUMBER':([0,2,4,7,8,12,14,21,23,29,30,31,32,33,34,35,36,37,45,47,48,49,50,51,52,53,54,55,56,57,58,59,67,70,86,102,103,105,106,107,110,],[28,28,-4,-20,-21,-25,28,-64,28,-1,-3,28,-19,28,-22,-23,-24,28,28,28,28,-39,-40,-41,-42,-43,-44,-47,-48,28,-53,-54,83,28,-29,28,28,28,28,-26,-30,]),'$end':([1,2,4,7,8,12,21,29,30,32,34,35,36,86,107,110,],[0,-2,-4,-20,-21,-25,-64,-1,-3,-19,-22,-23,-24,-29,-26,-30,]),'ELSE':([2,4,7,8,12,21,29,30,32,34,35,36,86,107,110,],[-2,-4,-20,-21,-25,-64,-1,-3,-19,-22,-23,-24,101,-26,-30,]),'SEMI':([3,5,6,9,10,11,13,22,24,25,26,27,28,39,46,60,61,62,63,64,65,66,68,69,77,79,80,81,90,93,95,96,97,],[30,-51,32,34,35,36,-32,-34,-36,-38,-46,-50,-52,-51,-35,-5,-6,-7,-8,-9,-10,-11,-31,-33,-62,-37,-45,-49,-55,-56,-57,-63,-12,]),'EQUALS':([5,],[31,]),'PROD':([5,26,27,28,39,80,81,],[-51,58,-50,-52,-51,58,-49,]),'DIV':([5,26,27,28,39,80,81,],[-51,59,-50,-52,-51,59,-49,]),'LE':([5,25,26,27,28,39,80,81,],[-51,49,-46,-50,-52,-51,-45,-49,]),'LT':([5,25,26,27,28,39,80,81,],[-51,50,-46,-50,-52,-51,-45,-49,]),'GT':([5,25,26,27,28,39,80,81,],[-51,51,-46,-50,-52,-51,-45,-49,]),'GE':([5,25,26,27,28,39,80,81,],[-51,52,-46,-50,-52,-51,-45,-49,]),'EQ':([5,25,26,27,28,39,80,81,],[-51,53,-46,-50,-52,-51,-45,-49,]),'NEQ':([5,25,26,27,28,39,80,81,],[-51,54,-46,-50,-52,-51,-45,-49,]),'PLUS':([5,25,26,27,28,39,62,79,80,81,109,],[-51,55,-46,-50,-52,-51,55,55,-45,-49,55,]),'MINUS':([5,25,26,27,28,39,62,79,80,81,109,],[-51,56,-46,-50,-52,-51,56,56,-45,-49,56,]),'AND':([5,13,22,24,25,26,27,28,39,46,68,69,79,80,81,],[-51,37,-34,-36,-38,-46,-50,-52,-51,-35,37,-33,-37,-45,-49,]),'OR':([5,6,13,22,24,25,26,27,28,38,39,46,68,69,79,80,81,108,],[-51,33,-32,-34,-36,-38,-46,-50,-52,33,-51,-35,-31,-33,-37,-45,-49,33,]),'COL':([13,22,24,25,26,27,28,38,39,46,68,69,79,80,81,87,88,89,91,92,94,97,101,104,],[-32,-34,-36,-38,-46,-50,-52,70,-51,-35,-31,-33,-37,-45,-49,-28,102,-27,103,-59,105,-12,106,-60,]),'COMA':([13,22,24,25,26,27,28,39,46,68,69,79,80,81,108,109,],[-32,-34,-36,-38,-46,-50,-52,-51,-35,-31,-33,-37,-45,-49,111,112,]),'LPAREN':([16,17,18,19,20,],[41,42,43,44,45,]),'RPAREN':([26,27,28,39,44,61,62,63,64,65,66,72,74,76,77,78,80,81,87,89,90,93,95,97,113,114,],[-46,-50,-52,-51,77,-6,-7,-8,-9,-10,-11,90,93,95,-62,96,-45,-49,-28,-27,-55,-56,-57,-12,-61,-58,]),'STRING':([31,45,67,],[63,63,84,]),'BOOLEAN':([31,45,67,],[64,64,85,]),'LSQUARE':([31,45,71,111,112,],[67,67,67,67,67,]),'IN':([40,],[71,]),'LAMBDA':([41,42,43,],[73,75,75,]),'RSQUARE':([82,83,84,85,98,99,100,],[97,-13,-15,-17,-14,-16,-18,]),'OP_NUMBER':([83,],[98,]),'OP_STRING':([84,],[99,]),'OP_BOOLEAN':([85,],[100,]),'OP_ID':([92,],[104,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declarationList':([0,2,70,102,106,],[1,29,86,107,110,]),'declaration':([0,2,70,102,106,],[2,2,2,2,2,]),'varDeclaration':([0,2,70,102,106,],[3,3,3,3,3,]),'statement':([0,2,70,102,106,],[4,4,4,4,4,]),'expressionStmt':([0,2,14,70,102,103,106,],[6,6,38,6,6,108,6,]),'conditionalStmt':([0,2,70,102,106,],[7,7,7,7,7,]),'iterationStmt':([0,2,70,102,106,],[8,8,8,8,8,]),'functionalStmt':([0,2,31,45,70,102,106,],[9,9,66,66,9,9,9,]),'inputStmt':([0,2,31,45,70,102,106,],[10,10,65,65,10,10,10,]),'outputStmt':([0,2,70,102,106,],[11,11,11,11,11,]),'commentStmt':([0,2,70,102,106,],[12,12,12,12,12,]),'andExpression':([0,2,14,33,70,102,103,106,],[13,13,13,68,13,13,13,13,]),'unaryRelExpression':([0,2,14,23,33,37,70,102,103,106,],[22,22,22,46,22,69,22,22,22,22,]),'relExpression':([0,2,14,23,33,37,70,102,103,106,],[24,24,24,24,24,24,24,24,24,24,]),'sumExpression':([0,2,14,23,31,33,37,45,47,70,102,103,105,106,],[25,25,25,25,62,25,25,62,79,25,25,25,109,25,]),'term':([0,2,14,23,31,33,37,45,47,48,70,102,103,105,106,],[26,26,26,26,26,26,26,26,26,80,26,26,26,26,26,]),'sumElement':([0,2,14,23,31,33,37,45,47,48,57,70,102,103,105,106,],[27,27,27,27,27,27,27,27,27,27,81,27,27,27,27,27,]),'relop':([25,],[47,]),'sumop':([25,62,79,109,],[48,48,48,48,]),'mulop':([26,80,],[57,57,]),'declarationElement':([31,45,],[60,78,]),'list':([31,45,71,111,112,],[61,61,89,89,89,]),'lambdaFilter':([41,],[72,]),'lambdaStmt':([42,43,],[74,76,]),'listElements':([67,],[82,]),'iterationElement':([71,111,112,],[88,113,114,]),'lambdaElement':([73,75,],[91,94,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declarationList","S'",1,None,None,None),
  ('declarationList -> declaration declarationList','declarationList',2,'p_declarationList','interpreter.py',163),
  ('declarationList -> declaration','declarationList',1,'p_declarationList','interpreter.py',164),
  ('declaration -> varDeclaration SEMI','declaration',2,'p_declaration','interpreter.py',169),
  ('declaration -> statement','declaration',1,'p_declaration','interpreter.py',170),
  ('varDeclaration -> ID EQUALS declarationElement','varDeclaration',3,'p_varDeclaration','interpreter.py',175),
  ('declarationElement -> list','declarationElement',1,'p_declarationElement','interpreter.py',180),
  ('declarationElement -> sumExpression','declarationElement',1,'p_declarationElement','interpreter.py',181),
  ('declarationElement -> STRING','declarationElement',1,'p_declarationElement','interpreter.py',182),
  ('declarationElement -> BOOLEAN','declarationElement',1,'p_declarationElement','interpreter.py',183),
  ('declarationElement -> inputStmt','declarationElement',1,'p_declarationElement','interpreter.py',184),
  ('declarationElement -> functionalStmt','declarationElement',1,'p_declarationElement','interpreter.py',185),
  ('list -> LSQUARE listElements RSQUARE','list',3,'p_list','interpreter.py',190),
  ('listElements -> NUMBER','listElements',1,'p_listElements','interpreter.py',195),
  ('listElements -> NUMBER OP_NUMBER','listElements',2,'p_listElements','interpreter.py',196),
  ('listElements -> STRING','listElements',1,'p_listElements','interpreter.py',197),
  ('listElements -> STRING OP_STRING','listElements',2,'p_listElements','interpreter.py',198),
  ('listElements -> BOOLEAN','listElements',1,'p_listElements','interpreter.py',199),
  ('listElements -> BOOLEAN OP_BOOLEAN','listElements',2,'p_listElements','interpreter.py',200),
  ('statement -> expressionStmt SEMI','statement',2,'p_statement','interpreter.py',217),
  ('statement -> conditionalStmt','statement',1,'p_statement','interpreter.py',218),
  ('statement -> iterationStmt','statement',1,'p_statement','interpreter.py',219),
  ('statement -> functionalStmt SEMI','statement',2,'p_statement','interpreter.py',220),
  ('statement -> inputStmt SEMI','statement',2,'p_statement','interpreter.py',221),
  ('statement -> outputStmt SEMI','statement',2,'p_statement','interpreter.py',222),
  ('statement -> commentStmt','statement',1,'p_statement','interpreter.py',223),
  ('iterationStmt -> FOR ID IN iterationElement COL declarationList','iterationStmt',6,'p_iterationStmt','interpreter.py',228),
  ('iterationElement -> list','iterationElement',1,'p_iterationElement','interpreter.py',233),
  ('iterationElement -> ID','iterationElement',1,'p_iterationElement','interpreter.py',234),
  ('conditionalStmt -> IF expressionStmt COL declarationList','conditionalStmt',4,'p_conditionalStmt','interpreter.py',239),
  ('conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList','conditionalStmt',7,'p_conditionalStmt','interpreter.py',240),
  ('expressionStmt -> expressionStmt OR andExpression','expressionStmt',3,'p_expressionStmt','interpreter.py',245),
  ('expressionStmt -> andExpression','expressionStmt',1,'p_expressionStmt','interpreter.py',246),
  ('andExpression -> andExpression AND unaryRelExpression','andExpression',3,'p_andExpression','interpreter.py',251),
  ('andExpression -> unaryRelExpression','andExpression',1,'p_andExpression','interpreter.py',252),
  ('unaryRelExpression -> NOT unaryRelExpression','unaryRelExpression',2,'p_unaryRelExpression','interpreter.py',257),
  ('unaryRelExpression -> relExpression','unaryRelExpression',1,'p_unaryRelExpression','interpreter.py',258),
  ('relExpression -> sumExpression relop sumExpression','relExpression',3,'p_relExpression','interpreter.py',263),
  ('relExpression -> sumExpression','relExpression',1,'p_relExpression','interpreter.py',264),
  ('relop -> LE','relop',1,'p_relop','interpreter.py',277),
  ('relop -> LT','relop',1,'p_relop','interpreter.py',278),
  ('relop -> GT','relop',1,'p_relop','interpreter.py',279),
  ('relop -> GE','relop',1,'p_relop','interpreter.py',280),
  ('relop -> EQ','relop',1,'p_relop','interpreter.py',281),
  ('relop -> NEQ','relop',1,'p_relop','interpreter.py',282),
  ('sumExpression -> sumExpression sumop term','sumExpression',3,'p_sumExpression','interpreter.py',287),
  ('sumExpression -> term','sumExpression',1,'p_sumExpression','interpreter.py',288),
  ('sumop -> PLUS','sumop',1,'p_sumop','interpreter.py',302),
  ('sumop -> MINUS','sumop',1,'p_sumop','interpreter.py',303),
  ('term -> term mulop sumElement','term',3,'p_term','interpreter.py',308),
  ('term -> sumElement','term',1,'p_term','interpreter.py',309),
  ('sumElement -> ID','sumElement',1,'p_sumElement','interpreter.py',318),
  ('sumElement -> NUMBER','sumElement',1,'p_sumElement','interpreter.py',319),
  ('mulop -> PROD','mulop',1,'p_mulop','interpreter.py',332),
  ('mulop -> DIV','mulop',1,'p_mulop','interpreter.py',333),
  ('functionalStmt -> FILTER LPAREN lambdaFilter RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',338),
  ('functionalStmt -> MAP LPAREN lambdaStmt RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',339),
  ('functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',340),
  ('lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA iterationElement','lambdaStmt',6,'p_lambdaStmt','interpreter.py',345),
  ('lambdaElement -> ID','lambdaElement',1,'p_lambdaElement','interpreter.py',352),
  ('lambdaElement -> ID OP_ID','lambdaElement',2,'p_lambdaElement','interpreter.py',353),
  ('lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA iterationElement','lambdaFilter',6,'p_lambdaFilter','interpreter.py',359),
  ('inputStmt -> INPUT LPAREN RPAREN','inputStmt',3,'p_inputStmt','interpreter.py',364),
  ('outputStmt -> OUTPUT LPAREN declarationElement RPAREN','outputStmt',4,'p_outputStmt','interpreter.py',369),
  ('commentStmt -> COMMENT','commentStmt',1,'p_commentStmt','interpreter.py',373),
]
