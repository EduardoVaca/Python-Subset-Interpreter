
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMENT STRING OP_STRING OP_NUMBER BOOLEAN OP_BOOLEAN EQ NEQ GT GE LT LE PLUS MINUS PROD DIV EQUALS LPAREN RPAREN LSQUARE RSQUARE COMA ID OP_ID NUMBER COL SEMI IF ELSE FOR IN AND OR NOT LAMBDA MAP REDUCE FILTER INPUT OUTPUTdeclarationList  : declaration declarationList\n                        | declarationdeclaration  : varDeclaration SEMI\n                    | statementvarDeclaration   : ID EQUALS declarationElementdeclarationElement   : list\n                            | sumExpression\n                            | STRING                        \n                            | BOOLEANlist   : LSQUARE listElements RSQUARElistElements : NUMBER\n                    | NUMBER OP_NUMBER\n                    | STRING\n                    | STRING OP_STRING\n                    | BOOLEAN\n                    | BOOLEAN OP_BOOLEANstatement    : expressionStmt SEMI\n                    | conditionalStmt\n                    | iterationStmt\n                    | functionalStmt SEMI\n                    | inputStmt SEMI\n                    | outputStmt SEMI\n                    | commentStmtiterationStmt    : FOR ID IN iterationElement COL declarationListiterationElement : list\n                        | IDconditionalStmt  : IF expressionStmt COL declarationList\n                        | IF expressionStmt COL declarationList ELSE COL declarationListexpressionStmt   : expressionStmt OR andExpression\n                        | andExpressionandExpression    : andExpression AND unaryRelExpression\n                        | unaryRelExpressionunaryRelExpression   : NOT unaryRelExpression\n                            | relExpressionrelExpression    : sumExpression relop sumExpression\n                        | sumExpressionrelop    : LE\n                | LT\n                | GT\n                | GE\n                | EQ\n                | NEQsumExpression    : sumExpression sumop term\n                        | termsumop    : PLUS\n                | MINUSterm : term mulop sumElement\n            | sumElementsumElement   : ID\n                    | NUMBERmulop    : PROD\n                | DIVfunctionalStmt   : FILTER LPAREN lambdaFilter RPAREN\n                        | MAP LPAREN lambdaStmt RPAREN\n                        | REDUCE LPAREN lambdaStmt RPARENlambdaStmt   : LAMBDA lambdaElement COL sumExpression COMA iterationElementlambdaElement    : ID\n                        | ID OP_IDlambdaFilter : LAMBDA lambdaElement COL expressionStmt COMA iterationElementinputStmt  : INPUT LPAREN RPARENoutputStmt : OUTPUT LPAREN declarationElement RPARENcommentStmt    : COMMENT'
    
_lr_action_items = {'ID':([0,2,4,7,8,12,14,15,21,23,29,30,31,32,33,34,35,36,37,45,47,48,49,50,51,52,53,54,55,56,57,58,59,68,69,71,73,84,100,101,103,104,105,108,109,110,],[5,5,-4,-18,-19,-23,39,40,-62,39,-1,-3,39,-17,39,-20,-21,-22,39,39,39,39,-37,-38,-39,-40,-41,-42,-45,-46,39,-51,-52,5,85,90,90,-27,5,39,39,5,-24,-28,85,85,]),'IF':([0,2,4,7,8,12,21,29,30,32,34,35,36,68,84,100,104,105,108,],[14,14,-4,-18,-19,-23,-62,-1,-3,-17,-20,-21,-22,14,-27,14,14,-24,-28,]),'FOR':([0,2,4,7,8,12,21,29,30,32,34,35,36,68,84,100,104,105,108,],[15,15,-4,-18,-19,-23,-62,-1,-3,-17,-20,-21,-22,15,-27,15,15,-24,-28,]),'FILTER':([0,2,4,7,8,12,21,29,30,32,34,35,36,68,84,100,104,105,108,],[16,16,-4,-18,-19,-23,-62,-1,-3,-17,-20,-21,-22,16,-27,16,16,-24,-28,]),'MAP':([0,2,4,7,8,12,21,29,30,32,34,35,36,68,84,100,104,105,108,],[17,17,-4,-18,-19,-23,-62,-1,-3,-17,-20,-21,-22,17,-27,17,17,-24,-28,]),'REDUCE':([0,2,4,7,8,12,21,29,30,32,34,35,36,68,84,100,104,105,108,],[18,18,-4,-18,-19,-23,-62,-1,-3,-17,-20,-21,-22,18,-27,18,18,-24,-28,]),'INPUT':([0,2,4,7,8,12,21,29,30,32,34,35,36,68,84,100,104,105,108,],[19,19,-4,-18,-19,-23,-62,-1,-3,-17,-20,-21,-22,19,-27,19,19,-24,-28,]),'OUTPUT':([0,2,4,7,8,12,21,29,30,32,34,35,36,68,84,100,104,105,108,],[20,20,-4,-18,-19,-23,-62,-1,-3,-17,-20,-21,-22,20,-27,20,20,-24,-28,]),'COMMENT':([0,2,4,7,8,12,21,29,30,32,34,35,36,68,84,100,104,105,108,],[21,21,-4,-18,-19,-23,-62,-1,-3,-17,-20,-21,-22,21,-27,21,21,-24,-28,]),'NOT':([0,2,4,7,8,12,14,21,23,29,30,32,33,34,35,36,37,68,84,100,101,104,105,108,],[23,23,-4,-18,-19,-23,23,-62,23,-1,-3,-17,23,-20,-21,-22,23,23,-27,23,23,23,-24,-28,]),'NUMBER':([0,2,4,7,8,12,14,21,23,29,30,31,32,33,34,35,36,37,45,47,48,49,50,51,52,53,54,55,56,57,58,59,65,68,84,100,101,103,104,105,108,],[28,28,-4,-18,-19,-23,28,-62,28,-1,-3,28,-17,28,-20,-21,-22,28,28,28,28,-37,-38,-39,-40,-41,-42,-45,-46,28,-51,-52,81,28,-27,28,28,28,28,-24,-28,]),'$end':([1,2,4,7,8,12,21,29,30,32,34,35,36,84,105,108,],[0,-2,-4,-18,-19,-23,-62,-1,-3,-17,-20,-21,-22,-27,-24,-28,]),'ELSE':([2,4,7,8,12,21,29,30,32,34,35,36,84,105,108,],[-2,-4,-18,-19,-23,-62,-1,-3,-17,-20,-21,-22,99,-24,-28,]),'SEMI':([3,5,6,9,10,11,13,22,24,25,26,27,28,39,46,60,61,62,63,64,66,67,75,77,78,79,88,91,93,94,95,],[30,-49,32,34,35,36,-30,-32,-34,-36,-44,-48,-50,-49,-33,-5,-6,-7,-8,-9,-29,-31,-60,-35,-43,-47,-53,-54,-55,-61,-10,]),'EQUALS':([5,],[31,]),'PROD':([5,26,27,28,39,78,79,],[-49,58,-48,-50,-49,58,-47,]),'DIV':([5,26,27,28,39,78,79,],[-49,59,-48,-50,-49,59,-47,]),'LE':([5,25,26,27,28,39,78,79,],[-49,49,-44,-48,-50,-49,-43,-47,]),'LT':([5,25,26,27,28,39,78,79,],[-49,50,-44,-48,-50,-49,-43,-47,]),'GT':([5,25,26,27,28,39,78,79,],[-49,51,-44,-48,-50,-49,-43,-47,]),'GE':([5,25,26,27,28,39,78,79,],[-49,52,-44,-48,-50,-49,-43,-47,]),'EQ':([5,25,26,27,28,39,78,79,],[-49,53,-44,-48,-50,-49,-43,-47,]),'NEQ':([5,25,26,27,28,39,78,79,],[-49,54,-44,-48,-50,-49,-43,-47,]),'PLUS':([5,25,26,27,28,39,62,77,78,79,107,],[-49,55,-44,-48,-50,-49,55,55,-43,-47,55,]),'MINUS':([5,25,26,27,28,39,62,77,78,79,107,],[-49,56,-44,-48,-50,-49,56,56,-43,-47,56,]),'AND':([5,13,22,24,25,26,27,28,39,46,66,67,77,78,79,],[-49,37,-32,-34,-36,-44,-48,-50,-49,-33,37,-31,-35,-43,-47,]),'OR':([5,6,13,22,24,25,26,27,28,38,39,46,66,67,77,78,79,106,],[-49,33,-30,-32,-34,-36,-44,-48,-50,33,-49,-33,-29,-31,-35,-43,-47,33,]),'COL':([13,22,24,25,26,27,28,38,39,46,66,67,77,78,79,85,86,87,89,90,92,95,99,102,],[-30,-32,-34,-36,-44,-48,-50,68,-49,-33,-29,-31,-35,-43,-47,-26,100,-25,101,-57,103,-10,104,-58,]),'COMA':([13,22,24,25,26,27,28,39,46,66,67,77,78,79,106,107,],[-30,-32,-34,-36,-44,-48,-50,-49,-33,-29,-31,-35,-43,-47,109,110,]),'LPAREN':([16,17,18,19,20,],[41,42,43,44,45,]),'RPAREN':([26,27,28,39,44,61,62,63,64,70,72,74,76,78,79,85,87,95,111,112,],[-44,-48,-50,-49,75,-6,-7,-8,-9,88,91,93,94,-43,-47,-26,-25,-10,-59,-56,]),'STRING':([31,45,65,],[63,63,82,]),'BOOLEAN':([31,45,65,],[64,64,83,]),'LSQUARE':([31,45,69,109,110,],[65,65,65,65,65,]),'IN':([40,],[69,]),'LAMBDA':([41,42,43,],[71,73,73,]),'RSQUARE':([80,81,82,83,96,97,98,],[95,-11,-13,-15,-12,-14,-16,]),'OP_NUMBER':([81,],[96,]),'OP_STRING':([82,],[97,]),'OP_BOOLEAN':([83,],[98,]),'OP_ID':([90,],[102,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declarationList':([0,2,68,100,104,],[1,29,84,105,108,]),'declaration':([0,2,68,100,104,],[2,2,2,2,2,]),'varDeclaration':([0,2,68,100,104,],[3,3,3,3,3,]),'statement':([0,2,68,100,104,],[4,4,4,4,4,]),'expressionStmt':([0,2,14,68,100,101,104,],[6,6,38,6,6,106,6,]),'conditionalStmt':([0,2,68,100,104,],[7,7,7,7,7,]),'iterationStmt':([0,2,68,100,104,],[8,8,8,8,8,]),'functionalStmt':([0,2,68,100,104,],[9,9,9,9,9,]),'inputStmt':([0,2,68,100,104,],[10,10,10,10,10,]),'outputStmt':([0,2,68,100,104,],[11,11,11,11,11,]),'commentStmt':([0,2,68,100,104,],[12,12,12,12,12,]),'andExpression':([0,2,14,33,68,100,101,104,],[13,13,13,66,13,13,13,13,]),'unaryRelExpression':([0,2,14,23,33,37,68,100,101,104,],[22,22,22,46,22,67,22,22,22,22,]),'relExpression':([0,2,14,23,33,37,68,100,101,104,],[24,24,24,24,24,24,24,24,24,24,]),'sumExpression':([0,2,14,23,31,33,37,45,47,68,100,101,103,104,],[25,25,25,25,62,25,25,62,77,25,25,25,107,25,]),'term':([0,2,14,23,31,33,37,45,47,48,68,100,101,103,104,],[26,26,26,26,26,26,26,26,26,78,26,26,26,26,26,]),'sumElement':([0,2,14,23,31,33,37,45,47,48,57,68,100,101,103,104,],[27,27,27,27,27,27,27,27,27,27,79,27,27,27,27,27,]),'relop':([25,],[47,]),'sumop':([25,62,77,107,],[48,48,48,48,]),'mulop':([26,78,],[57,57,]),'declarationElement':([31,45,],[60,76,]),'list':([31,45,69,109,110,],[61,61,87,87,87,]),'lambdaFilter':([41,],[70,]),'lambdaStmt':([42,43,],[72,74,]),'listElements':([65,],[80,]),'iterationElement':([69,109,110,],[86,111,112,]),'lambdaElement':([71,73,],[89,92,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declarationList","S'",1,None,None,None),
  ('declarationList -> declaration declarationList','declarationList',2,'p_declarationList','interpreter.py',122),
  ('declarationList -> declaration','declarationList',1,'p_declarationList','interpreter.py',123),
  ('declaration -> varDeclaration SEMI','declaration',2,'p_declaration','interpreter.py',128),
  ('declaration -> statement','declaration',1,'p_declaration','interpreter.py',129),
  ('varDeclaration -> ID EQUALS declarationElement','varDeclaration',3,'p_varDeclaration','interpreter.py',134),
  ('declarationElement -> list','declarationElement',1,'p_declarationElement','interpreter.py',139),
  ('declarationElement -> sumExpression','declarationElement',1,'p_declarationElement','interpreter.py',140),
  ('declarationElement -> STRING','declarationElement',1,'p_declarationElement','interpreter.py',141),
  ('declarationElement -> BOOLEAN','declarationElement',1,'p_declarationElement','interpreter.py',142),
  ('list -> LSQUARE listElements RSQUARE','list',3,'p_list','interpreter.py',147),
  ('listElements -> NUMBER','listElements',1,'p_listElements','interpreter.py',152),
  ('listElements -> NUMBER OP_NUMBER','listElements',2,'p_listElements','interpreter.py',153),
  ('listElements -> STRING','listElements',1,'p_listElements','interpreter.py',154),
  ('listElements -> STRING OP_STRING','listElements',2,'p_listElements','interpreter.py',155),
  ('listElements -> BOOLEAN','listElements',1,'p_listElements','interpreter.py',156),
  ('listElements -> BOOLEAN OP_BOOLEAN','listElements',2,'p_listElements','interpreter.py',157),
  ('statement -> expressionStmt SEMI','statement',2,'p_statement','interpreter.py',162),
  ('statement -> conditionalStmt','statement',1,'p_statement','interpreter.py',163),
  ('statement -> iterationStmt','statement',1,'p_statement','interpreter.py',164),
  ('statement -> functionalStmt SEMI','statement',2,'p_statement','interpreter.py',165),
  ('statement -> inputStmt SEMI','statement',2,'p_statement','interpreter.py',166),
  ('statement -> outputStmt SEMI','statement',2,'p_statement','interpreter.py',167),
  ('statement -> commentStmt','statement',1,'p_statement','interpreter.py',168),
  ('iterationStmt -> FOR ID IN iterationElement COL declarationList','iterationStmt',6,'p_iterationStmt','interpreter.py',173),
  ('iterationElement -> list','iterationElement',1,'p_iterationElement','interpreter.py',178),
  ('iterationElement -> ID','iterationElement',1,'p_iterationElement','interpreter.py',179),
  ('conditionalStmt -> IF expressionStmt COL declarationList','conditionalStmt',4,'p_conditionalStmt','interpreter.py',184),
  ('conditionalStmt -> IF expressionStmt COL declarationList ELSE COL declarationList','conditionalStmt',7,'p_conditionalStmt','interpreter.py',185),
  ('expressionStmt -> expressionStmt OR andExpression','expressionStmt',3,'p_expressionStmt','interpreter.py',190),
  ('expressionStmt -> andExpression','expressionStmt',1,'p_expressionStmt','interpreter.py',191),
  ('andExpression -> andExpression AND unaryRelExpression','andExpression',3,'p_andExpression','interpreter.py',196),
  ('andExpression -> unaryRelExpression','andExpression',1,'p_andExpression','interpreter.py',197),
  ('unaryRelExpression -> NOT unaryRelExpression','unaryRelExpression',2,'p_unaryRelExpression','interpreter.py',202),
  ('unaryRelExpression -> relExpression','unaryRelExpression',1,'p_unaryRelExpression','interpreter.py',203),
  ('relExpression -> sumExpression relop sumExpression','relExpression',3,'p_relExpression','interpreter.py',208),
  ('relExpression -> sumExpression','relExpression',1,'p_relExpression','interpreter.py',209),
  ('relop -> LE','relop',1,'p_relop','interpreter.py',214),
  ('relop -> LT','relop',1,'p_relop','interpreter.py',215),
  ('relop -> GT','relop',1,'p_relop','interpreter.py',216),
  ('relop -> GE','relop',1,'p_relop','interpreter.py',217),
  ('relop -> EQ','relop',1,'p_relop','interpreter.py',218),
  ('relop -> NEQ','relop',1,'p_relop','interpreter.py',219),
  ('sumExpression -> sumExpression sumop term','sumExpression',3,'p_sumExpression','interpreter.py',224),
  ('sumExpression -> term','sumExpression',1,'p_sumExpression','interpreter.py',225),
  ('sumop -> PLUS','sumop',1,'p_sumop','interpreter.py',230),
  ('sumop -> MINUS','sumop',1,'p_sumop','interpreter.py',231),
  ('term -> term mulop sumElement','term',3,'p_term','interpreter.py',236),
  ('term -> sumElement','term',1,'p_term','interpreter.py',237),
  ('sumElement -> ID','sumElement',1,'p_sumElement','interpreter.py',242),
  ('sumElement -> NUMBER','sumElement',1,'p_sumElement','interpreter.py',243),
  ('mulop -> PROD','mulop',1,'p_mulop','interpreter.py',248),
  ('mulop -> DIV','mulop',1,'p_mulop','interpreter.py',249),
  ('functionalStmt -> FILTER LPAREN lambdaFilter RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',254),
  ('functionalStmt -> MAP LPAREN lambdaStmt RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',255),
  ('functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',256),
  ('lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA iterationElement','lambdaStmt',6,'p_lambdaStmt','interpreter.py',261),
  ('lambdaElement -> ID','lambdaElement',1,'p_lambdaElement','interpreter.py',265),
  ('lambdaElement -> ID OP_ID','lambdaElement',2,'p_lambdaElement','interpreter.py',266),
  ('lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA iterationElement','lambdaFilter',6,'p_lambdaFilter','interpreter.py',271),
  ('inputStmt -> INPUT LPAREN RPAREN','inputStmt',3,'p_inputStmt','interpreter.py',276),
  ('outputStmt -> OUTPUT LPAREN declarationElement RPAREN','outputStmt',4,'p_outputStmt','interpreter.py',281),
  ('commentStmt -> COMMENT','commentStmt',1,'p_commentStmt','interpreter.py',285),
]
