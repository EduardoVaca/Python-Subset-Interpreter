
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMENT STRING OP_STRING OP_NUMBER BOOLEAN OP_BOOLEAN EQ NEQ GT GE LT LE PLUS MINUS PROD DIV EQUALS LPAREN RPAREN LSQUARE RSQUARE COMA ID OP_ID NUMBER COL SEMI IF ELSE FOR IN AND OR NOT LAMBDA MAP REDUCE FILTER INPUT OUTPUTdeclarationList  : declarationList declaration\n                        | declarationdeclaration  : varDeclaration\n                    | statementvarDeclaration   : ID EQUALS declarationElementdeclarationElement   : list\n                            | STRING\n                            | NUMBER\n                            | BOOLEANlist   : LSQUARE listElements RSQUARElistElements : NUMBER\n                    | NUMBER OP_NUMBER\n                    | STRING\n                    | STRING OP_STRING\n                    | BOOLEAN\n                    | BOOLEAN OP_BOOLEANstatement    : expressionStmt\n                    | conditionalStmt SEMI\n                    | iterationStmt SEMI\n                    | functionalStmt\n                    | inputStmt\n                    | outputStmt\n                    | commentStmtiterationStmt    : FOR ID IN iterationElement COL statementiterationElement : list\n                        | IDconditionalStmt  : IF expressionStmt COL statement\n                        | IF expressionStmt COL statement ELSE COL statementexpressionStmt   : expressionStmt OR andExpression\n                        | andExpressionandExpression    : andExpression AND unaryRelExpression\n                        | unaryRelExpressionunaryRelExpression   : NOT unaryRelExpression\n                            | relExpressionrelExpression    : sumExpression relop sumExpression\n                        | sumExpressionrelop    : LE\n                | LT\n                | GT\n                | GE\n                | EQ\n                | NEQsumExpression    : sumExpression sumop term\n                        | termsumop    : PLUS\n                | MINUSterm : term mulop sumElement\n            | sumElementsumElement   : ID\n                    | NUMBERmulop    : PROD\n                | DIVfunctionalStmt   : FILTER LPAREN lambdaFilter RPAREN\n                        | MAP LPAREN lambdaStmt RPAREN\n                        | REDUCE LPAREN lambdaStmt RPARENlambdaStmt   : LAMBDA lambdaElement COL sumExpression COMA iterationElementlambdaElement    : ID\n                        | ID OP_IDlambdaFilter : LAMBDA lambdaElement COL expressionStmt COMA iterationElementinputStmt  : INPUT LPAREN RPARENoutputStmt : OUTPUT LPAREN declarationElement RPARENcommentStmt    : COMMENT'
    
_lr_action_items = {'ID':([0,1,2,3,4,5,6,9,10,11,12,13,14,15,21,22,23,24,25,26,27,28,29,31,32,33,34,36,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,66,68,70,72,74,75,76,85,88,90,91,92,97,98,100,101,106,107,],[5,5,-2,-3,-4,-49,-17,-20,-21,-22,-23,-30,36,37,-62,-32,36,-34,-36,-44,-48,-50,-1,36,-18,-19,36,-49,-33,36,36,-37,-38,-39,-40,-41,-42,-45,-46,36,-51,-52,-5,-6,-7,-8,-9,-29,-31,36,82,87,87,-60,-35,-43,-47,-53,-54,-55,-61,-10,36,36,36,36,82,82,]),'IF':([0,1,2,3,4,5,6,9,10,11,12,13,21,22,24,25,26,27,28,29,32,33,36,43,57,58,59,60,61,63,64,65,72,74,75,76,85,88,90,91,92,97,101,],[14,14,-2,-3,-4,-49,-17,-20,-21,-22,-23,-30,-62,-32,-34,-36,-44,-48,-50,-1,-18,-19,-49,-33,-5,-6,-7,-8,-9,-29,-31,14,-60,-35,-43,-47,-53,-54,-55,-61,-10,14,14,]),'FOR':([0,1,2,3,4,5,6,9,10,11,12,13,21,22,24,25,26,27,28,29,32,33,36,43,57,58,59,60,61,63,64,65,72,74,75,76,85,88,90,91,92,97,101,],[15,15,-2,-3,-4,-49,-17,-20,-21,-22,-23,-30,-62,-32,-34,-36,-44,-48,-50,-1,-18,-19,-49,-33,-5,-6,-7,-8,-9,-29,-31,15,-60,-35,-43,-47,-53,-54,-55,-61,-10,15,15,]),'FILTER':([0,1,2,3,4,5,6,9,10,11,12,13,21,22,24,25,26,27,28,29,32,33,36,43,57,58,59,60,61,63,64,65,72,74,75,76,85,88,90,91,92,97,101,],[16,16,-2,-3,-4,-49,-17,-20,-21,-22,-23,-30,-62,-32,-34,-36,-44,-48,-50,-1,-18,-19,-49,-33,-5,-6,-7,-8,-9,-29,-31,16,-60,-35,-43,-47,-53,-54,-55,-61,-10,16,16,]),'MAP':([0,1,2,3,4,5,6,9,10,11,12,13,21,22,24,25,26,27,28,29,32,33,36,43,57,58,59,60,61,63,64,65,72,74,75,76,85,88,90,91,92,97,101,],[17,17,-2,-3,-4,-49,-17,-20,-21,-22,-23,-30,-62,-32,-34,-36,-44,-48,-50,-1,-18,-19,-49,-33,-5,-6,-7,-8,-9,-29,-31,17,-60,-35,-43,-47,-53,-54,-55,-61,-10,17,17,]),'REDUCE':([0,1,2,3,4,5,6,9,10,11,12,13,21,22,24,25,26,27,28,29,32,33,36,43,57,58,59,60,61,63,64,65,72,74,75,76,85,88,90,91,92,97,101,],[18,18,-2,-3,-4,-49,-17,-20,-21,-22,-23,-30,-62,-32,-34,-36,-44,-48,-50,-1,-18,-19,-49,-33,-5,-6,-7,-8,-9,-29,-31,18,-60,-35,-43,-47,-53,-54,-55,-61,-10,18,18,]),'INPUT':([0,1,2,3,4,5,6,9,10,11,12,13,21,22,24,25,26,27,28,29,32,33,36,43,57,58,59,60,61,63,64,65,72,74,75,76,85,88,90,91,92,97,101,],[19,19,-2,-3,-4,-49,-17,-20,-21,-22,-23,-30,-62,-32,-34,-36,-44,-48,-50,-1,-18,-19,-49,-33,-5,-6,-7,-8,-9,-29,-31,19,-60,-35,-43,-47,-53,-54,-55,-61,-10,19,19,]),'OUTPUT':([0,1,2,3,4,5,6,9,10,11,12,13,21,22,24,25,26,27,28,29,32,33,36,43,57,58,59,60,61,63,64,65,72,74,75,76,85,88,90,91,92,97,101,],[20,20,-2,-3,-4,-49,-17,-20,-21,-22,-23,-30,-62,-32,-34,-36,-44,-48,-50,-1,-18,-19,-49,-33,-5,-6,-7,-8,-9,-29,-31,20,-60,-35,-43,-47,-53,-54,-55,-61,-10,20,20,]),'COMMENT':([0,1,2,3,4,5,6,9,10,11,12,13,21,22,24,25,26,27,28,29,32,33,36,43,57,58,59,60,61,63,64,65,72,74,75,76,85,88,90,91,92,97,101,],[21,21,-2,-3,-4,-49,-17,-20,-21,-22,-23,-30,-62,-32,-34,-36,-44,-48,-50,-1,-18,-19,-49,-33,-5,-6,-7,-8,-9,-29,-31,21,-60,-35,-43,-47,-53,-54,-55,-61,-10,21,21,]),'NOT':([0,1,2,3,4,5,6,9,10,11,12,13,14,21,22,23,24,25,26,27,28,29,31,32,33,34,36,43,57,58,59,60,61,63,64,65,72,74,75,76,85,88,90,91,92,97,98,101,],[23,23,-2,-3,-4,-49,-17,-20,-21,-22,-23,-30,23,-62,-32,23,-34,-36,-44,-48,-50,-1,23,-18,-19,23,-49,-33,-5,-6,-7,-8,-9,-29,-31,23,-60,-35,-43,-47,-53,-54,-55,-61,-10,23,23,23,]),'NUMBER':([0,1,2,3,4,5,6,9,10,11,12,13,14,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,74,75,76,85,88,90,91,92,97,98,100,101,],[28,28,-2,-3,-4,-49,-17,-20,-21,-22,-23,-30,28,-62,-32,28,-34,-36,-44,-48,-50,-1,60,28,-18,-19,28,-49,60,-33,28,28,-37,-38,-39,-40,-41,-42,-45,-46,28,-51,-52,-5,-6,-7,-8,-9,78,-29,-31,28,-60,-35,-43,-47,-53,-54,-55,-61,-10,28,28,28,28,]),'$end':([1,2,3,4,5,6,9,10,11,12,13,21,22,24,25,26,27,28,29,32,33,36,43,57,58,59,60,61,63,64,72,74,75,76,85,88,90,91,92,],[0,-2,-3,-4,-49,-17,-20,-21,-22,-23,-30,-62,-32,-34,-36,-44,-48,-50,-1,-18,-19,-49,-33,-5,-6,-7,-8,-9,-29,-31,-60,-35,-43,-47,-53,-54,-55,-61,-10,]),'EQUALS':([5,],[30,]),'PROD':([5,26,27,28,36,75,76,],[-49,55,-48,-50,-49,55,-47,]),'DIV':([5,26,27,28,36,75,76,],[-49,56,-48,-50,-49,56,-47,]),'LE':([5,25,26,27,28,36,75,76,],[-49,46,-44,-48,-50,-49,-43,-47,]),'LT':([5,25,26,27,28,36,75,76,],[-49,47,-44,-48,-50,-49,-43,-47,]),'GT':([5,25,26,27,28,36,75,76,],[-49,48,-44,-48,-50,-49,-43,-47,]),'GE':([5,25,26,27,28,36,75,76,],[-49,49,-44,-48,-50,-49,-43,-47,]),'EQ':([5,25,26,27,28,36,75,76,],[-49,50,-44,-48,-50,-49,-43,-47,]),'NEQ':([5,25,26,27,28,36,75,76,],[-49,51,-44,-48,-50,-49,-43,-47,]),'PLUS':([5,25,26,27,28,36,74,75,76,104,],[-49,52,-44,-48,-50,-49,52,-43,-47,52,]),'MINUS':([5,25,26,27,28,36,74,75,76,104,],[-49,53,-44,-48,-50,-49,53,-43,-47,53,]),'AND':([5,13,22,24,25,26,27,28,36,43,63,64,74,75,76,],[-49,34,-32,-34,-36,-44,-48,-50,-49,-33,34,-31,-35,-43,-47,]),'OR':([5,6,13,22,24,25,26,27,28,35,36,43,63,64,74,75,76,103,],[-49,31,-30,-32,-34,-36,-44,-48,-50,31,-49,-33,-29,-31,-35,-43,-47,31,]),'ELSE':([6,9,10,11,12,13,21,22,24,25,26,27,28,32,33,36,43,63,64,72,74,75,76,81,85,88,90,91,],[-17,-20,-21,-22,-23,-30,-62,-32,-34,-36,-44,-48,-50,-18,-19,-49,-33,-29,-31,-60,-35,-43,-47,96,-53,-54,-55,-61,]),'SEMI':([6,7,8,9,10,11,12,13,21,22,24,25,26,27,28,32,33,36,43,63,64,72,74,75,76,81,85,88,90,91,102,105,],[-17,32,33,-20,-21,-22,-23,-30,-62,-32,-34,-36,-44,-48,-50,-18,-19,-49,-33,-29,-31,-60,-35,-43,-47,-27,-53,-54,-55,-61,-24,-28,]),'COL':([13,22,24,25,26,27,28,35,36,43,63,64,74,75,76,82,83,84,86,87,89,92,96,99,],[-30,-32,-34,-36,-44,-48,-50,65,-49,-33,-29,-31,-35,-43,-47,-26,97,-25,98,-57,100,-10,101,-58,]),'COMA':([13,22,24,25,26,27,28,36,43,63,64,74,75,76,103,104,],[-30,-32,-34,-36,-44,-48,-50,-49,-33,-29,-31,-35,-43,-47,106,107,]),'LPAREN':([16,17,18,19,20,],[38,39,40,41,42,]),'STRING':([30,42,62,],[59,59,79,]),'BOOLEAN':([30,42,62,],[61,61,80,]),'LSQUARE':([30,42,66,106,107,],[62,62,62,62,62,]),'IN':([37,],[66,]),'LAMBDA':([38,39,40,],[68,70,70,]),'RPAREN':([41,58,59,60,61,67,69,71,73,82,84,92,108,109,],[72,-6,-7,-8,-9,85,88,90,91,-26,-25,-10,-59,-56,]),'RSQUARE':([77,78,79,80,93,94,95,],[92,-11,-13,-15,-12,-14,-16,]),'OP_NUMBER':([78,],[93,]),'OP_STRING':([79,],[94,]),'OP_BOOLEAN':([80,],[95,]),'OP_ID':([87,],[99,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declarationList':([0,],[1,]),'declaration':([0,1,],[2,29,]),'varDeclaration':([0,1,],[3,3,]),'statement':([0,1,65,97,101,],[4,4,81,102,105,]),'expressionStmt':([0,1,14,65,97,98,101,],[6,6,35,6,6,103,6,]),'conditionalStmt':([0,1,65,97,101,],[7,7,7,7,7,]),'iterationStmt':([0,1,65,97,101,],[8,8,8,8,8,]),'functionalStmt':([0,1,65,97,101,],[9,9,9,9,9,]),'inputStmt':([0,1,65,97,101,],[10,10,10,10,10,]),'outputStmt':([0,1,65,97,101,],[11,11,11,11,11,]),'commentStmt':([0,1,65,97,101,],[12,12,12,12,12,]),'andExpression':([0,1,14,31,65,97,98,101,],[13,13,13,63,13,13,13,13,]),'unaryRelExpression':([0,1,14,23,31,34,65,97,98,101,],[22,22,22,43,22,64,22,22,22,22,]),'relExpression':([0,1,14,23,31,34,65,97,98,101,],[24,24,24,24,24,24,24,24,24,24,]),'sumExpression':([0,1,14,23,31,34,44,65,97,98,100,101,],[25,25,25,25,25,25,74,25,25,25,104,25,]),'term':([0,1,14,23,31,34,44,45,65,97,98,100,101,],[26,26,26,26,26,26,26,75,26,26,26,26,26,]),'sumElement':([0,1,14,23,31,34,44,45,54,65,97,98,100,101,],[27,27,27,27,27,27,27,27,76,27,27,27,27,27,]),'relop':([25,],[44,]),'sumop':([25,74,104,],[45,45,45,]),'mulop':([26,75,],[54,54,]),'declarationElement':([30,42,],[57,73,]),'list':([30,42,66,106,107,],[58,58,84,84,84,]),'lambdaFilter':([38,],[67,]),'lambdaStmt':([39,40,],[69,71,]),'listElements':([62,],[77,]),'iterationElement':([66,106,107,],[83,108,109,]),'lambdaElement':([68,70,],[86,89,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declarationList","S'",1,None,None,None),
  ('declarationList -> declarationList declaration','declarationList',2,'p_declarationList','interpreter.py',122),
  ('declarationList -> declaration','declarationList',1,'p_declarationList','interpreter.py',123),
  ('declaration -> varDeclaration','declaration',1,'p_declaration','interpreter.py',128),
  ('declaration -> statement','declaration',1,'p_declaration','interpreter.py',129),
  ('varDeclaration -> ID EQUALS declarationElement','varDeclaration',3,'p_varDeclaration','interpreter.py',134),
  ('declarationElement -> list','declarationElement',1,'p_declarationElement','interpreter.py',139),
  ('declarationElement -> STRING','declarationElement',1,'p_declarationElement','interpreter.py',140),
  ('declarationElement -> NUMBER','declarationElement',1,'p_declarationElement','interpreter.py',141),
  ('declarationElement -> BOOLEAN','declarationElement',1,'p_declarationElement','interpreter.py',142),
  ('list -> LSQUARE listElements RSQUARE','list',3,'p_list','interpreter.py',147),
  ('listElements -> NUMBER','listElements',1,'p_listElements','interpreter.py',152),
  ('listElements -> NUMBER OP_NUMBER','listElements',2,'p_listElements','interpreter.py',153),
  ('listElements -> STRING','listElements',1,'p_listElements','interpreter.py',154),
  ('listElements -> STRING OP_STRING','listElements',2,'p_listElements','interpreter.py',155),
  ('listElements -> BOOLEAN','listElements',1,'p_listElements','interpreter.py',156),
  ('listElements -> BOOLEAN OP_BOOLEAN','listElements',2,'p_listElements','interpreter.py',157),
  ('statement -> expressionStmt','statement',1,'p_statement','interpreter.py',162),
  ('statement -> conditionalStmt SEMI','statement',2,'p_statement','interpreter.py',163),
  ('statement -> iterationStmt SEMI','statement',2,'p_statement','interpreter.py',164),
  ('statement -> functionalStmt','statement',1,'p_statement','interpreter.py',165),
  ('statement -> inputStmt','statement',1,'p_statement','interpreter.py',166),
  ('statement -> outputStmt','statement',1,'p_statement','interpreter.py',167),
  ('statement -> commentStmt','statement',1,'p_statement','interpreter.py',168),
  ('iterationStmt -> FOR ID IN iterationElement COL statement','iterationStmt',6,'p_iterationStmt','interpreter.py',173),
  ('iterationElement -> list','iterationElement',1,'p_iterationElement','interpreter.py',178),
  ('iterationElement -> ID','iterationElement',1,'p_iterationElement','interpreter.py',179),
  ('conditionalStmt -> IF expressionStmt COL statement','conditionalStmt',4,'p_conditionalStmt','interpreter.py',184),
  ('conditionalStmt -> IF expressionStmt COL statement ELSE COL statement','conditionalStmt',7,'p_conditionalStmt','interpreter.py',185),
  ('expressionStmt -> expressionStmt OR andExpression','expressionStmt',3,'p_expressionStmt','interpreter.py',190),
  ('expressionStmt -> andExpression','expressionStmt',1,'p_expressionStmt','interpreter.py',191),
  ('andExpression -> andExpression AND unaryRelExpression','andExpression',3,'p_andExpression','interpreter.py',196),
  ('andExpression -> unaryRelExpression','andExpression',1,'p_andExpression','interpreter.py',197),
  ('unaryRelExpression -> NOT unaryRelExpression','unaryRelExpression',2,'p_unaryRelExpression','interpreter.py',202),
  ('unaryRelExpression -> relExpression','unaryRelExpression',1,'p_unaryRelExpression','interpreter.py',203),
  ('relExpression -> sumExpression relop sumExpression','relExpression',3,'p_relExpression','interpreter.py',208),
  ('relExpression -> sumExpression','relExpression',1,'p_relExpression','interpreter.py',209),
  ('relop -> LE','relop',1,'p_relop','interpreter.py',214),
  ('relop -> LT','relop',1,'p_relop','interpreter.py',215),
  ('relop -> GT','relop',1,'p_relop','interpreter.py',216),
  ('relop -> GE','relop',1,'p_relop','interpreter.py',217),
  ('relop -> EQ','relop',1,'p_relop','interpreter.py',218),
  ('relop -> NEQ','relop',1,'p_relop','interpreter.py',219),
  ('sumExpression -> sumExpression sumop term','sumExpression',3,'p_sumExpression','interpreter.py',224),
  ('sumExpression -> term','sumExpression',1,'p_sumExpression','interpreter.py',225),
  ('sumop -> PLUS','sumop',1,'p_sumop','interpreter.py',230),
  ('sumop -> MINUS','sumop',1,'p_sumop','interpreter.py',231),
  ('term -> term mulop sumElement','term',3,'p_term','interpreter.py',236),
  ('term -> sumElement','term',1,'p_term','interpreter.py',237),
  ('sumElement -> ID','sumElement',1,'p_sumElement','interpreter.py',242),
  ('sumElement -> NUMBER','sumElement',1,'p_sumElement','interpreter.py',243),
  ('mulop -> PROD','mulop',1,'p_mulop','interpreter.py',248),
  ('mulop -> DIV','mulop',1,'p_mulop','interpreter.py',249),
  ('functionalStmt -> FILTER LPAREN lambdaFilter RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',254),
  ('functionalStmt -> MAP LPAREN lambdaStmt RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',255),
  ('functionalStmt -> REDUCE LPAREN lambdaStmt RPAREN','functionalStmt',4,'p_functionalStmt','interpreter.py',256),
  ('lambdaStmt -> LAMBDA lambdaElement COL sumExpression COMA iterationElement','lambdaStmt',6,'p_lambdaStmt','interpreter.py',261),
  ('lambdaElement -> ID','lambdaElement',1,'p_lambdaElement','interpreter.py',265),
  ('lambdaElement -> ID OP_ID','lambdaElement',2,'p_lambdaElement','interpreter.py',266),
  ('lambdaFilter -> LAMBDA lambdaElement COL expressionStmt COMA iterationElement','lambdaFilter',6,'p_lambdaFilter','interpreter.py',271),
  ('inputStmt -> INPUT LPAREN RPAREN','inputStmt',3,'p_inputStmt','interpreter.py',276),
  ('outputStmt -> OUTPUT LPAREN declarationElement RPAREN','outputStmt',4,'p_outputStmt','interpreter.py',281),
  ('commentStmt -> COMMENT','commentStmt',1,'p_commentStmt','interpreter.py',285),
]
